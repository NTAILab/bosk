Search.setIndex({"docnames": ["advanced_api", "architectures", "autoapi/bosk/auto/builders/index", "autoapi/bosk/auto/deep_forest/index", "autoapi/bosk/auto/growing_strategies/index", "autoapi/bosk/auto/index", "autoapi/bosk/auto/layers/index", "autoapi/bosk/auto/metrics/index", "autoapi/bosk/auto/validation/index", "autoapi/bosk/block/auto/index", "autoapi/bosk/block/base/index", "autoapi/bosk/block/functional/index", "autoapi/bosk/block/index", "autoapi/bosk/block/meta/index", "autoapi/bosk/block/repo/base/index", "autoapi/bosk/block/repo/index", "autoapi/bosk/block/repo/scope/index", "autoapi/bosk/block/repo/zoo/index", "autoapi/bosk/block/zoo/data_conversion/index", "autoapi/bosk/block/zoo/data_weighting/index", "autoapi/bosk/block/zoo/debugging/index", "autoapi/bosk/block/zoo/gpu_blocks/index", "autoapi/bosk/block/zoo/index", "autoapi/bosk/block/zoo/input_plugs/index", "autoapi/bosk/block/zoo/metrics/index", "autoapi/bosk/block/zoo/models/classification/_jax_util/index", "autoapi/bosk/block/zoo/models/classification/ferns/index", "autoapi/bosk/block/zoo/models/classification/index", "autoapi/bosk/block/zoo/models/classification/jax/index", "autoapi/bosk/block/zoo/models/classification/mgs_ferns/index", "autoapi/bosk/block/zoo/models/index", "autoapi/bosk/block/zoo/models/regression/index", "autoapi/bosk/block/zoo/multi_grained_scanning/_convolution_helpers/index", "autoapi/bosk/block/zoo/multi_grained_scanning/_pooling_impl/index", "autoapi/bosk/block/zoo/multi_grained_scanning/base/index", "autoapi/bosk/block/zoo/multi_grained_scanning/index", "autoapi/bosk/block/zoo/multi_grained_scanning/mil/index", "autoapi/bosk/block/zoo/multi_grained_scanning/multi_grained_scanning_1d/index", "autoapi/bosk/block/zoo/multi_grained_scanning/multi_grained_scanning_2d/index", "autoapi/bosk/block/zoo/multi_grained_scanning/multi_grained_scanning_nd/index", "autoapi/bosk/block/zoo/multi_grained_scanning/pooling/index", "autoapi/bosk/block/zoo/output_plugs/index", "autoapi/bosk/block/zoo/preprocessing/index", "autoapi/bosk/block/zoo/routing/cs/index", "autoapi/bosk/block/zoo/routing/cv/index", "autoapi/bosk/block/zoo/routing/index", "autoapi/bosk/comparison/base/index", "autoapi/bosk/comparison/cross_val/index", "autoapi/bosk/comparison/index", "autoapi/bosk/comparison/metric/index", "autoapi/bosk/data/index", "autoapi/bosk/exceptions/index", "autoapi/bosk/executor/base/index", "autoapi/bosk/executor/block/index", "autoapi/bosk/executor/index", "autoapi/bosk/executor/parallel/dask/index", "autoapi/bosk/executor/parallel/greedy/index", "autoapi/bosk/executor/parallel/index", "autoapi/bosk/executor/parallel/networkx/index", "autoapi/bosk/executor/parallel/topsort/index", "autoapi/bosk/executor/recursive/index", "autoapi/bosk/executor/sklearn_interface/index", "autoapi/bosk/executor/timer/index", "autoapi/bosk/executor/topological/index", "autoapi/bosk/executor/utility/index", "autoapi/bosk/index", "autoapi/bosk/painter/base/index", "autoapi/bosk/painter/graphviz/index", "autoapi/bosk/painter/index", "autoapi/bosk/painter/topological/index", "autoapi/bosk/pipeline/base/index", "autoapi/bosk/pipeline/builder/base/index", "autoapi/bosk/pipeline/builder/functional/index", "autoapi/bosk/pipeline/builder/index", "autoapi/bosk/pipeline/connection/index", "autoapi/bosk/pipeline/converter/dask/index", "autoapi/bosk/pipeline/converter/index", "autoapi/bosk/pipeline/converter/nx/index", "autoapi/bosk/pipeline/dynamic/index", "autoapi/bosk/pipeline/index", "autoapi/bosk/pipeline/serializer/base/index", "autoapi/bosk/pipeline/serializer/index", "autoapi/bosk/pipeline/serializer/joblib/index", "autoapi/bosk/pipeline/serializer/onnx/index", "autoapi/bosk/pipeline/serializer/skops/index", "autoapi/bosk/pipeline/serializer/zip/index", "autoapi/bosk/stages/index", "autoapi/bosk/utility/index", "autoapi/bosk/visitor/base/index", "autoapi/bosk/visitor/group/index", "autoapi/bosk/visitor/index", "autoapi/index", "basic_examples", "contribution", "en_index", "examples", "getting_started", "index", "install", "notebooks/autoblock", "notebooks/basic_forest", "notebooks/comparison_example", "notebooks/conf_screening", "notebooks/executor_basics", "notebooks/mg_scanning", "notebooks/regressor", "notebooks/ru_autoblock", "notebooks/ru_basic_forest", "notebooks/ru_comparison_example", "notebooks/ru_conf_screening", "notebooks/ru_executor_basics", "notebooks/ru_mg_scanning", "notebooks/ru_regressor", "notebooks/ru_serializing", "notebooks/ru_sklearn_interface", "notebooks/serializing", "notebooks/sklearn_interface", "ru_advanced_api", "ru_architectures", "ru_autoapi_index", "ru_basic_examples", "ru_contribution", "ru_examples", "ru_getting_started", "ru_install"], "filenames": ["advanced_api.rst", "architectures.rst", "autoapi/bosk/auto/builders/index.rst", "autoapi/bosk/auto/deep_forest/index.rst", "autoapi/bosk/auto/growing_strategies/index.rst", "autoapi/bosk/auto/index.rst", "autoapi/bosk/auto/layers/index.rst", "autoapi/bosk/auto/metrics/index.rst", "autoapi/bosk/auto/validation/index.rst", "autoapi/bosk/block/auto/index.rst", "autoapi/bosk/block/base/index.rst", "autoapi/bosk/block/functional/index.rst", "autoapi/bosk/block/index.rst", "autoapi/bosk/block/meta/index.rst", "autoapi/bosk/block/repo/base/index.rst", "autoapi/bosk/block/repo/index.rst", "autoapi/bosk/block/repo/scope/index.rst", "autoapi/bosk/block/repo/zoo/index.rst", "autoapi/bosk/block/zoo/data_conversion/index.rst", "autoapi/bosk/block/zoo/data_weighting/index.rst", "autoapi/bosk/block/zoo/debugging/index.rst", "autoapi/bosk/block/zoo/gpu_blocks/index.rst", "autoapi/bosk/block/zoo/index.rst", "autoapi/bosk/block/zoo/input_plugs/index.rst", "autoapi/bosk/block/zoo/metrics/index.rst", "autoapi/bosk/block/zoo/models/classification/_jax_util/index.rst", "autoapi/bosk/block/zoo/models/classification/ferns/index.rst", "autoapi/bosk/block/zoo/models/classification/index.rst", "autoapi/bosk/block/zoo/models/classification/jax/index.rst", "autoapi/bosk/block/zoo/models/classification/mgs_ferns/index.rst", "autoapi/bosk/block/zoo/models/index.rst", "autoapi/bosk/block/zoo/models/regression/index.rst", "autoapi/bosk/block/zoo/multi_grained_scanning/_convolution_helpers/index.rst", "autoapi/bosk/block/zoo/multi_grained_scanning/_pooling_impl/index.rst", "autoapi/bosk/block/zoo/multi_grained_scanning/base/index.rst", "autoapi/bosk/block/zoo/multi_grained_scanning/index.rst", "autoapi/bosk/block/zoo/multi_grained_scanning/mil/index.rst", "autoapi/bosk/block/zoo/multi_grained_scanning/multi_grained_scanning_1d/index.rst", "autoapi/bosk/block/zoo/multi_grained_scanning/multi_grained_scanning_2d/index.rst", "autoapi/bosk/block/zoo/multi_grained_scanning/multi_grained_scanning_nd/index.rst", "autoapi/bosk/block/zoo/multi_grained_scanning/pooling/index.rst", "autoapi/bosk/block/zoo/output_plugs/index.rst", "autoapi/bosk/block/zoo/preprocessing/index.rst", "autoapi/bosk/block/zoo/routing/cs/index.rst", "autoapi/bosk/block/zoo/routing/cv/index.rst", "autoapi/bosk/block/zoo/routing/index.rst", "autoapi/bosk/comparison/base/index.rst", "autoapi/bosk/comparison/cross_val/index.rst", "autoapi/bosk/comparison/index.rst", "autoapi/bosk/comparison/metric/index.rst", "autoapi/bosk/data/index.rst", "autoapi/bosk/exceptions/index.rst", "autoapi/bosk/executor/base/index.rst", "autoapi/bosk/executor/block/index.rst", "autoapi/bosk/executor/index.rst", "autoapi/bosk/executor/parallel/dask/index.rst", "autoapi/bosk/executor/parallel/greedy/index.rst", "autoapi/bosk/executor/parallel/index.rst", "autoapi/bosk/executor/parallel/networkx/index.rst", "autoapi/bosk/executor/parallel/topsort/index.rst", "autoapi/bosk/executor/recursive/index.rst", "autoapi/bosk/executor/sklearn_interface/index.rst", "autoapi/bosk/executor/timer/index.rst", "autoapi/bosk/executor/topological/index.rst", "autoapi/bosk/executor/utility/index.rst", "autoapi/bosk/index.rst", "autoapi/bosk/painter/base/index.rst", "autoapi/bosk/painter/graphviz/index.rst", "autoapi/bosk/painter/index.rst", "autoapi/bosk/painter/topological/index.rst", "autoapi/bosk/pipeline/base/index.rst", "autoapi/bosk/pipeline/builder/base/index.rst", "autoapi/bosk/pipeline/builder/functional/index.rst", "autoapi/bosk/pipeline/builder/index.rst", "autoapi/bosk/pipeline/connection/index.rst", "autoapi/bosk/pipeline/converter/dask/index.rst", "autoapi/bosk/pipeline/converter/index.rst", "autoapi/bosk/pipeline/converter/nx/index.rst", "autoapi/bosk/pipeline/dynamic/index.rst", "autoapi/bosk/pipeline/index.rst", "autoapi/bosk/pipeline/serializer/base/index.rst", "autoapi/bosk/pipeline/serializer/index.rst", "autoapi/bosk/pipeline/serializer/joblib/index.rst", "autoapi/bosk/pipeline/serializer/onnx/index.rst", "autoapi/bosk/pipeline/serializer/skops/index.rst", "autoapi/bosk/pipeline/serializer/zip/index.rst", "autoapi/bosk/stages/index.rst", "autoapi/bosk/utility/index.rst", "autoapi/bosk/visitor/base/index.rst", "autoapi/bosk/visitor/group/index.rst", "autoapi/bosk/visitor/index.rst", "autoapi/index.rst", "basic_examples.rst", "contribution.rst", "en_index.rst", "examples.rst", "getting_started.rst", "index.rst", "install.rst", "notebooks/autoblock.ipynb", "notebooks/basic_forest.ipynb", "notebooks/comparison_example.ipynb", "notebooks/conf_screening.ipynb", "notebooks/executor_basics.ipynb", "notebooks/mg_scanning.ipynb", "notebooks/regressor.ipynb", "notebooks/ru_autoblock.ipynb", "notebooks/ru_basic_forest.ipynb", "notebooks/ru_comparison_example.ipynb", "notebooks/ru_conf_screening.ipynb", "notebooks/ru_executor_basics.ipynb", "notebooks/ru_mg_scanning.ipynb", "notebooks/ru_regressor.ipynb", "notebooks/ru_serializing.ipynb", "notebooks/ru_sklearn_interface.ipynb", "notebooks/serializing.ipynb", "notebooks/sklearn_interface.ipynb", "ru_advanced_api.rst", "ru_architectures.rst", "ru_autoapi_index.rst", "ru_basic_examples.rst", "ru_contribution.rst", "ru_examples.rst", "ru_getting_started.rst", "ru_install.rst"], "titles": ["Advanced bosk usage examples", "Deep Forest architectures examples", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.auto.builders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.auto.deep_forest</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.auto.growing_strategies</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.auto</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.auto.layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.auto.metrics</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.auto.validation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.block.auto</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.block.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.block.functional</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.block</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.block.meta</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.block.repo.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.block.repo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.block.repo.scope</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.block.repo.zoo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.block.zoo.data_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.block.zoo.data_weighting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.block.zoo.debugging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.block.zoo.gpu_blocks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.block.zoo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.block.zoo.input_plugs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.block.zoo.metrics</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.block.zoo.models.classification._jax_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.block.zoo.models.classification.ferns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.block.zoo.models.classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.block.zoo.models.classification.jax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.block.zoo.models.classification.mgs_ferns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.block.zoo.models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.block.zoo.models.regression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.block.zoo.multi_grained_scanning._convolution_helpers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.block.zoo.multi_grained_scanning._pooling_impl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.block.zoo.multi_grained_scanning.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.block.zoo.multi_grained_scanning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.block.zoo.multi_grained_scanning.mil</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.block.zoo.multi_grained_scanning.multi_grained_scanning_1d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.block.zoo.multi_grained_scanning.multi_grained_scanning_2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.block.zoo.multi_grained_scanning.multi_grained_scanning_nd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.block.zoo.multi_grained_scanning.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.block.zoo.output_plugs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.block.zoo.preprocessing</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.block.zoo.routing.cs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.block.zoo.routing.cv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.block.zoo.routing</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.comparison.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.comparison.cross_val</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.comparison</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.comparison.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.executor.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.executor.block</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.executor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.executor.parallel.dask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.executor.parallel.greedy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.executor.parallel</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.executor.parallel.networkx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.executor.parallel.topsort</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.executor.recursive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.executor.sklearn_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.executor.timer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.executor.topological</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.executor.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.painter.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.painter.graphviz</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.painter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.painter.topological</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.pipeline.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.pipeline.builder.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.pipeline.builder.functional</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.pipeline.builder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.pipeline.connection</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.pipeline.converter.dask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.pipeline.converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.pipeline.converter.nx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.pipeline.dynamic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.pipeline</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.pipeline.serializer.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.pipeline.serializer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.pipeline.serializer.joblib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.pipeline.serializer.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.pipeline.serializer.skops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.pipeline.serializer.zip</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.stages</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.visitor.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.visitor.group</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bosk.visitor</span></code>", "API Reference", "Basic bosk usage user guide", "Contributing guidelines", "Welcome to bosk\u2019s documentation!", "Bosk usage examples", "Getting started", "\u0414\u043e\u0431\u0440\u043e \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 bosk!", "Installing bosk", "Example of the autoblock usage", "Example of the basic bosk usage", "User guide of the models comparison using bosk", "Confidence screening example", "User guide of the pipeline executors usage", "Multi-grained scanning example", "Regression example", "\u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0430\u0432\u0442\u043e\u0431\u043b\u043e\u043a\u0430", "\u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f bosk", "\u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 bosk", "\u0426\u0435\u043d\u0437\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0445\u043e\u0440\u043e\u0448\u043e \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 (Confidence screening)", "\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044e \u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u0435\u0439", "\u041f\u0440\u0438\u043c\u0435\u0440 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u0437\u0435\u0440\u043d\u0438\u0441\u0442\u043e\u0433\u043e \u0441\u043a\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f", "\u041a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u043e\u0440\u043e\u0432", "\u0418\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f \u043f\u043e \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438", "\u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f sklearn \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 \u043f\u043e\u0432\u0435\u0440\u0445 \u043a\u043e\u043d\u0432\u0435\u0439\u0435\u0440\u0430 bosk", "Serialization user guide", "Example of the sklearn interface usage over the bosk pipeline", "\u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f bosk", "\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440 \u043c\u043e\u0434\u0435\u043b\u0438 \u0413\u043b\u0443\u0431\u043e\u043a\u043e\u0433\u043e \u043b\u0435\u0441\u0430", "\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430", "\u0411\u0430\u0437\u043e\u0432\u0430\u044f \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f \u043f\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044e bosk", "\u041a\u0430\u043a \u0441\u0442\u0430\u0442\u044c \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0430", "\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f bosk", "\u041f\u0440\u0438\u0441\u0442\u0443\u043f\u0430\u044f \u043a \u0440\u0430\u0431\u043e\u0442\u0435", "\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 bosk"], "terms": {"On": [0, 95], "thi": [0, 6, 9, 10, 12, 13, 21, 23, 31, 41, 52, 54, 56, 57, 60, 63, 91, 92, 94, 95, 98, 99, 100, 101, 103, 104, 105, 110, 115, 116], "page": [0, 91, 92, 95, 96], "you": [0, 47, 48, 52, 81, 84, 92, 93, 95, 96, 99, 100, 101, 103, 115, 116], "can": [0, 1, 5, 6, 9, 10, 11, 12, 13, 14, 15, 20, 21, 23, 29, 31, 35, 40, 41, 45, 47, 48, 52, 54, 56, 57, 62, 63, 64, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 88, 90, 92, 93, 95, 96, 98, 99, 100, 101, 102, 103, 104, 115], "find": [0, 31, 48, 52, 54, 56, 57, 92, 95, 96, 101, 103, 110], "api": [0, 31, 94, 100, 102, 107, 119], "requir": [0, 1, 9, 10, 12, 23, 31, 35, 51, 52, 54, 56, 57, 65, 86, 93, 98, 99, 100, 101, 103, 116, 121, 124], "know": [0, 116], "basic": [0, 1, 52, 95, 99, 103], "autoblock": [0, 95, 117, 122], "model": [0, 1, 3, 5, 6, 8, 12, 22, 34, 35, 37, 38, 39, 44, 45, 46, 47, 48, 49, 65, 91, 94, 95, 96, 97, 99, 100, 103, 104, 106, 107, 108, 111, 115, 116, 119, 123], "comparison": [0, 65, 91, 95, 108, 119], "scikit": [0, 31, 54, 61, 94, 95, 96, 97, 99, 106, 114, 116, 117, 122, 123], "learn": [0, 31, 54, 61, 94, 95, 96, 97, 99, 106, 114, 116, 117, 122, 123], "interfac": [0, 9, 11, 12, 35, 54, 56, 57, 61, 72, 73, 75, 76, 77, 88, 90, 95, 99, 101, 103], "serial": [0, 9, 12, 65, 79, 91, 95, 100, 113, 119], "guid": [0, 31, 93, 94, 95, 98], "The": [1, 3, 4, 5, 6, 9, 10, 11, 12, 15, 18, 20, 21, 23, 24, 26, 29, 31, 35, 41, 43, 44, 45, 46, 47, 48, 52, 53, 54, 56, 57, 60, 61, 62, 63, 66, 67, 68, 69, 70, 72, 73, 74, 76, 79, 80, 81, 82, 84, 85, 89, 93, 95, 96, 98, 99, 101, 103, 110, 115], "idea": [1, 29], "behind": 1, "i": [1, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 18, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 35, 37, 38, 39, 40, 41, 43, 44, 45, 46, 48, 51, 52, 53, 54, 56, 57, 60, 61, 63, 65, 70, 72, 73, 75, 76, 77, 78, 79, 81, 84, 85, 86, 88, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 108, 110, 115, 116], "stack": [1, 3, 5, 6, 18, 95, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 122], "so": [1, 54, 56, 57, 60, 63, 81, 84, 98, 100, 101, 103, 116], "call": [1, 27, 31, 53, 54, 96, 100, 103], "layer": [1, 2, 3, 5, 10, 12, 65, 91, 94, 96, 100, 101, 103, 116, 119], "contain": [1, 10, 12, 13, 15, 21, 22, 23, 31, 41, 48, 49, 52, 54, 63, 64, 66, 68, 72, 73, 91, 93, 96, 100, 101, 103], "decis": [1, 31], "each": [1, 2, 3, 5, 10, 11, 12, 18, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 35, 39, 40, 41, 43, 44, 45, 47, 48, 53, 54, 56, 57, 60, 63, 70, 73, 75, 76, 79, 93, 95, 96, 99, 100, 103, 105, 110], "next": [1, 54, 56, 57, 100], "get": [1, 10, 11, 12, 14, 15, 16, 19, 21, 23, 41, 47, 48, 54, 56, 57, 71, 72, 73, 92, 94, 95, 99, 102, 105, 116], "hi": [1, 100, 103], "input": [1, 2, 3, 5, 6, 10, 11, 12, 13, 31, 32, 51, 52, 54, 56, 57, 60, 61, 63, 64, 67, 68, 69, 70, 72, 73, 74, 75, 79, 80, 81, 82, 84, 85, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 122, 123], "outcom": [1, 100, 105, 112], "previou": [1, 27, 31, 103], "one": [1, 3, 5, 10, 11, 12, 18, 23, 31, 35, 37, 40, 41, 51, 53, 54, 56, 57, 60, 63, 64, 73, 93, 94, 100, 101, 103, 115], "concaten": [1, 18, 35, 94, 96, 102], "featur": [1, 3, 5, 18, 19, 21, 23, 26, 27, 28, 29, 31, 43, 44, 45, 52, 93, 94, 96, 121], "modif": [1, 89, 102], "appli": [1, 5, 26, 29, 31, 35, 40, 54, 65, 86, 96, 101, 108], "ar": [1, 2, 3, 4, 5, 9, 10, 12, 13, 15, 20, 21, 23, 31, 32, 35, 40, 41, 46, 48, 51, 52, 53, 54, 56, 57, 60, 63, 65, 68, 69, 70, 79, 81, 84, 86, 93, 94, 96, 99, 100, 101, 103, 115, 116], "variou": [1, 31, 95, 101], "differ": [1, 3, 5, 6, 10, 12, 20, 21, 35, 40, 46, 47, 48, 76, 96, 100, 101, 103], "weight": [1, 19, 27, 31, 99, 101, 102, 108, 118], "scheme": [1, 54, 63, 101, 118], "confid": [1, 43, 45, 118], "screen": [1, 43, 45, 118], "well": [1, 10, 12, 20, 21, 35, 40, 94], "predict": [1, 5, 7, 12, 24, 25, 26, 27, 28, 29, 31, 34, 35, 37, 38, 39, 46, 48, 54, 61, 65, 86, 94, 96, 97, 101, 102, 108, 123], "data": [1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 13, 18, 19, 20, 21, 23, 24, 25, 26, 28, 29, 31, 32, 34, 35, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 56, 57, 60, 61, 62, 63, 65, 75, 76, 81, 84, 86, 91, 95, 96, 99, 100, 101, 103, 104, 105, 106, 108, 111, 114, 116, 119, 123], "multigrain": [1, 111, 118], "scan": [1, 3, 5, 29, 34, 35, 37, 38, 39, 111, 118], "imag": [1, 5, 35, 38, 39, 67, 68, 69, 99, 100, 101, 102, 104, 106, 107, 108, 109, 111, 113, 114, 115, 116], "bosk": [1, 91, 93, 96, 99, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 115, 118, 119, 121, 123], "design": 1, "respect": [1, 103], "flexibl": 1, "all": [1, 4, 5, 15, 16, 17, 18, 22, 27, 31, 44, 45, 46, 48, 49, 51, 52, 54, 56, 57, 63, 66, 68, 72, 73, 75, 76, 77, 88, 90, 93, 95, 99, 100, 101, 102, 115], "describ": [1, 12, 96, 99, 100, 101, 102], "abov": [1, 100, 101], "algorithm": [1, 3, 5, 54, 63, 93, 101, 104], "easili": [1, 99, 101], "made": [1, 6, 10, 12, 20, 21, 40, 72, 73], "comput": [1, 10, 12, 13, 18, 20, 21, 23, 24, 26, 27, 28, 29, 31, 35, 39, 40, 41, 43, 44, 45, 52, 53, 54, 56, 57, 62, 63, 66, 67, 68, 69, 70, 75, 76, 77, 79, 88, 90, 94, 96, 98, 99, 100, 103, 115], "pipelin": [1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 14, 15, 20, 23, 41, 46, 47, 48, 52, 53, 54, 56, 57, 60, 61, 63, 65, 66, 67, 68, 69, 86, 88, 90, 91, 94, 95, 97, 99, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 119, 122, 123], "moreov": 1, "new": [1, 2, 4, 5, 11, 18, 31, 35, 72, 73, 93, 94, 99, 100, 102, 103, 104, 106, 109, 111, 121], "self": [1, 9, 10, 12, 18, 19, 20, 21, 28, 35, 39, 40, 44, 45, 65, 78, 79, 93, 95, 99, 101, 106, 108], "block": [1, 3, 5, 6, 46, 47, 48, 50, 51, 52, 54, 56, 57, 60, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 94, 95, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115, 119, 123], "test": [1, 26, 29, 48, 93, 95, 100, 101, 102, 104, 105, 107, 108, 109, 111, 112, 115, 121, 122], "within": [1, 98], "framework": [1, 46, 48, 52, 94, 96, 100, 101], "To": [1, 11, 12, 27, 31, 73, 93, 96, 98, 99, 100, 101], "deepli": 1, "understand": [1, 10, 12, 103], "specif": [1, 10, 12, 21], "consid": [1, 10, 12, 23, 29, 31, 35, 41, 54, 56, 57, 60, 81, 82, 84, 92, 94, 96, 99, 115], "read": [1, 31, 92, 98], "follow": [1, 5, 7, 31, 35, 54, 56, 57, 93, 94, 96, 98, 99, 115], "paper": 1, "z": [1, 118], "h": [1, 118], "zhou": [1, 118], "j": [1, 118], "feng": [1, 118], "toward": [1, 118], "an": [1, 6, 10, 12, 21, 23, 27, 31, 34, 35, 37, 38, 39, 40, 41, 44, 45, 54, 67, 68, 75, 99, 100, 116, 118], "altern": [1, 31, 98, 118], "neural": [1, 94, 99, 118], "network": [1, 94, 99, 118], "wang": [1, 118], "c": [1, 12, 22, 32, 45, 91, 102, 109, 118, 119], "lu": [1, 118], "n": [1, 18, 20, 31, 32, 35, 39, 40, 43, 44, 45, 98, 118, 124], "cheng": [1, 118], "y": [1, 2, 3, 5, 6, 9, 19, 23, 25, 26, 27, 28, 29, 31, 34, 35, 37, 38, 39, 44, 45, 48, 49, 54, 61, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 122, 123], "jiang": [1, 118], "b": [1, 72, 73, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 121, 122, 123], "base": [1, 2, 3, 4, 5, 6, 8, 9, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 37, 38, 39, 40, 41, 43, 44, 45, 47, 48, 49, 50, 51, 53, 54, 56, 57, 60, 61, 62, 63, 64, 65, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 89, 90, 91, 96, 100, 101, 107, 108, 118, 119], "multivari": [1, 118], "classif": [1, 12, 22, 30, 91, 99, 100, 101, 106, 107, 108, 116, 118, 119], "diagnost": [1, 118], "health": [1, 118], "monitor": [1, 118], "yang": [1, 118], "f": [1, 98, 99, 103, 106, 110, 118, 124], "xu": [1, 118], "q": [1, 31, 118], "li": [1, 118], "ji": [1, 118], "ship": [1, 118], "detect": [1, 118], "from": [1, 5, 9, 10, 12, 13, 15, 17, 21, 23, 27, 31, 41, 44, 45, 47, 48, 53, 54, 56, 57, 61, 63, 65, 72, 73, 80, 81, 82, 84, 85, 87, 89, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 122, 123], "thermal": [1, 118], "remot": [1, 118], "sens": [1, 118], "imageri": [1, 118], "through": [1, 54, 62, 103, 118], "region": [1, 118], "zheng": [1, 118], "w": [1, 118], "cao": [1, 118], "": [1, 9, 12, 15, 16, 46, 47, 48, 52, 54, 56, 57, 63, 66, 67, 68, 69, 72, 73, 95, 99, 100, 101, 102, 103, 104, 105, 109, 110, 115, 116, 118], "jin": [1, 118], "x": [1, 2, 3, 5, 6, 9, 18, 19, 21, 23, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 43, 44, 45, 54, 61, 72, 73, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 122, 123], "mo": [1, 118], "gao": [1, 118], "qu": [1, 118], "zhu": [1, 118], "local": [1, 15, 16, 95, 118], "expert": [1, 118], "elm": [1, 118], "pedestrian": [1, 118], "utkin": [1, 118], "l": [1, 31, 118], "v": [1, 118], "ryabinin": [1, 118], "m": [1, 104, 111, 118], "A": [1, 5, 7, 27, 31, 35, 39, 47, 48, 75, 76, 96, 118], "siames": [1, 118], "pang": [1, 118], "ting": [1, 118], "k": [1, 31, 118], "zhao": [1, 118], "p": [1, 31, 118], "improv": [1, 31, 93, 99, 102, 118], "konstantinov": [1, 118], "meldo": [1, 118], "chukanov": [1, 118], "us": [1, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 20, 21, 23, 27, 31, 32, 35, 37, 38, 39, 40, 41, 44, 45, 46, 47, 48, 52, 53, 54, 56, 57, 61, 63, 64, 65, 67, 68, 69, 70, 72, 73, 75, 76, 77, 79, 80, 81, 82, 86, 88, 90, 93, 94, 96, 98, 99, 100, 102, 103, 104, 115, 116, 118], "regress": [1, 12, 22, 30, 91, 116, 119], "sequentialpipelinebuild": 2, "executor_cl": [2, 3, 4, 5, 6, 54, 61, 94, 96, 97, 123], "growing_strategi": [2, 3, 5, 65, 91, 119], "sequenti": [2, 3, 5, 99, 101, 106, 108], "allow": [2, 9, 27, 31, 48, 52, 81, 84, 96, 101], "build": [2, 3, 5, 31, 41, 71, 72, 73, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 122, 123], "deep": [2, 3, 4, 5, 10, 12, 48, 54, 63, 70, 79, 92, 94, 95, 100, 101, 102, 103, 104, 105, 108, 116, 118], "forest": [2, 3, 4, 5, 10, 12, 27, 28, 31, 48, 70, 72, 73, 79, 92, 94, 95, 97, 100, 101, 102, 103, 104, 105, 108, 116, 118], "paramet": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 87, 88, 89, 90, 96, 99, 101, 106, 108], "type": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 28, 29, 31, 32, 34, 35, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 79, 80, 81, 82, 84, 85, 87, 88, 90, 96, 100, 101, 108], "executor": [2, 3, 4, 5, 6, 47, 48, 65, 66, 67, 68, 69, 70, 79, 91, 92, 95, 99, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 122, 123], "baseexecutor": [2, 3, 4, 5, 6, 47, 48, 52, 54, 56, 57, 60, 61, 63, 64, 66, 67, 68, 69], "growingstrategi": [2, 3, 4, 5], "grow": [2, 3, 4, 5, 31], "strategi": [2, 3, 4, 5, 47, 48, 101], "stop": [2, 4, 5, 31], "criterion": [2, 4, 27, 31], "basedata": [2, 4, 5, 6, 8, 9, 10, 12, 19, 21, 46, 47, 48, 49, 50, 52, 54, 56, 57, 60, 63, 65, 75, 96, 100, 101, 107, 108, 123], "train": [2, 3, 5, 6, 27, 29, 31, 44, 45, 48, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 115, 122], "base_input_nam": 2, "name": [2, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 18, 20, 21, 23, 27, 31, 35, 40, 41, 43, 44, 45, 48, 49, 52, 54, 56, 57, 60, 63, 65, 67, 68, 72, 73, 93, 99, 100, 101, 103, 108, 116, 121], "default": [2, 4, 10, 12, 18, 21, 23, 31, 41, 51, 52, 53, 54, 61, 72, 73, 75, 76, 77, 81, 84, 88, 90, 99, 101, 116], "list": [2, 3, 4, 5, 6, 7, 12, 13, 18, 20, 21, 23, 25, 27, 31, 41, 43, 45, 46, 47, 48, 53, 54, 56, 57, 61, 63, 66, 67, 68, 70, 75, 78, 79, 93, 95, 96, 100, 101, 103, 110], "basepipelin": [2, 3, 4, 5, 6, 12, 46, 47, 48, 52, 54, 56, 57, 60, 61, 63, 66, 67, 68, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 85, 100, 107], "built": [2, 96, 100], "histori": 2, "map": [2, 4, 5, 6, 7, 8, 10, 12, 13, 21, 23, 41, 52, 54, 56, 57, 60, 61, 62, 63, 64, 72, 73, 75, 76, 103, 116], "str": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 20, 21, 23, 26, 27, 29, 31, 35, 40, 41, 43, 45, 46, 47, 48, 49, 50, 52, 54, 56, 57, 60, 61, 63, 65, 66, 67, 68, 69, 70, 72, 73, 75, 76, 79, 81, 85, 100, 101, 107, 108], "float": [2, 5, 7, 8, 25, 31, 43, 45, 47, 48, 49, 54, 62, 65, 67, 68, 69, 87], "metric": [2, 3, 4, 5, 6, 8, 12, 22, 27, 31, 46, 47, 48, 65, 91, 95, 100, 101, 102, 104, 105, 107, 108, 109, 111, 112, 113, 114, 115, 116, 119, 122], "collect": [2, 5, 7, 10, 12, 31, 47, 48], "iter": [2, 3, 5, 27, 31, 47, 48, 54, 56, 57, 63], "append": [2, 5, 7, 54, 56, 57], "fit": [2, 6, 8, 9, 10, 12, 25, 31, 46, 48, 52, 53, 54, 61, 62, 65, 86, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 122, 123], "return": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 28, 29, 32, 34, 35, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 79, 80, 81, 82, 84, 85, 87, 99, 100, 101, 102, 104, 106, 107, 108, 109, 111], "true": [2, 4, 5, 8, 13, 21, 23, 25, 27, 31, 41, 43, 45, 46, 47, 48, 65, 67, 68, 81, 84, 86, 99, 100, 101, 102, 104, 106, 107, 108, 109, 111, 114, 116], "wa": [2, 11, 31, 52, 68, 69, 72, 73, 99, 100, 101, 103], "successfulli": 2, "bool": [2, 4, 5, 8, 9, 12, 13, 21, 23, 25, 26, 27, 29, 31, 41, 46, 47, 48, 52, 54, 65, 67, 68, 81, 84, 86], "_log_metr": 2, "map_input": 2, "given": [2, 3, 5, 8, 10, 11, 12, 13, 18, 20, 21, 23, 24, 26, 28, 29, 35, 39, 40, 41, 43, 44, 45, 48, 49, 52, 53, 54, 56, 57, 60, 61, 62, 65, 72, 73, 81, 84, 86, 89, 96, 99, 104], "transform": [2, 8, 9, 10, 12, 31, 46, 48, 52, 53, 54, 61, 62, 65, 86, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 122, 123], "stage": [2, 10, 12, 13, 18, 20, 21, 23, 24, 26, 28, 29, 35, 39, 40, 41, 43, 44, 45, 52, 53, 54, 56, 57, 60, 61, 62, 63, 65, 68, 69, 75, 76, 91, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 119, 122, 123], "For": [2, 5, 9, 35, 40, 45, 93, 94, 96, 98, 100, 101], "exampl": [2, 5, 9, 10, 11, 12, 14, 15, 21, 31, 35, 45, 52, 54, 72, 73, 92, 93, 96, 98, 101, 103, 122], "depend": [2, 98, 100], "x_origin": 2, "have": [2, 9, 10, 12, 21, 31, 35, 40, 41, 44, 45, 46, 48, 90, 93, 96, 99, 100, 101, 103, 115], "onli": [2, 11, 23, 31, 35, 40, 52, 54, 56, 57, 60, 63, 65, 73, 86, 96, 98, 100, 101, 103], "should": [2, 9, 10, 11, 12, 13, 20, 21, 23, 31, 35, 40, 41, 44, 45, 54, 56, 57, 65, 66, 67, 68, 69, 72, 73, 86, 93, 96, 98, 100, 101, 102, 115], "construct": [3, 5, 72, 73, 94, 102, 123], "default_make_metr": 3, "default_executor_cl": 3, "baseautodeepforestconstructor": [3, 5], "max_it": [3, 5, 96, 123], "10": [3, 5, 26, 29, 31, 98, 99, 101, 106, 108, 124], "cv": [3, 5, 8, 12, 22, 45, 91, 96, 101, 108, 119, 123], "5": [3, 5, 31, 94, 97, 99, 100, 101, 103, 104, 106, 107, 108, 110, 111, 113, 115], "make_metr": [3, 5], "none": [3, 5, 6, 9, 10, 11, 12, 13, 19, 21, 23, 25, 26, 27, 29, 31, 32, 34, 35, 37, 38, 39, 40, 41, 44, 45, 46, 47, 48, 49, 52, 53, 54, 56, 57, 60, 61, 63, 66, 67, 68, 70, 72, 73, 75, 78, 79, 81, 82, 85, 99, 101, 103, 106, 108, 110], "block_class": [3, 5], "random_st": [3, 5, 6, 9, 12, 26, 27, 29, 31, 44, 45, 46, 47, 48, 95, 96, 100, 101, 102, 104, 105, 107, 108, 109, 111, 112, 114, 116, 122, 123], "abc": [3, 4, 5, 6, 8, 10, 12, 14, 15, 21, 34, 46, 48, 49, 52, 53, 54, 56, 57, 66, 68, 71, 73, 75, 80, 81, 88, 90], "set": [3, 5, 7, 10, 12, 21, 27, 31, 35, 44, 45, 46, 48, 52, 54, 56, 57, 60, 63, 67, 68, 69, 70, 79, 94, 95, 96, 100, 101, 103, 110], "split": [3, 5, 25, 28, 31, 35, 44, 45, 48, 75, 76], "step": [3, 5, 10, 12, 18, 20, 21, 23, 24, 40, 41, 43, 44, 45, 54, 56, 57, 99, 101, 106, 108], "where": [3, 5, 27, 31, 32, 45, 66, 68, 98, 100, 101], "subdivid": [3, 5], "At": [3, 5, 10, 12, 13, 23, 35, 44, 45, 52, 54, 65, 86], "make": [3, 5, 10, 11, 12, 13, 21, 23, 41, 46, 48, 52, 54, 63, 67, 68, 69, 72, 73, 75, 76, 77, 88, 90, 92, 94, 95, 96, 98, 99, 100, 101, 103, 115, 116, 121], "princip": [3, 5], "gener": [3, 5, 6, 10, 12, 21, 25, 31, 34, 35, 44, 45, 47, 48, 56, 65, 70, 79, 87, 91, 93, 94], "same": [3, 5, 6, 10, 12, 21, 29, 31, 96, 99, 100, 101], "structur": [3, 5, 79, 81, 85, 94, 95, 96, 105, 115], "see": [3, 5, 29, 31, 35, 39, 40, 67, 68, 69, 72, 73, 81, 82, 99, 100, 101, 115], "int": [3, 4, 5, 6, 10, 12, 18, 19, 21, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 44, 45, 46, 47, 48, 56, 57, 65, 67, 68, 69, 70, 79, 81, 82, 87, 99, 101, 106, 108], "maximum": [3, 5, 28, 31], "number": [3, 4, 5, 12, 26, 28, 29, 31, 32, 44, 45, 56, 57, 65, 75, 76, 87, 96, 100, 101], "option": [3, 5, 6, 8, 9, 10, 11, 12, 19, 21, 23, 26, 27, 29, 31, 32, 34, 35, 37, 38, 39, 40, 41, 44, 45, 46, 47, 48, 49, 52, 53, 54, 56, 57, 60, 61, 63, 65, 66, 67, 68, 71, 72, 73, 75, 78, 79, 81, 82, 87, 96, 101], "cross": [3, 4, 5, 44, 45, 47, 48, 96, 101], "valid": [3, 4, 5, 6, 27, 31, 44, 45, 47, 48, 65, 91, 96, 101, 119], "fold": [3, 5, 44, 45, 47, 48, 96, 101, 108], "If": [3, 5, 9, 10, 11, 12, 20, 21, 23, 27, 31, 35, 40, 41, 47, 48, 52, 53, 54, 63, 64, 66, 68, 72, 73, 81, 84, 98, 99, 101, 115], "perform": [3, 5, 12, 27, 31, 35, 39, 40, 46, 47, 48, 52, 54, 62, 63, 68, 69, 89, 96, 100, 101, 103], "callabl": [3, 4, 5, 6, 8, 20, 25, 27, 31, 48, 49, 56, 57, 65, 72, 73, 87], "metricsevalu": [3, 4, 5, 7, 8], "evalu": [3, 4, 5, 7, 27, 31, 47, 48, 52, 53, 96], "tupl": [3, 5, 6, 18, 25, 27, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 47, 48, 65, 87], "baseblock": [3, 5, 6, 9, 10, 11, 12, 14, 15, 16, 18, 20, 21, 23, 24, 26, 28, 29, 35, 39, 40, 41, 43, 44, 45, 46, 47, 48, 52, 53, 54, 56, 57, 62, 63, 65, 67, 68, 70, 72, 73, 75, 76, 79, 80, 81, 82, 84, 85, 89, 96, 99, 106], "ellipsi": [3, 5, 32, 34, 35, 37, 38, 56, 57, 65, 72, 73, 87], "random": [3, 5, 6, 9, 10, 12, 21, 25, 26, 27, 28, 29, 31, 34, 44, 45, 46, 47, 48, 65, 70, 72, 73, 79, 87, 94, 95, 96, 97, 99, 100, 101, 105], "state": [3, 4, 5, 26, 29, 44, 45, 46, 47, 48, 53, 54, 95], "abstract": [3, 4, 5, 6, 8, 10, 12, 14, 15, 21, 23, 34, 41, 46, 48, 49, 52, 53, 54, 56, 57, 66, 67, 68, 71, 73, 75, 80, 81, 88, 90], "properti": [3, 5, 6, 8, 9, 10, 12, 13, 20, 21, 23, 40, 41, 52, 54, 56, 57, 62, 66, 67, 68, 96], "n_step": [3, 5], "implement": [3, 5, 6, 9, 10, 11, 12, 13, 21, 23, 26, 28, 29, 31, 35, 40, 41, 45, 54, 56, 57, 60, 73, 75, 76, 77, 88, 90, 93, 96, 99, 100, 101, 102, 103], "pass": [3, 5, 9, 11, 12, 15, 16, 23, 27, 31, 35, 40, 45, 52, 65, 73, 86, 94, 100, 101, 103, 115], "make_step_lay": [3, 5], "rng": [3, 5, 6], "current": [3, 5, 31, 78, 79, 99, 100], "numpi": [3, 5, 6, 7, 9, 10, 12, 19, 21, 25, 28, 29, 32, 33, 34, 35, 39, 40, 44, 45, 48, 49, 50, 52, 54, 65, 70, 79, 87, 95, 96, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 115, 122, 123], "ndarrai": [3, 5, 7, 9, 19, 21, 25, 28, 31, 32, 33, 34, 35, 37, 38, 39, 40, 48, 49, 50, 52, 54, 61, 65, 99, 101, 106, 108], "target": [3, 5, 23, 24, 34, 35, 37, 38, 39, 44, 45, 54, 61, 94, 96, 104, 111, 114, 116], "basepipelinemodelvalid": [3, 5, 6, 8], "x_": [3, 5, 96, 123], "y_": [3, 5, 96, 123], "_make_base_df_block": 3, "param": [3, 13, 21, 23, 32, 41, 52], "layer_width": [3, 5, 96, 123], "dict": [3, 4, 5, 6, 12, 13, 15, 16, 23, 25, 26, 29, 41, 46, 47, 48, 49, 52, 54, 56, 57, 60, 61, 62, 63, 70, 75, 79, 81, 85, 96, 101, 108, 123], "One": [3, 100], "n_estim": [3, 5, 27, 28, 31, 94, 95, 97, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 122], "max_depth": [3, 5, 25, 27, 28, 31, 94, 97], "etc": [3, 31, 67, 68, 69, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 109, 110, 111, 113, 114, 115, 116, 122, 123], "classicaldeepforestconstructor": [3, 5, 96, 123], "rf_param": [3, 5, 6, 96, 123], "2": [3, 5, 25, 27, 28, 31, 35, 38, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 122, 123, 124], "classic": [3, 5, 48, 49, 100], "consist": [3, 5, 35, 40, 94, 105], "extrem": [3, 5, 27, 28, 31, 94, 97], "tree": [3, 5, 27, 28, 31, 94, 96, 97, 100, 101], "classifi": [3, 5, 26, 27, 28, 29, 31, 54, 61, 72, 73, 100, 116], "ensembl": [3, 5, 27, 31, 99, 104, 111], "extra": [3, 5, 31, 100], "layer_cl": [3, 5], "1": [3, 4, 5, 6, 7, 18, 19, 25, 27, 29, 31, 32, 35, 37, 39, 40, 43, 44, 45, 56, 57, 67, 68, 69, 91, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 122, 123], "ha": [3, 5, 9, 10, 11, 12, 13, 20, 21, 23, 31, 35, 40, 41, 44, 45, 64, 73, 96, 100], "just": [3, 5, 31, 52, 54, 63, 72, 73, 81, 85, 101], "hyperparamsearchdeepforestconstructor": [3, 5], "rf_param_grid": [3, 5], "3": [3, 5, 29, 31, 32, 35, 39, 40, 96, 98, 99, 100, 101, 103, 104, 106, 107, 108, 110, 111, 113, 114, 115, 116, 123, 124], "estim": [3, 5, 9, 24, 26, 28, 29, 31], "best": [3, 4, 5, 31, 43, 45, 102, 109], "grid": [3, 5], "mgsdeepforestconstructor": [3, 5], "input_shap": [3, 5, 6], "conv_param": [3, 5], "multi": [3, 5, 29, 34, 35, 37, 38, 39, 75, 76], "grain": [3, 5, 29, 34, 35, 37, 38, 39], "It": [3, 5, 6, 9, 10, 11, 12, 14, 15, 21, 23, 29, 31, 34, 35, 37, 38, 39, 40, 41, 46, 47, 48, 53, 54, 56, 57, 65, 72, 73, 74, 75, 76, 77, 78, 79, 81, 85, 87, 88, 90, 94, 96, 99, 101, 103, 104, 105, 116], "convolut": [3, 5, 29, 32, 35], "which": [3, 5, 10, 12, 13, 18, 20, 21, 23, 27, 31, 40, 50, 52, 54, 56, 57, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 79, 86, 88, 90, 94, 96, 98, 99, 100], "reduc": [3, 5, 31, 101], "spatial": [3, 5, 29, 32, 34, 35, 37, 38, 39], "dimens": [3, 5, 18, 29, 32, 34, 35, 37, 38, 39, 44, 45], "shape": [3, 5, 10, 12, 18, 20, 21, 29, 31, 32, 34, 35, 37, 38, 39, 40, 50, 54, 61, 65], "mg": [3, 5, 29, 35, 104], "stacking_layer_cl": [3, 5], "mgs_layer_cl": [3, 5], "two": [3, 5, 35, 38, 54, 61, 74, 79, 94, 96, 100, 101, 105], "determin": [4, 10, 12, 13, 23, 41, 45, 52, 53, 54, 66, 67, 68, 69], "builder": [4, 5, 14, 15, 65, 79, 91, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 122, 123], "how": [4, 100, 103], "trim": [4, 5], "after": [4, 6, 8, 71, 73, 93, 95, 96, 100, 105], "need_grow": [4, 5], "growing_st": [4, 5], "check": [4, 5, 32, 47, 48, 52, 54, 63, 64, 100], "need": [4, 5, 8, 10, 12, 13, 23, 46, 48, 52, 54, 56, 57, 63, 65, 86, 93, 98, 99, 100, 101, 103, 115, 116], "grown": [4, 5, 31], "further": [4, 5, 47, 48, 92, 102], "most": [4, 5, 96, 103, 110], "recent": [4, 5, 31], "result": [4, 5, 6, 7, 9, 11, 18, 29, 32, 33, 35, 46, 47, 48, 52, 53, 54, 56, 57, 61, 62, 65, 66, 67, 68, 72, 73, 87, 96, 100, 101, 108, 115], "store": [4, 5, 12, 27, 31, 52, 96, 99, 103, 110], "context": [4, 5, 31, 56, 57], "defaultgrowingstrategi": 4, "never": 4, "earlystoppingcv": [4, 5], "mode": [4, 5, 52, 93, 98, 99, 100], "patienc": [4, 5], "earli": [4, 5], "union": [4, 5, 9, 10, 12, 21, 29, 32, 34, 35, 39, 40, 44, 45, 46, 47, 48, 50, 52, 54, 63, 65, 70, 72, 73, 79, 87], "liter": [4, 5, 51, 72, 73], "ani": [4, 5, 7, 9, 12, 27, 28, 31, 34, 35, 37, 38, 44, 45, 52, 54, 75, 76, 77, 81, 82, 88, 90, 96, 98, 99], "when": [4, 5, 7, 9, 12, 27, 31, 41, 47, 48, 51, 53, 54], "wors": [4, 5], "than": [4, 5, 11, 13, 21, 23, 27, 31, 41, 54, 56, 57, 60, 63, 64, 73, 81, 84, 95, 99, 100, 103, 105], "epoch": [4, 5], "wait": [4, 5], "befor": [4, 5, 27, 31, 35, 53, 54, 63, 72, 73, 92, 93, 101], "last": [4, 5, 35, 40, 101], "count": [4, 5], "earlystoppingv": [4, 5], "make_metrics_ev": [4, 5], "early_stopping_param": [4, 5], "function": [4, 5, 19, 20, 31, 35, 40, 47, 48, 49, 54, 56, 57, 73, 79, 91, 93, 94, 95, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 122, 123], "automat": [5, 9, 10, 12, 23, 41, 94, 98, 115], "modul": [5, 15, 22, 48, 54, 90, 99, 101, 106, 108], "tabular": 5, "sequenc": [5, 6, 20, 35, 37, 39, 52, 53, 54, 56, 57, 60, 63, 66, 67, 68, 78, 79], "repres": [5, 54, 56, 57, 60, 63, 66, 67, 68, 79, 96], "criteria": [5, 31], "separ": [5, 11, 29, 54, 61, 73, 81, 85, 94, 102], "defin": [5, 10, 12, 13, 20, 21, 23, 27, 31, 40, 41, 46, 47, 48, 52, 72, 73, 79, 94, 95, 96, 100, 101, 105, 115], "deep_forest": [5, 65, 91, 96, 100, 102, 104, 107, 109, 111, 119, 123], "import": [5, 10, 12, 17, 21, 31, 75, 76, 77, 88, 90, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 122, 123], "topologicalexecutor": [5, 47, 48, 54, 63, 68, 69, 95, 96, 100, 101, 105, 107, 108, 112, 113, 115, 122, 123], "sklearn_interfac": [5, 54, 65, 91, 96, 114, 116, 119, 123], "boskpipelineclassifi": [5, 54, 61, 94, 96, 97, 114, 116, 123], "constructor": [5, 72, 73, 96, 123], "100": [5, 27, 28, 31, 99, 100, 101, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116], "lambda": [5, 20], "f1": [5, 24, 32], "rfcblock": [5, 27, 72, 73, 100, 101, 103, 107, 108, 110], "etcblock": [5, 27, 100, 101, 107], "12345": [5, 96, 123], "x_train": [5, 31, 54, 94, 96, 97, 114, 116, 123], "y_train": [5, 31, 54, 94, 96, 97, 114, 116, 123], "_classifier_init": [5, 26, 29, 54, 61, 96, 123], "label": [5, 19, 24, 26, 27, 28, 29, 31, 35, 95, 100, 101, 102, 103, 104, 107, 109, 110, 111, 113, 114, 115, 116, 122], "encod": 5, "abl": [5, 53, 54, 81, 85, 99], "predicted_label": 5, "x_test": [5, 31, 54, 94, 96, 97, 114, 116, 123], "calcul": [5, 7, 8, 10, 12, 18, 20, 21, 23, 24, 26, 28, 29, 35, 39, 40, 41, 43, 44, 45, 46, 48, 49, 52, 54, 56, 57, 60, 63, 68, 69, 95, 100, 102, 104, 107, 109, 111, 122], "aggreg": [5, 7, 35, 40], "specifi": [5, 7, 10, 11, 12, 18, 20, 21, 23, 31, 40, 41, 44, 45, 52, 54, 68, 69, 73, 100, 103, 116], "rule": [5, 7, 100], "higher": [5, 7, 31], "better": [5, 7], "e": [5, 6, 7, 9, 10, 12, 18, 20, 21, 23, 24, 26, 28, 29, 31, 35, 39, 40, 41, 43, 44, 45, 93, 96, 100, 103, 110], "origin": [5, 7, 31, 52, 101, 113, 115], "decreas": [5, 7, 31], "qualiti": [5, 7, 31, 48], "increas": [5, 7], "multipli": [5, 7], "defaultdict": [5, 7, 47, 48], "dictionari": [5, 7, 10, 12, 15, 16, 17, 20, 21, 27, 31, 40, 46, 48, 49, 52, 53, 54, 56, 57, 60, 62, 63, 72, 73, 85, 96, 100, 101, 103], "valu": [5, 7, 10, 12, 13, 18, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 34, 35, 37, 38, 39, 40, 41, 43, 44, 45, 52, 54, 56, 57, 60, 61, 63, 65, 75, 86, 87, 96, 100, 101, 103, 115], "append_ev": [5, 7], "y_true": [5, 7, 48, 49, 101, 108], "y_pred": [5, 7, 48, 49, 101, 108], "ground": [5, 7, 24, 26, 27, 28, 29], "truth": [5, 7, 24, 26, 27, 28, 29], "averag": [5, 7, 18, 31, 95, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 122], "metricsresult": [5, 6, 7], "layer_nam": 6, "forests_lay": 6, "helper": [6, 46, 54, 63, 75, 102], "provid": [6, 31, 52, 72, 73, 75, 81, 85, 94, 101, 115, 116], "standard": [6, 35, 75, 93], "wai": [6, 75, 79, 93, 96, 100, 103], "creat": [6, 11, 31, 47, 48, 64, 72, 73, 75, 91, 93, 95, 96, 98, 99, 100, 101, 103, 105, 115, 124], "inherit": [6, 75, 101], "calc_metr": [6, 8], "output": [6, 8, 10, 11, 12, 13, 31, 48, 49, 51, 52, 54, 56, 57, 60, 61, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 79, 80, 81, 82, 84, 85, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 122, 123], "fit_output": 6, "mgslayer": 6, "kwarg": [6, 24, 27, 28, 31, 54, 61, 72, 73], "mgsrflayer": 6, "kernel_s": [6, 29, 32, 33, 35, 39, 40], "4": [6, 25, 28, 31, 98, 99, 100, 101, 103, 104, 106, 107, 108, 110, 111, 113, 114, 115, 116, 124], "stride": [6, 29, 32, 33, 34, 35, 37, 38, 39, 40, 104, 111], "dilat": [6, 29, 32, 33, 35, 39, 40], "pad": [6, 29, 32, 35, 39, 40], "forestslay": 6, "make_block": 6, "cvpipelinemodelvalid": [6, 8], "embed": 6, "stackinglay": 6, "stacking_lay": 6, "__custom_cross_valid": 6, "_make_fitt": 6, "nativestackinglay": 6, "nativ": 6, "subset": [6, 43, 44, 45], "instead": [6, 27, 31, 81, 82], "direct": [6, 67, 68, 69, 100], "retrain": 6, "give": [6, 100], "reproduc": [6, 101], "guarante": [6, 10, 12, 23, 41], "chang": [6, 31, 47, 48, 52, 98, 101], "metrics_cl": 8, "dataset": [8, 31, 95, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 122], "method": [8, 9, 10, 11, 12, 20, 21, 23, 40, 46, 48, 49, 52, 53, 54, 56, 57, 60, 63, 64, 65, 66, 67, 68, 69, 73, 75, 76, 77, 86, 88, 90, 93, 96, 99, 100, 101, 103, 115, 116], "sklearn": [8, 24, 27, 31, 47, 48, 54, 61, 95, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 122], "model_select": [8, 31, 47, 48, 95, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 122], "basecrossvalid": [8, 47, 48, 101, 108], "need_refit": 8, "whether": [8, 31, 47, 48, 52, 54, 101], "refit": 8, "fitter": [8, 54, 96, 123], "proba": [8, 26, 28, 29, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 122, 123], "dumbpipelinemodelvalid": 8, "trainsetpipelinemodelvalid": 8, "fals": [8, 9, 12, 13, 21, 23, 25, 26, 27, 29, 31, 41, 47, 48, 65, 86, 99, 101, 106, 108], "convert": [9, 12, 13, 21, 23, 25, 41, 50, 52, 65, 79, 91, 99, 100, 119], "wrap": [9, 10, 12, 21, 46, 48, 52, 54, 65, 72, 73, 87, 94, 96, 116], "simpl": [9, 13, 21, 23, 41, 100, 101, 103, 116], "done": [9, 93], "decor": [9, 12, 65, 87, 99], "auto_block": [9, 12, 99, 106, 113, 115], "myfittransformclassblock": 9, "def": [9, 99, 100, 101, 102, 104, 106, 107, 108, 109, 111], "arg1": 9, "arg2": 9, "deriv": [9, 12, 52, 53, 96], "fittransformclass": 9, "protocol": [9, 81, 82], "multipl": [9, 11, 27, 29, 31, 35, 51, 73, 75, 76, 96], "argument": [9, 11, 24, 27, 31, 47, 48, 49, 53, 54, 72, 73, 99, 100, 101, 103, 115, 116], "arrai": [9, 18, 20, 21, 23, 27, 31, 32, 35, 40, 41, 43, 44, 45, 52, 54, 61, 96, 99, 100], "object": [9, 10, 12, 21, 27, 31, 52, 65, 87, 95, 100, 101, 105], "g": [9, 31, 93], "cpudata": [9, 21, 34, 50, 65, 101, 108], "_implicit_cl": [9, 12], "execution_prop": [9, 12, 13, 23, 41, 99, 106], "random_state_field": [9, 12, 99, 106], "auto_st": [9, 12], "convers": [9, 12, 76], "without": [9, 10, 12, 21, 72, 73, 98, 99], "bracket": [9, 12], "otherwis": [9, 10, 12, 21, 27, 31], "meta": [9, 10, 12, 18, 20, 21, 23, 24, 26, 28, 29, 31, 35, 39, 40, 41, 43, 44, 45, 65, 91, 96, 99, 106, 119, 123], "blockexecutionproperti": [9, 12, 13, 21, 23, 41, 99, 106], "custom": [9, 12, 51, 72, 73, 99, 103], "execut": [9, 10, 12, 13, 20, 21, 23, 40, 41, 46, 47, 48, 52, 53, 54, 56, 57, 60, 61, 62, 63, 65, 86, 87, 93, 94, 95, 96, 100, 101, 103, 105, 110], "field": [9, 12, 52], "correspond": [9, 11, 12, 35, 43, 45, 52, 54, 56, 57, 60, 63, 64, 68, 69, 73, 75, 76, 93, 94, 96, 100, 101, 103, 115], "seed": [9, 10, 12, 21, 34, 44, 45, 47, 48, 65, 70, 79, 87, 99, 100, 101], "doesn": [9, 12, 81, 84], "t": [9, 10, 12, 21, 53, 54, 56, 57, 68, 69, 72, 73, 81, 84, 99, 100, 101, 103, 115], "alreadi": [9, 12, 54, 56, 57], "set_random_st": [9, 10, 12, 21, 34, 44, 45, 46, 48, 70, 79, 95, 99, 100, 101, 102, 104, 106, 107, 108, 109, 111, 122], "won": [9, 12, 53, 54, 68, 69], "redefin": [9, 10, 12, 20, 21, 40, 101, 115], "__getstate__": [9, 12, 26, 29, 113, 115], "__setstate__": [9, 12, 26, 29, 113, 115], "These": [9, 12], "blockt": [10, 12, 21], "typevar": [10, 12, 56], "constrain": [10, 56], "itself": [10, 70, 79, 96], "slott": [10, 12], "slot": [10, 11, 12, 13, 46, 48, 51, 52, 54, 56, 57, 60, 63, 64, 65, 68, 69, 73, 74, 79, 85, 86, 96, 99, 100, 103, 107, 115, 116], "slotmetat": 10, "baseslot": [10, 12, 46, 48, 65, 85], "placehold": [10, 12, 65, 72, 73, 94, 96], "debug_info": [10, 12, 65], "debug": [10, 12, 22, 52, 65, 91, 94, 119], "info": [10, 12, 65], "baseslotmeta": [10, 12, 13, 23, 41, 65], "parent_block": [10, 12, 65], "__hash__": [10, 12, 65], "hash": [10, 12, 46, 54, 56, 57, 60, 63, 65, 101, 103, 108, 110], "__repr__": [10, 12, 21, 50, 65], "repr": [10, 12, 21, 65], "blockinputslot": [10, 11, 12, 23, 46, 48, 52, 54, 56, 57, 60, 63, 64, 67, 68, 70, 73, 74, 79, 85, 96, 123], "inform": [10, 12, 13, 18, 20, 21, 23, 40, 41, 44, 45, 54, 56, 57, 60, 72, 73, 81, 85, 93, 96, 100, 115], "process": [10, 12, 35, 37, 38, 39, 48, 49, 52, 54, 56, 57, 63, 75, 76, 77, 88, 90, 100, 101, 104], "match": [10, 12, 54, 56, 57, 60, 61], "inputslotmeta": [10, 12, 13, 23, 41, 96, 123], "blockoutputslot": [10, 11, 12, 21, 41, 46, 48, 54, 56, 57, 60, 63, 64, 67, 68, 70, 73, 74, 79, 85, 96, 123], "about": [10, 12, 72, 73, 81, 85, 96, 101], "outputslotmeta": [10, 12, 13, 23, 41, 96, 123], "blockgroup": [10, 12, 53, 54, 89], "group": [10, 12, 26, 29, 32, 53, 54, 65, 90, 91, 119], "assici": [10, 12], "practic": [10, 12], "belong": [10, 12, 53, 54, 93], "express": [10, 12, 13, 23, 41], "some": [10, 12, 20, 23, 31, 41, 45, 52, 53, 54, 63, 64, 70, 72, 73, 75, 76, 77, 79, 88, 90, 93, 94, 95, 96, 99, 100, 101, 103, 105, 116], "help": [10, 11, 12, 15, 16, 23, 27, 31, 41, 73, 94], "draw": [10, 12, 31, 66, 67, 68, 69, 100, 101, 102, 104, 116], "more": [10, 11, 12, 31, 54, 56, 57, 60, 63, 64, 73, 81, 84, 94, 95, 96, 98], "diagram": [10, 12], "add": [10, 12, 31, 32, 67, 68, 72, 73, 89, 100], "remov": [10, 12, 31, 54, 56, 57, 89], "blockslot": [10, 12, 20, 21, 40], "blockinputdata": [10, 12, 18, 20, 21, 23, 24, 26, 28, 29, 35, 39, 40, 41, 43, 45], "index": [10, 12, 21, 23, 35, 40, 41, 47, 48], "transformoutputdata": [10, 12, 18, 20, 21, 23, 24, 26, 28, 29, 35, 39, 40, 41, 43, 45], "blockoutputdata": [10, 12, 21, 52, 53, 54, 56, 57, 62], "parent": [10, 12, 14, 15, 20, 21, 40, 71, 73, 75, 76, 100], "everi": [10, 12, 14, 15, 20, 21, 40, 47, 48, 64, 71, 73, 96, 103, 116], "uniqu": [10, 12, 13, 20, 21, 31, 40, 96, 100], "instanc": [10, 12, 20, 21, 23, 27, 31, 40, 41, 54, 56, 57, 96, 99, 103, 115], "connect": [10, 12, 20, 21, 40, 52, 54, 56, 57, 60, 63, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 81, 85, 88, 90, 91, 95, 96, 100, 105, 107, 119], "between": [10, 12, 20, 21, 40, 48, 50, 52, 54, 63, 65, 67, 68, 69, 74, 78, 79, 81, 85, 96, 100, 113, 115, 116], "other": [10, 12, 20, 21, 40, 46, 48, 54, 63, 78, 79, 95, 96, 100, 101, 105, 115], "main": [10, 12, 20, 21, 35, 37, 38, 39, 40, 54, 63, 93, 121], "both": [10, 12, 20, 21, 31, 40, 53, 54, 94, 96, 100], "accept": [10, 12, 20, 21, 40, 44, 45, 48, 49, 70, 74, 76, 79, 93], "mai": [10, 12, 20, 21, 31, 40, 44, 45, 46, 48, 96, 101], "cannot": [10, 12, 20, 21, 40, 54, 56, 57, 98], "definit": [10, 12, 20, 21, 40], "dynamicblockmetastub": [10, 12, 13, 20, 21, 23, 40, 41], "stub": [10, 12, 13, 20, 21, 23, 40, 41], "initi": [10, 11, 12, 13, 20, 21, 23, 40, 41, 54, 72, 73, 99, 101], "blockmeta": [10, 12, 13, 18, 20, 21, 23, 41, 43, 44, 45, 96, 123], "dynam": [10, 12, 13, 18, 20, 21, 23, 40, 41, 44, 45, 65, 79, 91, 115, 119], "getter": [10, 12, 21, 52, 54, 56, 57], "children": [10, 12, 21, 25, 28], "must": [10, 12, 21, 27, 31, 46, 48, 93, 95, 98, 100, 103, 105], "stubblock": [10, 12, 21], "default_output": [10, 12, 21], "singl": [10, 12, 21, 23, 41, 51, 93], "overrid": [10, 12, 21, 52, 53, 54], "its": [10, 11, 12, 21, 41, 48, 54, 63, 67, 68, 69, 73, 96, 99, 101], "equal": [10, 12, 21, 31], "_make_slot": [10, 12, 21, 23, 41], "output_valu": [10, 12, 21, 54, 56, 57], "blockoutput": [10, 12, 21], "visitor": [10, 12, 21, 65, 70, 74, 75, 76, 77, 79, 91, 119], "basevisitor": [10, 12, 21, 70, 74, 75, 76, 77, 79, 88, 89, 90], "visit": [10, 12, 21, 70, 74, 75, 76, 77, 79, 88, 89, 90], "integ": [10, 12, 21, 44, 45, 65, 87], "get_default_output": [10, 12, 21], "baseinputblock": [10, 12, 23, 46, 48], "case": [10, 12, 13, 23, 35, 37, 38, 39, 41, 99, 100, 101], "get_single_input": [10, 12, 23], "baseoutputblock": [10, 12, 41], "doe": [10, 12, 31, 41, 53, 54, 75, 76], "get_single_output": [10, 12, 41], "functionalblockwrapp": [11, 72, 73], "output_nam": [11, 13, 21, 23, 41, 73], "wrapper": [11, 44, 45, 48, 49, 54, 61, 72, 73, 95, 96, 101, 105, 115], "anoth": [11, 73, 103], "style": [11, 23, 41, 46, 48, 67, 68, 73, 79, 93], "distinct": [11, 73], "assum": [11, 54, 56, 57, 72, 73], "test_block": [11, 72, 73], "out_1": [11, 73], "out_2": [11, 73], "get_output_slot": [11, 73], "runtimeexcept": [11, 73], "first_wrapp": [11, 73], "second_wrapp": [11, 73], "get_input_slot": [11, 73], "slot_nam": [11, 73], "omit": [11, 73], "rais": [11, 51, 52, 54, 63, 64, 73, 75, 76, 77, 88, 90, 103], "runtimeerror": [11, 73], "even": [11, 31, 52, 54, 73, 75, 76, 77, 88, 90, 95, 103], "concret": [11, 73], "obtain": [11, 15, 31, 46, 47, 48, 49, 52, 54, 65, 73, 87, 95, 96, 100, 101, 105], "__getitem__": [11, 73], "avoid": [11, 53, 54, 73, 94], "demanded_output_nam": [11, 73], "essenti": 12, "part": [12, 43, 45, 46, 48, 49, 93, 98, 101], "share": [12, 96], "But": [12, 96], "note": [12, 27, 31, 35, 40, 52, 81, 84], "alwai": [12, 31, 93, 96], "someth": [12, 96], "els": [12, 96], "avail": [12, 31, 35, 40, 66, 67, 68, 72, 73, 95, 96, 98], "found": [12, 31, 51, 72, 73, 95, 96, 101, 115], "zoo": [12, 15, 65, 72, 73, 91, 96, 99, 100, 101, 102, 104, 106, 107, 108, 109, 111, 119, 123], "repo": [12, 65, 72, 73, 91, 98, 119], "scope": [12, 15, 17, 65, 72, 73, 91, 119], "data_convers": [12, 22, 65, 72, 73, 91, 100, 107, 119], "data_weight": [12, 22, 65, 91, 102, 109, 119], "gpu_block": [12, 22, 65, 91, 119], "input_plug": [12, 22, 65, 91, 100, 107, 119], "multi_grained_scan": [12, 22, 65, 91, 104, 111, 119], "_convolution_help": [12, 22, 35, 91, 119], "_pooling_impl": [12, 22, 35, 91, 119], "mil": [12, 22, 35, 91, 119], "multi_grained_scanning_1d": [12, 22, 35, 91, 119], "multi_grained_scanning_2d": [12, 22, 35, 91, 119], "multi_grained_scanning_nd": [12, 22, 35, 91, 119], "pool": [12, 22, 29, 32, 35, 56, 57, 91, 119], "output_plug": [12, 22, 65, 91, 119], "preprocess": [12, 22, 65, 91, 119], "rout": [12, 22, 65, 91, 100, 119], "auto": [12, 31, 65, 72, 73, 91, 96, 99, 106, 119, 123], "descript": [12, 13, 23, 41, 96, 104], "static": [12, 13, 23, 41, 75, 100], "list_of_slots_meta_to_map": [12, 13, 23, 41], "slots_meta_list": [12, 13, 23, 41], "cpu": [13, 19, 21, 23, 35, 40, 41, 50, 53, 65, 87, 98, 99, 100, 101, 103, 106, 108, 110, 124], "handl": [13, 21, 23, 41, 46, 48, 52, 54, 101, 103], "gpu": [13, 21, 23, 28, 35, 40, 41, 50, 53, 65, 98, 99, 100, 106, 124], "threadsaf": [13, 21, 23, 41, 99, 106], "thread": [13, 21, 23, 26, 29, 41, 56, 57], "safe": [13, 21, 23, 41], "parallel": [13, 21, 23, 31, 41, 54, 65, 91, 99, 100, 106, 119], "plain": [13, 21, 23, 41, 54, 56, 57, 99, 106], "straightforward": [13, 21, 23, 41], "computantion": [13, 21, 23, 41], "expens": [13, 21, 23, 41], "cost": [13, 21, 23, 31, 41], "larger": [13, 21, 23, 41], "usual": [13, 23, 41, 100], "sometim": [13, 23, 41, 115], "time": [13, 23, 27, 31, 41, 47, 48, 54, 62, 65, 87, 101, 103, 108, 110, 115], "In": [13, 23, 35, 41, 54, 94, 96, 99, 100, 101, 103, 105], "make_simple_meta": [13, 21, 23, 41], "input_nam": [13, 18, 21, 23, 41, 43, 45], "additional_param": [13, 21, 23, 41], "addit": [13, 21, 23, 41, 52, 54, 61, 81, 85, 94, 101, 103], "baseblockclassrepositori": [14, 15, 16, 72, 73], "repositori": [14, 15, 16, 17, 72, 73, 93, 95], "demand": [14, 15, 16], "locat": [15, 93, 97, 100], "scopeblockclassrepositori": [15, 16, 17], "access": [15, 16, 54, 62, 72, 73], "global": [15, 16, 27, 31], "caller": [15, 16], "zooblockclassrepositori": [15, 17], "extract": [15, 17, 44, 45, 48, 54, 61, 75, 76], "default_block_class_repositori": 15, "ignore_import_error_packag": 17, "jax": [17, 21, 22, 25, 27, 30, 35, 40, 50, 65, 91, 99, 106, 119], "import_submodules_cont": 17, "submodul": 17, "sourc": [17, 31, 74, 79], "moduletyp": 17, "reshapeblock": 18, "new_shap": 18, "reshap": [18, 35, 105, 112], "bypass": [18, 20, 21, 23, 24, 41, 43, 44, 45, 75], "_input": [18, 20, 23, 24, 35, 40, 41], "flattenblock": 18, "flatten": [18, 35], "except": [18, 65, 91, 103, 110, 119], "first": [18, 31, 35, 44, 45, 48, 49, 54, 63, 96, 101], "concatblock": [18, 100, 107], "axi": [18, 35, 40, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 122, 123], "along": [18, 35, 40, 44, 45], "0": [18, 20, 27, 31, 43, 44, 45, 67, 68, 81, 82, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 122, 124], "stackblock": [18, 100, 101, 107, 108], "averageblock": [18, 100, 107], "argmaxblock": [18, 72, 73, 100, 107], "argmax": [18, 72, 73, 95, 100, 102, 103, 104, 107, 109, 110, 111, 113, 114, 115, 116, 122], "weightsblock": [19, 102, 109], "ord": [19, 102, 109], "devic": [19, 21, 26, 27, 29, 31, 99, 100, 101, 106, 108], "order": [19, 54, 63, 96, 101], "storag": [19, 81, 85, 98, 124], "_x": 19, "ignor": [19, 53, 54], "sampl": [19, 28, 29, 31, 32, 35, 54, 61, 102], "_weight": 19, "fitlambdablock": 20, "transformlambdablock": 20, "ad": [20, 31, 52, 99], "represent": [21, 50, 54, 56, 57, 60, 63, 65, 66, 67, 68, 69], "gpudata": [21, 50, 65], "to_cpu": [21, 50, 65, 101, 108], "transfer": [21, 50, 65, 99], "underli": [21, 34, 35, 37, 38, 44, 45, 50, 52, 65], "to_gpu": [21, 50, 65], "string": [21, 31, 50, 65, 93, 101, 121], "movetoblock": [21, 99, 106], "move": [21, 35, 40], "incorpor": 22, "librari": [22, 67, 68, 76], "_jax_util": [22, 27, 30, 91, 119], "fern": [22, 27, 29, 30, 91, 119], "mgs_fern": [22, 27, 30, 91, 119], "transform_on_fit": [23, 65, 86], "inputblock": [23, 100, 101, 107, 108], "default_input_nam": 23, "targetinputblock": [23, 100, 101, 107, 108], "default_target_nam": 23, "rocaucblock": [24, 100, 107], "roc": [24, 95, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 122], "auc": [24, 95, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 122], "roc_auc_scor": [24, 95, 100, 101, 102, 104, 107, 108, 109, 111, 122], "pred_proba": [24, 95, 99, 100, 102, 103, 104, 106, 107, 109, 110, 111, 113, 114, 115, 116, 122], "probabl": [24, 26, 27, 28, 29, 31, 52, 94, 113, 115, 116], "gt_y": [24, 95, 99, 100, 102, 103, 104, 106, 107, 109, 110, 111, 113, 114, 115, 116, 122], "score": [24, 25, 31, 48, 49, 100], "rocaucmultilabelblock": 24, "multilabel": 24, "accuracyblock": 24, "accuraci": [24, 25, 31, 101, 108], "pred": [24, 99, 101, 106, 108, 114, 116], "f1scoreblock": 24, "f1_score": 24, "r2scoreblock": 24, "r2": 24, "r2_score": 24, "variabl": [24, 34, 35, 37, 38, 39, 44, 45, 94, 96], "row_to_nan": 25, "mask": [25, 43, 45, 102, 109], "whole": [25, 31, 53, 54, 75, 76, 77, 80, 81, 84, 88, 90], "row": 25, "nan": 25, "split_point": 25, "max_split": [25, 28], "point": [25, 31, 32], "split_mask": 25, "col": 25, "compute_score_gener": 25, "x_col": 25, "split_valu": 25, "score_fn": 25, "make_scoring_funct": 25, "split_node_generic_random": 25, "compute_all_scor": 25, "split_node_gener": 25, "make_split_node_funct": 25, "treenod": 25, "jnp": [25, 35, 40, 50], "split_col": 25, "is_leaf": 25, "leaf_valu": 25, "tree_flatten": [25, 28], "classmethod": [25, 28], "tree_unflatten": [25, 28], "aux_data": [25, 28], "decisiontre": 25, "n_class": [25, 28], "min_sampl": [25, 28], "loss_fn": [25, 99, 101, 106, 108], "value_fn": 25, "node": [25, 31, 52, 54, 63, 67, 68, 69, 70, 75, 76, 78, 79, 96, 99, 100, 107], "extratre": 25, "decisiontreeclassifi": 25, "25": [25, 28], "extratreeclassifi": 25, "predict_proba": [25, 54, 61, 101, 108], "entropi": 25, "most_frequ": 25, "y_hat": 25, "randomfernsblock": 26, "n_group": [26, 29, 35, 40], "n_ferns_in_group": [26, 29], "20": [26, 29, 95, 101, 108, 114, 116, 122], "fern_siz": [26, 29], "7": [26, 29, 100, 101, 102, 103, 104, 107, 108, 109, 110, 111], "kind": [26, 29], "unari": [26, 29], "bootstrap": [26, 27, 29, 31], "n_job": [26, 27, 29, 31], "like": [26, 27, 29, 31, 35, 37, 38, 39, 54, 61, 62, 96, 116], "binari": [26, 27, 29, 101], "_parallel_calc_bucket_stat": [26, 29], "bucket_indic": [26, 29], "group_data_indic": [26, 29], "_make_fern": [26, 29], "prng_kei": [26, 29], "_apply_fern": [26, 29], "agnost": [26, 29], "_predict_proba": [26, 29], "gini": [27, 31], "min_samples_split": [27, 31], "min_samples_leaf": [27, 31], "min_weight_fraction_leaf": [27, 31], "max_featur": [27, 31], "sqrt": [27, 31], "max_leaf_nod": [27, 31], "min_impurity_decreas": [27, 31], "oob_scor": [27, 31], "verbos": [27, 31, 101, 105, 108, 112], "warm_start": [27, 31], "class_weight": [27, 31], "ccp_alpha": [27, 31], "max_sampl": [27, 31], "randomforestclassifi": [27, 31, 104, 111], "extratreesclassifi": [27, 31, 104, 111], "catboostclassifierblock": 27, "learning_r": [27, 31], "depth": [27, 28, 31], "l2_leaf_reg": [27, 31], "model_size_reg": [27, 31], "rsm": [27, 31], "loss_funct": [27, 31], "border_count": [27, 31], "feature_border_typ": [27, 31], "per_float_feature_quant": [27, 31], "input_bord": [27, 31], "output_bord": [27, 31], "fold_permutation_block": [27, 31], "od_pval": [27, 31], "od_wait": [27, 31], "od_typ": [27, 31], "nan_mod": [27, 31], "counter_calc_method": [27, 31], "leaf_estimation_iter": [27, 31], "leaf_estimation_method": [27, 31], "thread_count": [27, 31], "random_se": [27, 31, 101, 108], "use_best_model": [27, 31], "best_model_min_tre": [27, 31], "silent": [27, 31], "logging_level": [27, 31], "metric_period": [27, 31], "ctr_leaf_count_limit": [27, 31], "store_all_simple_ctr": [27, 31], "max_ctr_complex": [27, 31], "has_tim": [27, 31], "allow_const_label": [27, 31], "target_bord": [27, 31], "classes_count": [27, 31], "auto_class_weight": 27, "class_nam": [27, 31, 114, 116], "one_hot_max_s": [27, 31], "random_strength": [27, 31], "ignored_featur": [27, 31], "train_dir": [27, 31], "custom_loss": 27, "custom_metr": [27, 31], "eval_metr": [27, 31], "bagging_temperatur": [27, 31], "save_snapshot": [27, 31], "snapshot_fil": [27, 31], "snapshot_interv": [27, 31], "fold_len_multipli": [27, 31], "used_ram_limit": [27, 31], "gpu_ram_part": [27, 31], "pinned_memory_s": [27, 31], "allow_writing_fil": [27, 31], "final_ctr_computation_mod": [27, 31], "approx_on_full_histori": [27, 31], "boosting_typ": [27, 31], "simple_ctr": [27, 31], "combinations_ctr": [27, 31], "per_feature_ctr": [27, 31], "ctr_descript": [27, 31], "ctr_target_border_count": [27, 31], "task_typ": [27, 31], "device_config": [27, 31], "bootstrap_typ": [27, 31], "subsampl": [27, 31, 43, 45], "mvs_reg": [27, 31], "sampling_unit": [27, 31], "sampling_frequ": [27, 31], "dev_score_calc_obj_block_s": [27, 31], "dev_efb_max_bucket": [27, 31], "sparse_features_conflict_fract": [27, 31], "num_boost_round": [27, 31], "num_tre": [27, 31, 105, 112], "colsample_bylevel": [27, 31], "reg_lambda": [27, 31], "eta": [27, 31], "max_bin": [27, 31], "scale_pos_weight": 27, "gpu_cat_features_storag": [27, 31], "data_partit": [27, 31], "metadata": [27, 31], "early_stopping_round": [27, 31], "cat_featur": [27, 31], "grow_polici": [27, 31], "min_data_in_leaf": [27, 31], "min_child_sampl": [27, 31], "max_leav": [27, 31], "num_leav": [27, 31], "score_funct": [27, 31], "leaf_estimation_backtrack": [27, 31], "ctr_history_unit": [27, 31], "monotone_constraint": [27, 31], "feature_weight": [27, 31], "penalties_coeffici": [27, 31], "first_feature_use_penalti": [27, 31], "per_object_feature_penalti": [27, 31], "model_shrink_r": [27, 31], "model_shrink_mod": [27, 31], "langevin": [27, 31], "diffusion_temperatur": [27, 31], "posterior_sampl": [27, 31], "boost_from_averag": [27, 31], "text_featur": [27, 31], "token": [27, 31], "feature_calc": [27, 31], "text_process": [27, 31], "embedding_featur": [27, 31], "callback": [27, 31], "eval_fract": [27, 31], "catboost": [27, 31, 101, 108], "catboostclassifi": [27, 31, 101, 108], "xgbclassifierblock": 27, "logist": 27, "use_label_encod": 27, "xgboost": [27, 31], "xgbclassifi": 27, "gradient": [27, 31], "boost": [27, 31], "caus": [27, 31], "re": [27, 31], "scratch": [27, 31], "resum": [27, 31], "checkpoint": [27, 31], "explicitli": [27, 31], "xgb_model": [27, 31], "matrix": [27, 31, 114, 116], "sample_weight": [27, 31, 54, 61, 102, 109], "base_margin": [27, 31], "bia": [27, 31], "eval_set": [27, 31], "pair": [27, 31], "u": [27, 31, 101], "track": [27, 31], "deprec": [27, 31], "sinc": [27, 31, 75, 76, 96, 102], "version": [27, 31, 54, 61, 93, 97, 98], "6": [27, 31, 100, 101, 103, 107, 108, 110], "__init__": [27, 31, 72, 73, 99, 101, 106, 108], "set_param": [27, 31], "write": [27, 31, 93, 94, 101], "measur": [27, 31, 54, 62, 103], "stderr": [27, 31], "file": [27, 31, 63, 66, 68, 80, 81, 82, 84, 85, 93, 95, 115], "booster": [27, 31], "load": [27, 31, 80, 81, 82, 84, 85, 113, 115], "continu": [27, 31], "sample_weight_eval_set": [27, 31], "form": [27, 31], "l_1": [27, 31], "l_2": [27, 31], "l_n": [27, 31], "l_i": [27, 31], "th": [27, 31], "base_margin_eval_set": [27, 31], "m_1": [27, 31], "m_2": [27, 31], "m_n": [27, 31], "m_i": [27, 31], "margin": [27, 31], "being": [27, 31], "select": [27, 31], "colsampl": [27, 31], "greater": [27, 31], "valueerror": [27, 31, 51], "thrown": [27, 31], "_sklobject": [27, 31], "rfcgblock": 28, "minimum": [28, 31], "etcgblock": 28, "mgsrandomfernsblock": 29, "across": [29, 100, 101], "patch": [29, 35], "kernel": [29, 32, 35, 39, 40], "size": [29, 31, 32, 34, 35, 37, 38, 39, 40, 44, 45], "disabl": [29, 35, 39, 40], "pooling_indices_": 29, "_get_flattened_window_s": 29, "__prepare_pooling_indic": [29, 35, 39, 40], "xs_shape": [29, 32, 35, 39, 40], "rfrblock": 31, "squared_error": 31, "randomforestregressor": 31, "regressor": [31, 54, 61, 105], "sub": 31, "control": [31, 93], "over": [31, 98], "user": [31, 52, 54, 63, 95, 98, 99, 100], "22": 31, "absolute_error": 31, "poisson": 31, "support": [31, 35, 75, 76, 90, 94, 98], "mean": [31, 35, 40, 68, 69, 72, 73, 101, 103], "squar": 31, "error": [31, 94], "varianc": 31, "reduct": 31, "absolut": 31, "devianc": 31, "significantli": [31, 48], "slower": 31, "18": [31, 102, 109], "mae": 31, "mse": [31, 105, 112], "v1": 31, "equival": 31, "expand": 31, "until": 31, "leav": 31, "pure": 31, "less": 31, "intern": [31, 52, 54, 63, 66, 67, 68, 69], "fraction": 31, "ceil": 31, "n_sampl": [31, 32, 34, 35, 37, 38, 39, 40, 54, 61, 105, 112], "leaf": 31, "least": [31, 53, 54], "left": 31, "right": [31, 103], "branch": [31, 93], "effect": 31, "smooth": 31, "especi": 31, "sum": [31, 35, 40, 113, 115], "total": [31, 99, 100, 106], "log2": 31, "look": [31, 94, 100], "round": [31, 99, 103, 106, 110], "n_featur": [31, 35, 54, 61], "bag": 31, "achiev": 31, "smaller": 31, "search": [31, 54, 63], "partit": 31, "inspect": 31, "fashion": 31, "rel": 31, "impur": 31, "unlimit": 31, "induc": 31, "equat": 31, "n_t": 31, "n_t_r": 31, "right_impur": 31, "n_t_l": 31, "left_impur": 31, "child": [31, 52], "refer": [31, 94, 95], "19": 31, "out": [31, 41, 101, 102, 103], "job": 31, "run": [31, 93, 95, 98, 100, 101, 102, 103, 104, 109], "decision_path": 31, "unless": 31, "joblib": [31, 56, 57, 65, 79, 81, 84, 91, 101, 108, 113, 115, 119], "parallel_backend": 31, "processor": 31, "glossari": 31, "detail": [31, 96, 101], "randomst": 31, "reus": 31, "solut": 31, "non": [31, 65, 87, 101], "neg": [31, 65, 87], "complex": [31, 96, 103, 110], "minim": 31, "prune": 31, "subtre": 31, "largest": 31, "chosen": [31, 54, 63, 101], "By": [31, 116], "minimal_cost_complexity_prun": 31, "thu": [31, 100, 103, 116], "interv": 31, "base_estimator_": 31, "templat": 31, "decisiontreeregressor": 31, "estimators_": 31, "feature_importances_": 31, "normal": [31, 114, 116], "brought": [31, 99], "also": [31, 35, 40, 54, 63, 96, 99, 100, 101, 102], "known": 31, "warn": [31, 47, 48], "mislead": 31, "high": 31, "cardin": 31, "mani": [31, 64], "permutation_import": 31, "n_features_": 31, "attribut": [31, 93, 103], "n_features_in_": 31, "seen": 31, "dure": [31, 52, 54, 68, 69, 100, 101, 103], "24": 31, "feature_names_in_": 31, "n_outputs_": 31, "oob_score_": 31, "exist": 31, "oob_prediction_": 31, "n_output": [31, 34, 35, 37, 38, 39, 54, 61], "extratreesregressor": 31, "lead": 31, "fulli": [31, 94, 96], "unprun": 31, "potenti": [31, 54, 56, 57], "veri": 31, "larg": [31, 102], "memori": 31, "consumpt": 31, "those": [31, 98, 100, 101, 103, 115], "randomli": 31, "permut": 31, "therefor": [31, 101, 103], "vari": 31, "ident": [31, 101], "sever": [31, 93, 100, 101], "enumer": [31, 75, 76], "determinist": 31, "behaviour": [31, 52, 54, 63, 66, 67, 68, 99, 103], "fix": [31, 93], "rather": 31, "latter": 31, "suggest": [31, 100], "wherea": 31, "former": 31, "justifi": 31, "empir": 31, "breiman": 31, "machin": [31, 95], "45": 31, "32": [31, 65, 87], "2001": 31, "geurt": 31, "d": 31, "ernst": 31, "wehenkel": 31, "63": 31, "42": [31, 95, 100, 101, 102, 104, 105, 107, 108, 109, 111, 112, 114, 116, 122], "2006": 31, "make_regress": 31, "n_inform": 31, "shuffl": [31, 101, 108], "regr": 31, "print": [31, 95, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 122], "8": [31, 100, 101, 104, 107, 108, 111], "32987858": 31, "etrblock": 31, "extratreeregressor": 31, "optim": [31, 46, 47, 48, 54, 63, 68, 69, 99, 101, 106, 108], "load_diabet": 31, "train_test_split": [31, 95, 99, 100, 102, 104, 105, 106, 107, 109, 111, 112, 113, 114, 115, 116, 122], "return_x_i": 31, "y_test": [31, 114, 116], "reg": 31, "2727": 31, "catboostregressorblock": 31, "rmse": 31, "catboostregressor": [31, 105, 112], "quantil": 31, "alpha": 31, "loglinquantil": 31, "mape": 31, "lq": 31, "survivalaft": 31, "dist": 31, "scale": 31, "xgbcregressorblock": 31, "squarederror": 31, "xgbregressor": 31, "level": [31, 67, 68, 69, 81, 82], "explicit": 31, "keyword": [31, 47, 48, 72, 73], "arg": [31, 52, 72, 73], "_poolingindic": 32, "namedtupl": 32, "full_index_tupl": 32, "indic": [32, 44, 45, 100], "pixel": 32, "corner": 32, "posit": [32, 101], "n_corner": 32, "n_kernel_point": [32, 35, 40], "insid": [32, 99, 101], "pooled_shap": 32, "exclud": [32, 101], "_convolutionparam": 32, "chunk_siz": [32, 35, 39, 40], "_convolutionhelp": 32, "check_strid": 32, "spatial_dim": 32, "correct": [32, 54, 56, 57, 60, 63], "get_pooled_shap": 32, "prepare_corn": 32, "prepar": [32, 53, 54, 56, 57], "slide": [32, 34, 35, 37, 38], "window": [32, 34, 35, 37, 38, 98, 124], "id": [32, 103, 110], "check_kernel_s": 32, "n_spatial_dim": 32, "prepare_kernel": 32, "symmetr": 32, "edg": [32, 52, 67, 68, 69, 70, 79, 81, 85, 100], "prepare_pooling_indic": 32, "slice": [32, 35, 39], "pooling_indic": 32, "cut": [32, 101], "piec": 32, "dimension": [32, 35, 37, 38, 39, 40], "fk": 32, "channel": 32, "_njit_max_pooling_1d": 33, "_njit_mean_pooling_1d": 33, "_njit_max_pooling_2d": 33, "_njit_mean_pooling_2d": 33, "multigrainedscanningblock": [34, 35, 37, 38], "window_s": [34, 35, 37, 38, 104, 111], "shape_sampl": [34, 35, 37, 38, 104, 111], "take": [34, 35, 37, 38, 39, 40, 48, 49, 72, 73, 93], "n_channel": [34, 35, 37, 38, 39, 40], "tensor": [34, 35, 37, 38, 39, 40, 99, 101, 106, 108], "n_out_channel": [34, 35, 37, 38, 39, 40], "_window_slicing_fit": 34, "_window_slicing_data": [34, 35, 37, 38], "np": [34, 35, 37, 38, 99, 100, 101, 102, 104, 106, 107, 108, 109, 111, 113, 115], "_window_slicing_predict": 34, "repeat": 35, "special": [35, 54, 96], "linear": [35, 99, 101, 106, 108], "There": [35, 79, 93, 96], "multigrainedscanningndblock": [35, 39], "poolingblock": [35, 40], "convent": 35, "spatial_dim_1": 35, "spatial_dim_k": 35, "out_spatial_dim_1": 35, "out_spatial_dim_k": 35, "contrast": [35, 94], "multigrainedscanning1dblock": [35, 37], "multigrainedscanning2dblock": [35, 38, 104, 111], "ravel": 35, "n_out_featur": 35, "wider": 35, "rang": [35, 99, 101, 106, 108], "while": [35, 51], "second": [35, 48, 49, 96], "simpler": 35, "do": [35, 52, 81, 84, 93, 99, 100, 101, 115], "n_features_1": [35, 39, 40], "n_features_k": [35, 39, 40], "t_1": [35, 39, 40], "t_k": [35, 39, 40], "chunk": [35, 39, 40], "affect": [35, 39, 40], "out_n_features_1": [35, 39, 40], "out_n_features_k": [35, 39, 40], "_model_transform": [35, 39], "max": [35, 40], "impl_typ": [35, 40], "downsampl": [35, 40], "oper": [35, 40, 100], "min": [35, 40], "njit": [35, 40], "impl": [35, 40], "__aggreg": [35, 40], "grouped_data": [35, 40], "__index_based_chunk_pool": [35, 40], "__njit_based_chunk_pool": [35, 40], "__jax_based_pool": [35, 40], "__chunk_pool": [35, 40], "element": [35, 40], "kei": [35, 40, 54, 56, 57, 60, 61, 63, 99, 100, 101, 103, 106, 110], "aggregation_funct": 40, "globalaveragepoolingblock": 40, "_check_dim": 40, "outputblock": 41, "mark": [41, 46, 48, 99, 100, 101], "default_output_nam": 41, "csblock": [43, 45], "ep": [43, 45, 102, 109], "threshold": [43, 45], "rest": [43, 45], "csfilterblock": [43, 45], "filter": [43, 45, 54, 56, 57, 102], "csjoinblock": [43, 45], "join": [43, 45, 102], "merg": [43, 45], "refin": [43, 45, 102, 109], "cvtrainindicesblock": [44, 45], "subsettrainwrapperblock": [44, 45], "arbitrari": [44, 45, 96], "trainin_indic": [44, 45], "training_indic": [44, 45], "training_indices_nam": [44, 45], "_exclude_training_indic": [44, 45], "stace": 45, "independ": 45, "baseforeignmodel": [46, 47, 48, 101, 108], "adapt": [46, 48, 101, 116], "outsid": [46, 48, 101], "sure": [46, 48, 93, 98], "transmiss": [46, 48], "get_block_md5_hash": 46, "cach": 46, "them": [46, 48, 52, 54, 56, 57, 63, 70, 76, 79, 93, 96, 100, 101], "basecompar": [46, 47, 48, 101, 108], "foreign_model": [46, 47, 48, 101, 108], "f_optimize_pipelin": [46, 47, 48, 101, 108], "via": [46, 48, 101], "common": [46, 48, 94, 101, 115], "onc": [46, 48, 93, 101], "retreiv": [46, 48], "begin": [46, 48, 54, 63], "_get_aj_list": [46, 48], "_compare_blocks_conn": [46, 48], "block_1": [46, 48, 101, 108], "block_2": [46, 48, 101, 108], "aj_list_1": [46, 48], "aj_list_2": [46, 48], "conns_iso_1": [46, 48], "conns_iso_2": [46, 48], "_set_random_st": [46, 48], "_set_manual_st": [46, 48], "_get_common_input": [46, 48], "_find_next_block": [46, 48], "cur_block": [46, 48], "leading_conn_map": [46, 48], "conn_maps_list": [46, 48], "queue_list": [46, 48], "leading_slots_iso": [46, 48], "slots_iso_list": [46, 48], "_add_common_block": [46, 48], "pipelines_block": [46, 48], "conn_map_list": [46, 48], "iso_blocks_list": [46, 48], "iso_slots_list": [46, 48], "common_block": [46, 48], "common_conn_map": [46, 48], "mutablemap": [46, 48], "_continue_bf": [46, 48], "continue_block": [46, 48], "conn_maps_block": [46, 48], "_get_input_plug": [46, 48], "_splice_pipelin": [46, 48], "conns_to_append": [46, 48], "conns_to_remov": [46, 48], "inp_slot_pip": [46, 48], "common_output": [46, 47, 48], "out_slot_cp": [46, 48], "extra_input": [46, 48], "extra_block": [46, 48], "_get_common_input_dict": [46, 48], "common_inp_nam": [46, 48], "inp_dict_pip": [46, 48], "slots_iso": [46, 48], "get_scor": [46, 47, 48, 49, 101, 108], "basemetr": [46, 47, 48, 49], "panda": [46, 47, 48, 101, 108], "datafram": [46, 47, 48, 101, 108], "cvcompar": [47, 48, 101, 108], "cv_strat": [47, 48, 101, 108], "exec_cl": [47, 48, 100, 102, 104, 107, 109, 111], "exec_kw": [47, 48], "get_blocks_tim": [47, 48, 101, 108], "suppress_exec_warn": [47, 48], "compar": [47, 48, 101, 104, 108, 115], "your": [47, 48, 93, 99, 101, 103, 115], "own": [47, 48, 99, 101, 103], "taken": [47, 48], "predefin": [47, 48, 96, 100], "foreign": [47, 48, 101], "timerblockexecutor": [47, 48, 54, 62, 103, 110], "suppress": [47, 48], "tu": [47, 48], "propag": [47, 48], "_write_metrics_info_to_dict": [47, 48], "df_dict": [47, 48], "train_data_dict": [47, 48], "train_pred_dict": [47, 48], "test_data_dict": [47, 48], "test_pred_dict": [47, 48], "metrics_nam": [47, 48], "_get_copy_pipelin": [47, 48], "pip_num": [47, 48], "_get_times_dict": [47, 48], "common_tim": [47, 48], "pip_tim": [47, 48], "common_part_iso": [47, 48], "copy_iso": [47, 48], "_get_pers_inp_dict": [47, 48], "input_dict": [47, 48], "_get_metrics_nam": [47, 48], "_write_preambl": [47, 48], "model_nam": [47, 48], "fold_num": [47, 48], "third": [48, 76, 96], "parti": [48, 76], "besid": 48, "precomput": 48, "speed": 48, "up": [48, 52, 103], "cross_val": [48, 65, 91, 101, 108, 119], "data_tru": [48, 49], "data_pr": [48, 49], "metricwrapp": [48, 49, 101, 108], "func": [48, 49, 56, 57, 65, 87], "y_true_nam": [48, 49], "y_pred_nam": [48, 49], "nodefaultblockoutputerror": 51, "request": 51, "multipleblockslotserror": 51, "multipleblockinputserror": 51, "multipleblockoutputserror": 51, "baseslothandl": [52, 54, 56, 57, 60, 63, 103, 110], "polici": [52, 54, 103], "is_slot_requir": [52, 54], "graph": [52, 54, 63, 66, 67, 68, 69, 70, 75, 76, 77, 79, 94, 95, 96, 99, 100, 103, 105], "defaultslothandl": [52, 54], "preced": [52, 54, 65, 86], "executionresult": 52, "behav": [52, 100], "rational": 52, "frequent": 52, "expect": [52, 116], "slot_handl": [52, 54, 56, 57, 60, 63, 103, 110], "block_executor": [52, 54, 56, 57, 60, 63, 103, 110], "__": 52, "predix": 52, "__pipelin": [52, 54, 56, 57, 60, 63], "preserv": 52, "baseblockexecutor": [52, 53, 54, 56, 57, 60, 62, 63, 103, 110], "hard": [52, 103], "keep": 52, "frozenset": [52, 54, 56, 57], "_prepare_slot_handl": [52, 54, 56, 57, 60, 63], "_prepare_block_executor": [52, 54, 56, 57, 60, 63], "assertionerror": [52, 54, 63, 64, 103, 110], "unabl": 52, "restrict": [52, 54, 56, 57], "ouput": [52, 54, 56, 57], "handler": 52, "__slot_handl": [52, 54, 56, 57, 60, 63], "__block_executor": [52, 54, 56, 57, 60, 63], "__stage": [52, 54, 56, 57, 60, 63], "__input": [52, 54, 56, 57, 60, 63], "__output": [52, 54, 56, 57, 60, 63], "__process_inputs_output": 52, "_map_input_names_to_slot": 52, "input_valu": [52, 54, 56, 57, 60, 63], "translat": 52, "__call__": [52, 75, 76, 77], "remap": 52, "_check_input_valu": 52, "_is_slot_requir": 52, "polymorph": 52, "code": [52, 94, 96, 99], "shorter": 52, "_execute_block": 52, "block_input_map": [52, 53, 54, 62], "inputslottodatamap": [52, 53, 54, 62], "execute_block": [53, 54, 62], "defaultblockexecutor": [53, 54, 62], "gpublockexecutor": 53, "tri": 53, "possibl": [53, 100], "cpublockexecutor": 53, "fitblacklistblockexecutor": [53, 54], "ignore_block": [53, 54], "ignore_group": [53, 54], "black": [53, 54, 67, 68, 69], "manual": [53, 54, 79, 93, 94, 96, 98], "act": [54, 96], "usag": [54, 94, 96], "make_pipelin": [54, 96, 123], "somehow": [54, 56, 57, 96], "predictor": [54, 96, 100, 123], "dask": [54, 57, 65, 76, 79, 91, 119], "greedi": [54, 57, 65, 91, 99, 106, 119], "networkx": [54, 57, 65, 76, 77, 91, 119], "topsort": [54, 57, 65, 91, 119], "recurs": [54, 56, 57, 63, 65, 91, 100, 102, 103, 104, 107, 109, 110, 111, 119], "timer": [54, 65, 91, 103, 110, 119], "topolog": [54, 65, 68, 91, 95, 101, 105, 108, 112, 113, 115, 119, 122], "util": [54, 65, 91, 93, 99, 101, 106, 108, 119], "addition": [54, 62, 93], "blocks_tim": [54, 62, 103, 110], "block_tim": [54, 62], "baseboskpipelinewrapp": [54, 61, 114, 116], "inputs_map": [54, 61], "outputs_map": [54, 61, 114, 116], "default_executor": [54, 61], "baseestim": [54, 61], "__map_var": [54, 61], "_prepare_executor": [54, 61], "_predict_al": [54, 61], "_extract": [54, 61], "classifiermixin": [54, 61], "boskpipelineregressor": [54, 61], "regressormixin": [54, 61], "boskpipelinetransform": [54, 61], "transformermixin": [54, 61], "fit_transform": [54, 61], "fit_param": [54, 61], "unsupervis": [54, 61], "x_new": [54, 61], "n_features_new": [54, 61], "recursiveexecutor": [54, 60, 94, 96, 97, 100, 102, 103, 104, 107, 109, 110, 111, 123], "_conn_map": [54, 56, 57, 60], "ones": [54, 56, 57, 60, 63, 68, 69, 100, 102, 103], "algoritm": [54, 63], "_conn_dict": [54, 63], "_df": [54, 63], "aj_list": [54, 63], "begin_nod": [54, 63], "written": [54, 63, 93, 101], "adjac": [54, 63], "start": [54, 63, 92, 94, 101], "were": [54, 63, 68, 69, 101], "includ": [54, 63, 93, 99], "travers": [54, 63, 103], "actual": [54, 63, 98], "save": [54, 63, 66, 67, 68, 115], "_topological_sort": [54, 63], "sort": [54, 63], "work": [54, 63, 93, 99], "_get_backward_aj_list": [54, 63], "feasible_set": [54, 63], "backward": [54, 63, 99, 101, 103, 106, 108], "end": [54, 63, 100], "feasibl": [54, 63], "_get_forward_aj_list": [54, 63], "corespond": [54, 63], "incompat": [54, 63, 99], "greedyparallelexecutor": [54, 56, 57, 99, 100, 106, 107], "parallel_engin": [54, 56, 57], "multiprocessingparallelengin": [54, 56, 57], "parallelengin": [54, 56, 57], "_prepare_out_to_in_edg": [54, 56, 57], "_get_block": [54, 56, 57], "output_slot": [54, 56, 57, 67, 68, 75, 76], "_prepare_inputs_by_block": [54, 56, 57], "_prepare_input": [54, 56, 57], "input_slot_valu": [54, 56, 57], "_compute_all_plain": [54, 56, 57], "computed_valu": [54, 56, 57], "computation": [54, 56, 57], "effortless": [54, 56, 57], "necessarili": [54, 56, 57], "_compute_all_parallel": [54, 56, 57], "_compute_all_non_threadsaf": [54, 56, 57], "outslottodata": [54, 56, 57], "_clean_unnecessary_data": [54, 56, 57], "remaining_block": [54, 56, 57], "intermedi": [54, 56, 57], "futur": [54, 56, 57], "_find_ready_block": [54, 56, 57], "haven": [54, 56, 57], "been": [54, 56, 57], "yet": [54, 56, 57], "readi": [54, 56, 57, 94, 98, 101], "__append_output": [54, 56, 57], "new_output": [54, 56, 57], "newli": [54, 56, 57, 115], "final": [54, 56, 57, 94, 96, 100], "modifi": [54, 56, 57, 89], "__execute_with_parallel": [54, 56, 57], "engin": [54, 56, 57], "resultt": [56, 57], "staramap": 56, "manag": [56, 57, 100, 103], "starmap": [56, 57], "__enter__": [56, 57], "__exit__": [56, 57], "_type": [56, 57], "_valu": [56, 57], "_traceback": [56, 57], "joblibparallelengin": [56, 57], "n_thread": [56, 57], "backend": [56, 57], "prefer": [56, 57, 93], "soft": [56, 57], "hint": [56, 57], "what": [56, 57, 99, 100, 101], "joblibinst": [56, 57], "multiprocess": [56, 57], "mpinstanc": [56, 57], "threadpool": [56, 57], "get_connection_map": 64, "conn_dict": 64, "painter": [65, 91, 99, 100, 101, 102, 104, 106, 107, 108, 109, 111, 113, 114, 115, 116, 119], "graphviz": [65, 68, 69, 91, 99, 100, 101, 102, 104, 106, 107, 108, 109, 111, 113, 114, 115, 116, 119], "nx": [65, 76, 79, 91, 119], "onnx": [65, 79, 81, 91, 119], "skop": [65, 79, 81, 91, 113, 115, 119], "zip": [65, 79, 81, 91, 113, 115, 119], "enum": [65, 86], "get_random_gener": [65, 87], "get_rand_int": [65, 87], "pseudo": [65, 87], "bit": [65, 87, 101], "timer_wrap": [65, 87], "rt": [65, 87], "basepaint": [66, 67, 68, 69], "available_format": [66, 67, 68], "format": [66, 67, 68, 69, 76], "render": [66, 67, 68, 69, 93, 99, 100, 101, 102, 104, 106, 107, 108, 109, 111, 113, 114, 115, 116], "from_pipelin": [66, 67, 68, 99, 100, 101, 102, 104, 106, 107, 108, 109, 111, 113, 114, 115, 116], "from_executor": [66, 67, 68, 69, 101, 108], "drawn": [66, 67, 68], "output_filenam": [66, 67, 68], "path": [66, 68], "filenam": [66, 68, 100, 102, 104, 107, 109, 111], "graphic": [66, 67, 68, 69], "graphvizpaint": [67, 68, 69, 99, 100, 101, 102, 104, 106, 107, 108, 109, 111, 113, 114, 115, 116], "graph_levels_sep": [67, 68, 69], "figure_dpi": [67, 68, 69, 99, 100, 101, 102, 104, 106, 107, 108, 109, 111, 113, 114, 115, 116], "150": [67, 68, 69], "figure_rankdir": [67, 68, 69, 100, 102, 107, 109], "lr": [67, 68, 69, 100, 107], "render_group": [67, 68], "levels_sep": [67, 68, 69], "distanc": [67, 68, 69], "http": [67, 68, 69, 98, 124], "org": [67, 68, 69], "doc": [67, 68, 69, 93, 121], "attr": [67, 68, 69], "ranksep": [67, 68, 69], "dpi": [67, 68, 69], "raster": [67, 68, 69], "png": [67, 68, 69], "jpeg": [67, 68, 69, 99, 100, 101, 102, 104, 106, 107, 108, 109, 111, 113, 114, 115, 116], "rankdir": [67, 68, 69, 100, 107], "_add_nod": [67, 68], "solid": [67, 68, 69], "color": [67, 68, 69], "_add_edg": [67, 68], "_add_input": [67, 68], "input_slot": [67, 68, 75, 76], "red": [67, 68, 69], "_add_output": [67, 68], "pars": [67, 68, 69], "topologicalpaint": [68, 69, 101, 108], "accord": [68, 69, 98, 99], "dash": [68, 69], "skip": [68, 69], "signal": [68, 69], "misspecifi": [68, 69], "metainform": [68, 69, 99, 115], "becaus": [68, 69, 98], "blue": [68, 69], "thei": [68, 69, 96, 101, 103], "head": [70, 79, 101, 108], "tail": [70, 79], "proceed": [70, 79, 101, 103], "basepipelinebuild": [71, 72, 73], "slotorblockwrapp": [72, 73], "functionalpipelinebuild": [72, 73, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 122, 123], "block_repo": [72, 73], "resolv": [72, 73], "postfix": [72, 73], "__getattr__": [72, 73], "_register_block": [72, 73], "regist": [72, 73, 99], "_make_placeholder_fn": [72, 73], "we": [72, 73, 75, 76, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 105, 115, 116], "want": [72, 73, 99, 100, 101, 116], "rf": [72, 73, 94, 96, 97, 99, 102, 106, 109, 123], "_get_block_init": [72, 73], "block_cl": [72, 73], "destin": [74, 79], "src": [74, 79], "dst": [74, 79], "daskoperatorset": [75, 76], "block_output": 75, "_output_kei": 75, "_block": 75, "_input_kei": 75, "transformdaskoperatorset": [75, 76], "fitdaskoperatorset": 75, "daskconvert": [75, 76], "operator_set": [75, 76], "entiti": [75, 76, 77, 88, 90], "dispatch": [75, 76, 77, 88, 90], "notimplementederror": [75, 76, 77, 88, 90], "unknown": [75, 76, 77, 88, 90], "obj": [75, 76, 77, 88, 89, 90, 101, 108], "_": [75, 76, 77, 89, 99, 101, 106, 108, 113, 115], "_mangle_block": [75, 76], "_mangle_output_slot": [75, 76], "_mangle_input_slot": [75, 76], "networkxconvert": [76, 77], "basedynamicpipelin": [78, 79], "extend": [78, 79], "pipelien": [78, 79], "connections_extens": [78, 79], "inplac": [78, 79], "baseblockseri": [80, 81, 82, 84, 85], "could": [80, 81, 94], "compon": [80, 81], "dump": [80, 81, 82, 84, 85, 113, 115], "out_fil": [80, 81, 82, 84, 85], "stream": [80, 81, 82, 84, 85], "in_fil": [80, 81, 82, 84, 85], "deseri": [80, 81, 82, 84, 85, 113, 115], "basepipelineseri": [80, 81, 82, 85], "joblibblockseri": [81, 82], "compress": [81, 82], "pickl": [81, 82], "joblibpipelineseri": [81, 82, 113, 115], "zippipelineseri": [81, 82, 84, 85, 113, 115], "issu": [81, 82], "skopsblockseri": [81, 84, 113, 115], "trust": [81, 84], "secur": [81, 84], "go": [81, 84, 92, 98], "Will": [81, 84], "block_seri": [81, 85], "parametr": [81, 85], "restor": [81, 85], "_dump_block": [81, 85], "_dump_all_block": [81, 85], "ids_by_block": [81, 85], "_load_all_block": [81, 85], "block_nam": [81, 85], "univers": 85, "structure_filenam": 85, "json": 85, "slotseri": 85, "blocks_by_id": 85, "from_dict": 85, "input_from_dict": 85, "output_from_dict": 85, "to_dict": 85, "connectionseri": 85, "slot_seri": 85, "modificationact": 89, "modifygroupvisitor": 89, "action": 89, "document": [91, 99], "sphinx": [91, 93, 119, 121], "autoapi": [91, 119], "link": [92, 100], "lot": [92, 93, 101], "explan": 92, "our": [93, 95, 99, 100, 102, 103, 104, 105, 109, 115, 116], "project": 93, "bug": 93, "review": 93, "open": 93, "github": [93, 95, 98, 121, 122, 124], "git": [93, 98, 121, 124], "system": [93, 98], "fork": [93, 121], "recommend": [93, 98, 100], "individu": [93, 100], "virtual": 93, "python": [93, 98, 121, 124], "venv": [93, 121], "conda": [93, 98, 121, 124], "instal": [93, 94, 95, 96, 124], "packag": 93, "meet": 93, "relat": 93, "checkout": [93, 121], "pep8": [93, 121], "try": [93, 101, 103, 110, 115], "googl": [93, 121], "lint": 93, "pylint": [93, 121], "class": [93, 96, 99, 100, 101, 103, 106, 108, 116], "conform": 93, "docstr": 93, "submiss": 93, "unit": 93, "pytest": [93, 121], "directori": 93, "rememb": 93, "mit": [93, 121], "licens": 93, "commit": 93, "particular": [93, 100, 103], "messag": 93, "short": 93, "folder": [93, 95], "restructuredtext": [93, 121], "html": [93, 98, 121, 124], "txt": [93, 98, 121, 124], "jupyt": [93, 121], "notebook": 93, "properli": 93, "pandoc": [93, 121], "easiest": 93, "cd": [93, 98, 121, 124], "_build": [93, 121], "principl": 94, "strictli": 94, "layerwis": 94, "prone": 94, "routin": 94, "tool": 94, "wide": 94, "vector": 94, "targetinput": [94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 122, 123], "random_forest": [94, 97], "rfc": [94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 122, 123], "extra_tre": [94, 97], "200": [94, 97, 99, 101, 106, 108], "cat": [94, 97], "concat": [94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 122, 123], "et": [94, 96, 97, 102, 109, 123], "layer_1": [94, 97], "final_extra_tre": [94, 97], "test_pr": [94, 96, 97, 123], "contribut": 94, "guidelin": 94, "comment": 95, "illustr": 95, "below": [95, 103], "quick": 95, "suffici": 95, "copi": [95, 98, 101, 108], "make_moon": [95, 99, 100, 101, 102, 103, 106, 107, 108, 109, 110, 113, 115, 122], "firstli": [95, 100, 101, 105], "rf_1": [95, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 122], "et_1": [95, 100, 101, 102, 103, 104, 107, 108, 109, 110, 111, 113, 114, 115, 116, 122], "concat_1": [95, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 122], "rf_2": [95, 100, 101, 103, 104, 105, 107, 108, 110, 111, 112, 113, 114, 115, 116, 122], "et_2": [95, 100, 101, 103, 104, 107, 108, 110, 111, 113, 114, 115, 116, 122], "rf_1_roc_auc": [95, 100, 102, 103, 104, 107, 109, 110, 111, 122], "rocauc": [95, 99, 100, 102, 103, 106, 107, 109, 110, 113, 114, 115, 116, 122], "roc_auc": [95, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 122], "rf_1_roc": [95, 100, 102, 103, 104, 107, 109, 110, 111, 122], "let": [95, 96, 99, 100, 101, 102, 103, 104, 105, 109, 110, 115, 116], "all_x": [95, 100, 102, 104, 105, 107, 109, 111, 112, 113, 115, 122], "all_i": [95, 100, 102, 104, 105, 107, 109, 111, 112, 113, 115, 122], "nois": [95, 99, 100, 101, 102, 103, 106, 107, 108, 109, 110, 113, 115, 122], "train_x": [95, 99, 100, 102, 104, 105, 106, 107, 109, 111, 112, 113, 115, 122], "test_x": [95, 99, 100, 102, 104, 105, 106, 107, 109, 111, 112, 113, 115, 122], "train_i": [95, 99, 100, 102, 104, 105, 106, 107, 109, 111, 112, 113, 115, 122], "test_i": [95, 99, 100, 102, 104, 105, 106, 107, 109, 111, 112, 122], "test_siz": [95, 99, 100, 102, 104, 105, 106, 107, 109, 111, 112, 113, 115, 122], "fit_executor": [95, 100, 102, 104, 105, 107, 109, 111, 112, 113, 115, 122], "transform_executor": [95, 100, 102, 104, 105, 107, 109, 111, 112, 122], "fit_result": [95, 100, 102, 104, 105, 107, 109, 111, 112, 113, 115, 122], "test_result": [95, 100, 102, 104, 105, 107, 109, 111, 112, 122], "architectur": 95, "advanc": 95, "\u0431\u043b\u043e\u043a": [96, 97, 106, 107, 110, 113], "subject": 96, "here": [96, 97, 99, 115], "convini": 96, "combin": 96, "rf_": [96, 123], "123": [96, 123], "et_": [96, 123], "concat_": [96, 123], "rf2_": [96, 123], "456": [96, 123], "et2_": [96, 123], "concat2_": [96, 123], "rf2": [96, 123], "et2": [96, 123], "proba_": [96, 123], "three": [96, 101], "english": 97, "\u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0435": 97, "\u0447\u0430\u0449\u0430": 97, "\u043b\u0435\u0441\u0430": [97, 107, 109, 112, 120, 122, 123], "\u044d\u0442\u043e": [97, 107, 108, 110, 111, 114, 121, 123], "\u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a": [97, 107, 121, 123], "\u0434\u043b\u044f": [97, 106, 107, 108, 110, 111, 112, 113, 114, 122, 123, 124], "\u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f": [97, 107, 123], "\u043c\u043e\u0434\u0435\u043b\u0435\u0439": [97, 106, 107, 112, 114, 117, 118, 122], "\u0433\u043b\u0443\u0431\u043e\u043a\u0438\u0445": [97, 108, 123], "\u043b\u0435\u0441\u043e\u0432": [97, 108, 118, 123], "\u043e\u043f\u0438\u0440\u0430\u044f\u0441\u044c": 97, "\u043d\u0430": [97, 106, 107, 108, 109, 110, 113, 114, 117, 120, 121, 122, 123, 124], "\u043e\u0431\u0449\u0435\u0443\u043f\u043e\u0442\u0440\u0435\u0431\u0438\u043c\u044b\u0439": 97, "\u0441\u043f\u043e\u0441\u043e\u0431": [97, 107, 110, 121], "\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f": [97, 121], "\u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e": 97, "\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f": [97, 107, 108, 110, 112, 122, 123], "\u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430\u0445": 97, "\u043c\u043e\u0434\u0435\u043b\u0438": [97, 106, 107, 108, 110, 114, 122, 123], "\u0432\u043d\u0443\u0442\u0440\u0438": [97, 106, 108, 124], "\u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442": 97, "\u0438\u0437": [97, 106, 107, 108, 110, 112, 123, 124], "\u0441\u0435\u0431\u044f": [97, 107, 123], "\u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435": [97, 106, 107], "\u0433\u0440\u0430\u0444\u044b": [97, 106], "\u043e\u0431\u0449\u0435\u0433\u043e": 97, "\u0432\u0438\u0434\u0430": 97, "\u0438": [97, 106, 107, 108, 110, 112, 113, 114, 118, 121, 122, 123, 124], "\u043d\u0435": [97, 106, 107, 108, 109, 110, 113, 122, 123, 124], "\u0438\u043c\u0435\u044e\u0442": [97, 107], "\u0441\u0442\u0440\u043e\u0433\u043e": 97, "\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0439": [97, 123], "\u043c\u043d\u043e\u0433\u043e\u0441\u043b\u043e\u0439\u043d\u043e\u0439": 97, "\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b": [97, 112, 122], "\u043a\u0430\u0436\u0434\u0430\u044f": [97, 121], "\u043c\u043e\u0434\u0435\u043b\u044c": [97, 106, 108, 113, 114, 123], "\u0438\u043d\u043a\u0430\u043f\u0441\u0443\u043b\u0438\u0440\u0443\u0435\u0442": 97, "\u0441\u0435\u0431\u0435": 97, "\u0434\u0432\u0430": [97, 123], "\u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445": [97, 108, 110, 122], "\u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445": [97, 107, 118, 122], "\u0433\u0440\u0430\u0444\u0430": [97, 107, 110, 112, 122, 123], "\u043f\u0435\u0440\u0432\u044b\u0439": [97, 108], "\u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442": [97, 110], "\u0437\u0430": [97, 110], "\u0441\u0442\u0430\u0434\u0438\u044e": [97, 110, 123], "\u0432\u0442\u043e\u0440\u043e\u0439": 97, "\u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f": [97, 123], "\u043d\u0430\u0448": [97, 106, 107, 109, 111, 114, 123], "\u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442": [97, 108, 123], "\u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c": 97, "\u043d\u043e\u0432\u044b\u0435": [97, 107, 118], "\u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u044b": 97, "\u043f\u0440\u0438\u0431\u0435\u0433\u0430\u044f": 97, "\u043a": [97, 106, 108, 110, 118, 121, 124], "\u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044e": 97, "\u043f\u043e\u0434\u0432\u0435\u0440\u0436\u0435\u043d\u043d\u043e\u0433\u043e": 97, "\u043e\u0448\u0438\u0431\u043a\u0430\u043c": 97, "\u043c\u043e\u043d\u043e\u0442\u043e\u043d\u043d\u043e\u0433\u043e": 97, "\u0440\u0443\u0442\u0438\u043d\u043d\u043e\u0433\u043e": 97, "\u043a\u043e\u0434\u0430": 97, "\u0430": [97, 107, 108, 110, 123], "\u0442\u0430\u043a\u0436\u0435": [97, 106, 107, 108, 109, 123, 124], "\u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442": [97, 107, 119], "\u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0435": 97, "\u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b": 97, "\u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f": [97, 107, 108, 110, 121], "\u043e\u0442\u043b\u0430\u0434\u043a\u0438": 97, "\u0433\u0440\u0430\u0444\u043e\u0432": 97, "\u043f\u043e\u043c\u0438\u043c\u043e": 97, "\u044d\u0442\u043e\u0433\u043e": [97, 107, 108], "\u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043e": 97, "\u0431\u043e\u043b\u044c\u0448\u043e\u0435": 97, "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e": 97, "\u0433\u043e\u0442\u043e\u0432\u044b\u0445": 97, "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044e": [97, 122], "\u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445": 97, "\u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445": 97, "\u0431\u043b\u043e\u043a\u043e\u0432": [97, 107, 108, 110, 112, 113, 118, 122, 123], "\u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442": 97, "\u043a\u0430\u043a": [97, 106, 107, 108, 109, 110, 113, 114, 123, 124], "\u0440\u0443\u0447\u043d\u043e\u0435": 97, "\u0437\u0430\u0434\u0430\u043d\u0438\u0435": 97, "\u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e": [97, 107, 110, 122, 123], "\u0433\u043b\u0443\u0431\u043e\u043a\u043e\u0433\u043e": [97, 107, 109, 112, 120, 122, 123], "\u0442\u0430\u043a": [97, 107, 108, 109, 118, 123, 124], "\u0435\u0433\u043e": [97, 106, 107, 108, 109, 110, 111, 122, 123], "\u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435": 97, "\u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435": 97, "\u0444\u043e\u0440\u043c\u0430\u0442\u0435": [97, 121], "\u0441\u043b\u043e\u0439": [97, 118], "\u0441\u043b\u043e\u0435\u043c": 97, "\u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u043c": [97, 114], "\u043c\u044b": [97, 106, 107, 108, 110, 112, 113, 114, 120, 121, 122, 123, 124], "\u0445\u043e\u0442\u0438\u043c": [97, 106, 107, 114], "\u0441\u043e\u0437\u0434\u0430\u0442\u044c": [97, 107, 108, 110, 121, 123, 124], "\u043e\u0434\u043d\u043e\u0441\u043b\u043e\u0439\u043d\u044b\u0439": 97, "\u0433\u043b\u0443\u0431\u043e\u043a\u0438\u0439": [97, 107, 109, 110, 111, 112, 113, 114, 118, 123], "\u043b\u0435\u0441": [97, 107, 109, 110, 111, 112, 113, 114, 118, 123], "\u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439": [97, 108, 123], "\u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439": 97, "\u0441\u0432\u0435\u0440\u0445\u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0445": 97, "\u0434\u0435\u0440\u0435\u0432\u044c\u0435\u0432": [97, 108], "\u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438": 97, "\u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435": 97, "\u043e\u0431\u043e\u0438\u043c\u0438": 97, "\u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438": 97, "\u0431\u0443\u0434\u0443\u0442": [97, 107, 108, 110, 114, 121], "\u0441\u043a\u043e\u043d\u043a\u0430\u0442\u0435\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u044b": 97, "\u0441": [97, 106, 107, 108, 109, 110, 111, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124], "\u0432\u0435\u043a\u0442\u043e\u0440\u043e\u043c": [97, 118], "\u0432\u0445\u043e\u0434\u043d\u044b\u0445": [97, 107, 123], "\u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432": [97, 118], "\u043f\u0435\u0440\u0435\u0434\u0430\u043d\u044b": [97, 108], "\u0444\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0439": 97, "\u0442\u043e\u0433\u043e": [97, 118, 121, 123], "\u0447\u0442\u043e\u0431\u044b": [97, 106, 107, 108, 113, 118, 121, 123, 124], "\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c": [97, 107], "\u043e\u043f\u0438\u0441\u0430\u043d\u043d\u0443\u044e": 97, "\u043c\u043e\u0436\u043d\u043e": [97, 107, 109, 110, 111, 113, 118, 121, 122, 123], "\u043f\u0440\u0435\u0434\u043b\u0434\u043e\u0436\u0438\u0442\u044c": 97, "\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439": [97, 113, 118, 123], "\u043a\u043e\u0434": [97, 106, 123], "\u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435": [97, 112, 120, 122], "\u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u0435\u043b\u044f": [97, 123], "\u043a\u043e\u043d\u0432\u0435\u0439\u0435\u0440\u0430": [97, 108, 110, 112, 113, 122], "\u0431\u043b\u043e\u043a\u0438": [97, 107, 108, 110, 113, 123], "\u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u0438": [97, 107, 123], "\u0434\u0430\u043d\u043d\u044b\u0445": [97, 106, 107, 108, 110, 114, 118, 123], "\u0432\u0435\u043a\u0442\u043e\u0440\u0430": [97, 123], "\u0444\u0430\u043a\u0442\u043e\u0440\u043e\u0432": [97, 107, 123], "\u043e\u0442\u043a\u043b\u0438\u043a\u043e\u0432": [97, 107, 123], "\u043a\u043e\u043d\u043a\u0430\u0442\u0435\u043d\u0430\u0446\u0438\u0438": 97, "\u043a\u043e\u043d\u043a\u0430\u0442\u0435\u043d\u0438\u0440\u0443\u044e\u0449\u0438\u0439": 97, "\u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0435": [97, 114], "\u0432\u0435\u043a\u0442\u043e\u0440\u044b": 97, "\u0432\u0435\u043a\u0442\u043e\u0440": 97, "\u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u0435\u043d\u0438\u044f": 97, "\u0438\u0442\u043e\u0433\u043e\u0432\u043e\u0433\u043e": 97, "\u0432\u044b\u0445\u043e\u0434": [97, 107, 123], "\u043e\u0431\u0435\u0440\u0442\u043a\u0430": 97, "\u043e\u0431\u0443\u0447\u0430\u0435\u043c": 97, "\u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u044f\u0435\u043c": 97, "\u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435": 97, "\u0431\u043e\u043b\u044c\u0448\u0435": [97, 107, 123], "\u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432": [97, 121, 123], "\u0432\u044b": [97, 106, 107, 108, 110, 113, 114, 117, 118, 120, 121, 122, 123, 124], "\u043c\u043e\u0436\u0435\u0442\u0435": [97, 106, 108, 110, 117, 118, 120, 121, 122, 124], "\u043d\u0430\u0439\u0442\u0438": [97, 108, 111, 113, 117, 120, 122], "\u0437\u0434\u0435\u0441\u044c": [97, 106, 113], "\u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f": [97, 122], "\u043f\u043e": [97, 107, 111, 114, 121, 122, 124], "\u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435": [97, 121, 124], "\u0432\u0432\u043e\u0434\u043d\u0430\u044f": 97, "\u043f\u0440\u0438\u043c\u0435\u0440\u044b": [97, 106, 123], "\u0441\u0442\u0430\u0442\u044c": 97, "\u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u043c": 97, "\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435": [97, 111, 123], "\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e": 97, "\u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430": [97, 106, 110], "pleas": 98, "carefulli": 98, "9": [98, 101, 108, 124], "anaconda": [98, 124], "activ": [98, 124], "bosk_env": [98, 124], "\u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430": 98, "\u043f\u0430\u043a\u0435\u0442\u0430": [98, 122], "trivial": 98, "offici": 98, "distribut": 98, "linux": [98, 124], "mac": [98, 124], "o": [98, 124], "unfortunatelli": 98, "wsl": [98, 124], "pip": [98, 101, 108, 124], "upgrad": [98, 124], "command": 98, "cuda12": [98, 124], "cuda12_pip": [98, 124], "googleapi": [98, 124], "com": [98, 124], "releas": [98, 124], "jax_cuda_releas": [98, 124], "notic": [98, 99], "nvidia": [98, 124], "driver": 98, "ntailab": [98, 124], "particip": 98, "who": 98, "cuda": [98, 99, 101, 106, 108, 124], "toolkit": [98, 124], "cudnn": [98, 124], "preinstal": 98, "directli": 98, "clone": [98, 124], "r": [98, 124], "setup": [98, 124], "py": [98, 124], "develop": [98, 99, 101, 116, 124], "purpos": [98, 101], "conveni": [98, 100], "updat": 98, "symlink": 98, "easier": 99, "subpackag": [99, 101], "torch": [99, 101, 106, 108], "tensordataset": [99, 101, 106, 108], "dataload": [99, 101, 106, 108], "ipython": [99, 100, 101, 102, 104, 106, 107, 108, 109, 111, 113, 114, 115, 116], "displai": [99, 100, 101, 102, 104, 106, 107, 108, 109, 111, 113, 114, 115, 116], "neuralnetwork": [99, 101, 106, 108], "nn": [99, 101, 106, 108], "dim": [99, 101, 106, 108], "super": [99, 101, 106, 108], "relu": [99, 101, 106, 108], "tanh": [99, 101, 106, 108], "sigmoid": [99, 101, 106, 108], "adam": [99, 101, 106, 108], "0005": [99, 101, 106, 108], "batch_siz": [99, 101, 106, 108], "64": [99, 101, 106, 108], "epochs_num": [99, 101, 106, 108], "500": [99, 101, 106, 108], "crossentropyloss": [99, 101, 106, 108], "_get_tensor": [99, 101, 106, 108], "from_numpi": [99, 101, 106, 108], "astyp": [99, 101, 106, 108], "float32": [99, 101, 106, 108], "forward": [99, 101, 106, 108], "no_grad": [99, 101, 106, 108], "x_ten": [99, 101, 106, 108], "y_ten": [99, 101, 106, 108], "long": [99, 101, 106, 108], "data_load": [99, 101, 106, 108], "zero_grad": [99, 101, 106, 108], "loss": [99, 101, 106, 108], "happen": [99, 101], "ve": [99, 100, 101, 116], "got": [99, 100, 101], "pytorch": [99, 106], "turn": [99, 101], "present": 99, "runnabl": 99, "thread_saf": [99, 106], "didn": [99, 103], "noth": 99, "now": [99, 100, 101, 102, 103], "sai": [99, 103], "why": 99, "put": 99, "logic": [99, 103], "rf_roc_auc": [99, 106], "registr": 99, "nn_func_block_wrapp": [99, 106], "nn_roc_auc": [99, 106], "train_data": [99, 106, 113, 115], "test_data": [99, 106, 113, 115], "fit_exec": [99, 103, 106, 110], "fit_r": [99, 103, 106, 110], "val": [99, 106], "item": [99, 103, 106, 110], "985": [99, 106], "923": [99, 106], "test_exec": [99, 106], "test_r": [99, 106], "838": [99, 106], "859": [99, 106], "891": [99, 106], "arsen": 100, "get_plain_dataset": [100, 102, 107, 109], "draw_pipelin": [100, 107], "instrument": [100, 116], "concis": 100, "simpli": 100, "pai": [100, 103], "attent": [100, 103], "don": [100, 101, 115], "shall": 100, "train_result": [100, 102, 104, 107, 109, 111], "allclos": [100, 102, 104, 107, 109, 111], "obvious": 100, "extern": 100, "9892676767676768": [100, 102, 107, 109], "And": [100, 101], "8571428571428572": [100, 107], "dataclass": 100, "contatin": 100, "As": [100, 101, 103, 115, 116], "acycl": 100, "although": 100, "wasn": [100, 101], "inject": 100, "strongli": 100, "correctli": 100, "decid": 100, "concept": 100, "either": 100, "term": 100, "howev": 100, "concur": 100, "worker": 100, "much": 100, "techniqu": 100, "plug": [100, 101], "input_x": [100, 107], "input_i": [100, 107], "calcal": 100, "roc_auc_rf_1": [100, 107], "declar": 100, "ensur": 100, "ourselv": 100, "accuracy_scor": [101, 108], "kfold": [101, 108], "n_tree": [101, 108], "similar": 101, "pipeline_1": [101, 108], "rf_2_1": [101, 108], "rf_2_2": [101, 108], "av": [101, 108], "pipeline_2": [101, 108], "concat_2": [101, 102, 104, 108, 109, 111], "et_3": [101, 104, 108, 111], "pipeline_3": [101, 108], "pipeline_list": [101, 108], "beneath": 101, "experi": 101, "catboostmodel": [101, 108], "grad_boost": [101, 108], "30": [101, 108], "nnmodel": [101, 108], "manual_se": [101, 108], "init_weight": [101, 108], "isinst": [101, 108], "init": [101, 108], "xavier_uniform_": [101, 108], "littl": 101, "later": 101, "fortun": 101, "int_": [101, 108], "talk": 101, "produc": 101, "md5": [101, 108], "semant": [101, 103], "reason": 101, "ruin": 101, "off": 101, "deepcopi": [101, 108], "n_split": [101, 108], "_common_pipelin": [101, 108], "_optim_pipelin": [101, 108], "insert": 101, "tabl": 101, "070443": 101, "89999999953028e": 101, "06": [101, 108], "992481": [101, 108], "992857": [101, 108], "006083": 101, "8999999999991246e": 101, "776119": [101, 108], "772072": [101, 108], "070605": 101, "709999999987559e": 101, "05": [101, 108], "averageblo": 101, "006156": 101, "8800000000318562e": 101, "averagebl": [101, 108], "100048": 101, "4000000003733248e": 101, "000000": [101, 108], "column": 101, "flag": 101, "scalar": 101, "cell": 101, "metric_nam": [101, 108], "would": [101, 116], "metric_i": [101, 108], "mechan": [102, 115], "13": [102, 109], "14": [102, 109], "15": [102, 103, 109, 110], "make_deep_forest_lay": [102, 109], "stack_1": [102, 109], "average_1": [102, 109], "cs_1": [102, 109], "95": [102, 109], "filtered_1": [102, 109], "csfilter": [102, 109], "filtered_1_i": [102, 109], "concat_all_1": [102, 109], "filtered_1_x": [102, 109], "filtered_concat_1": [102, 109], "average_2": [102, 109], "average_3": [102, 104, 109, 111], "joined_3": [102, 109], "csjoin": [102, 109], "argmax_3": [102, 104, 109, 111], "too": 102, "top": 102, "bottom": 102, "80": [102, 109], "tb": [102, 109], "16": [102, 109], "7797619047619047": [102, 109], "17": [102, 109, 113, 115], "sample_weight_2": [102, 109], "7386363636363636": [102, 109], "5833333333333334": [102, 109], "explain": 103, "show": 103, "said": [103, 104], "full_data": [103, 110], "good": 103, "39": [103, 110, 113, 115], "constraint": 103, "tf_exec": [103, 110], "break": 103, "34": [103, 110], "wouldn": 103, "had": 103, "tf_data": [103, 110], "tf_re": [103, 110], "discuss": 103, "impli": 103, "respons": 103, "inheritor": 103, "examl": 103, "timer_block_exec": [103, 110], "max_time_block": [103, 110], "max_tim": [103, 110], "8759314183514": [103, 110], "00369": [103, 110], "articl": 104, "cnn": 104, "load_digit": [104, 111], "get_image_dataset": [104, 111], "digit": [104, 111], "rf_3": [104, 111], "stack_3": [104, 111], "rocaucmultilabel": [104, 111], "multi_class": [104, 111], "ovr": [104, 111], "998348204661033": [104, 111], "gbm": 105, "make_friedman1": [105, 112], "mean_squared_error": [105, 112], "rfr": [105, 112], "cb_1": [105, 112], "rf_reshap": [105, 112], "cb_reshap": [105, 112], "cb_2": [105, 112], "1000": [105, 112], "010965590009033686": [105, 112], "4845832612241044": [105, 112], "\u0432": [106, 107, 109, 110, 111, 112, 113, 114, 118, 122], "\u0442\u0440\u0435\u0431\u0443\u044e\u0442": [106, 117], "\u0438\u0445": [106, 107, 108, 112, 121, 122, 123], "\u0443\u0437\u043b\u044b": [106, 107], "\u0431\u044b\u043b\u0438": [106, 108, 110], "\u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430\u043c\u0438": 106, "\u0443\u043f\u0440\u043e\u0441\u0442\u0438\u0442\u044c": 106, "\u0432\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435": 106, "\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445": 106, "\u0431\u044b\u043b": [106, 108], "\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d": [106, 108, 118], "\u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440": 106, "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f": 106, "\u043b\u0435\u0433\u043a\u043e": [106, 118], "\u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c": 106, "\u0441\u0432\u043e\u044e": 106, "\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0443\u044e": 106, "\u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c": [106, 107], "\u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f": [106, 110, 123], "\u0441\u043c": 106, "\u043f\u043e\u0434\u043f\u0430\u043a\u0435\u0442\u0430": 106, "\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c": [106, 108, 110, 113], "\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e": [106, 124], "\u043e\u043f\u0438\u0448\u0435\u043c": [106, 108, 123], "\u0447\u0442\u043e": [106, 107, 108, 110, 111, 113, 114, 121, 123, 124], "\u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442": [106, 108], "\u0443": [106, 107, 110, 121, 122, 123], "\u043d\u0430\u0441": [106, 110], "\u0435\u0441\u0442\u044c": [106, 107, 110, 123], "\u043d\u0435\u0439\u0440\u043e\u043d\u043d\u043e\u0439": 106, "\u0441\u0435\u0442\u0438": 106, "\u043a\u043e\u0442\u043e\u0440\u0443\u044e": 106, "\u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c": 106, "\u043a\u0430\u043a\u043e\u0439": [106, 107, 108, 124], "\u043d\u0438\u0431\u0443\u0434\u044c": 106, "\u043a\u043e\u043d\u0432\u0435\u0439\u0435\u0440": [106, 107, 109, 110, 111, 112, 113, 122], "\u043e\u0431\u0443\u0447\u0438\u0442\u044c": [106, 113, 123], "\u0435\u0435": [106, 108, 123], "\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u043e\u043c": [106, 124], "\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u0435": [106, 124], "\u043f\u0440\u0435\u0432\u0440\u0430\u0442\u0438\u0442\u044c": 106, "\u043d\u0430\u0448\u0443": [106, 113, 114], "\u043d\u0430\u043c": [106, 107, 108, 110, 114], "\u043d\u0443\u0436\u043d\u043e": [106, 107, 108, 110, 113, 114], "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c": [106, 107, 108, 110, 113, 123, 124], "\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442": 106, "\u043a\u043b\u0430\u0441\u0441\u0430\u043c\u0438": 106, "\u0438\u043c\u0435\u044e\u0449\u0438\u043c\u0438": 106, "\u043c\u0435\u0442\u043e\u0434\u044b": [106, 113], "\u043e\u043d": [106, 108, 112, 123], "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442": [106, 114, 121, 124], "\u0438\u043c\u0435\u043d\u0430": [106, 107], "\u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432": 106, "\u043c\u0435\u0442\u043e\u0434\u043e\u0432": 106, "\u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f": [106, 107, 112, 123], "\u043c\u0435\u0442\u0430\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438": [106, 123], "\u043e": [106, 108, 113, 121, 123], "\u0441\u043b\u043e\u0442\u0430\u0445": 106, "\u043a\u0430\u0436\u0434\u043e\u0435": 106, "\u0438\u043c\u044f": 106, "\u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430": [106, 107], "\u0441\u043e\u0437\u0434\u0430\u0435\u0442": [106, 123], "\u0441\u0432\u043e\u0439": [106, 108], "\u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439": [106, 108], "\u0441\u043b\u043e\u0442": [106, 107], "\u0435\u0441\u043b\u0438": [106, 107, 108, 109, 110, 113, 124], "\u043c\u0435\u0442\u043e\u0434\u0435": 106, "\u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d": 106, "\u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442": [106, 108, 113], "\u0442\u043e": [106, 107, 108, 110, 113], "\u0431\u0443\u0434\u0435\u0442": [106, 108, 112, 124], "\u043f\u043e\u043c\u0435\u0447\u0435\u043d": [106, 108], "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439": 106, "\u044d\u0442\u0430\u043f\u0435": [106, 110], "\u0436\u0435": [106, 107, 108], "\u0441\u0430\u043c\u043e\u0435": 106, "\u043c\u0435\u0442\u043e\u0434\u043e\u043c": [106, 123], "\u044d\u0442\u0430\u043f\u043e\u043c": 106, "\u043c\u043e\u0436\u0435\u043c": [106, 107, 108, 110, 124], "\u0431\u0435\u0437": [106, 124], "\u043a\u0430\u043a\u0438\u0445": 106, "\u043b\u0438\u0431\u043e": [106, 107, 123, 124], "\u0441\u043e\u0437\u0434\u0430\u0441\u0442": 106, "\u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439": [106, 114], "\u0446\u043f\u0443": [106, 107, 124], "\u0441\u043e": [106, 107, 111, 118], "\u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u043c": [106, 121], "\u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435\u043c": 106, "\u043a\u043e\u0442\u043e\u0440\u043e\u043c": [106, 107], "\u0443\u0437\u043d\u0430\u0442\u044c": 106, "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438": 106, "\u043d\u0430\u0448\u0435\u043c": [106, 122], "\u0441\u043b\u0443\u0447\u0430\u0435": [106, 107, 108], "\u044d\u0442\u043e\u0442": [106, 107, 108, 109, 110, 113], "\u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0449\u0438\u0439": 106, "\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u044b\u0439": 106, "\u0440\u0430\u0441\u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u0438\u0432\u0430\u043d\u0438\u044e": 106, "\u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443": [106, 107, 108], "\u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u043b\u0438": 106, "\u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e": 106, "\u0432\u0435\u0441\u043e\u0432": 106, "\u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438": 106, "\u0437\u0430\u0434\u0430\u043d\u043d\u044b\u043c": 106, "\u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u043c": 106, "\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u043c": 106, "\u0447\u0438\u0441\u043b\u043e\u043c": 106, "\u043e\u0442\u043c\u0435\u0442\u0438\u043b\u0438": 106, "\u043d\u0438\u0447\u0435\u0433\u043e": 106, "\u0434\u0435\u043b\u0430\u0442\u044c": 106, "\u0442\u0435\u043f\u0435\u0440\u044c": [106, 107, 108, 109, 110], "\u0434\u0430\u0432\u0430\u0439\u0442\u0435": [106, 107, 108, 109, 110, 112, 113, 114, 122], "\u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c": [106, 108, 109, 112], "\u043d\u0430\u0448\u0435\u0439": [106, 114, 122], "\u043c\u043e\u0434\u0435\u043b\u044c\u044e": [106, 114], "\u043e\u0431\u0440\u0430\u0442\u0438\u0442\u0435": [106, 107, 124], "\u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435": [106, 107, 110, 124], "\u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c": 106, "\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439": 106, "\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u043c": [106, 122], "\u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u0435\u043b\u0435": 106, "\u0441\u043a\u0430\u0437\u0430\u0442\u044c": [106, 110], "\u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0435\u0435": [106, 107], "\u0432\u0440\u0435\u043c\u044f": [106, 107, 108, 110], "\u0434\u0430\u043d\u043d\u044b\u0435": [106, 107, 108, 110, 112, 114, 122, 123], "\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e": [106, 124], "\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u0430": [106, 124], "\u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f": 106, "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c": 106, "\u043c\u0430\u0441\u0441\u0438\u0432\u043e\u0432": [106, 123], "\u043a\u043e\u0442\u043e\u0440\u044b\u0435": [106, 110, 117, 118, 123], "\u043d\u0435\u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u044b": 106, "\u0442\u0435\u043d\u0437\u043e\u0440\u0430\u043c\u0438": 106, "\u0432\u043e\u0442": 106, "\u043f\u043e\u0447\u0435\u043c\u0443": 106, "\u0441\u0442\u0430\u0432\u0438\u043b\u0438": 106, "\u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043b\u0438": 106, "\u0432\u0441\u044e": 106, "\u043b\u043e\u0433\u0438\u043a\u0443": [106, 110], "\u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438": 106, "\u0433\u043f\u0443": [106, 107, 124], "\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f": 106, "\u0431\u043b\u043e\u043a\u0430": [106, 107, 113, 123], "\u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435": 106, "\u043e\u0431\u0443\u0447\u0438\u043c": [106, 107, 113, 114], "\u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u043c": [106, 107], "\u0440\u0435\u0436\u0438\u043c\u0435": [106, 107, 121, 123], "\u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c": [106, 107, 108], "\u043f\u043e\u0437\u0432\u043e\u043b\u0438\u043b\u0430": 106, "\u043b\u0438": [106, 108], "\u043d\u0430\u0448\u0430": [106, 121], "\u0430\u043d\u0441\u0430\u043c\u0431\u043b\u0435\u0432\u0430\u044f": 106, "\u0434\u043e\u0431\u0438\u0442\u044c\u0441\u044f": 106, "\u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u0439": 106, "\u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e": 106, "\u0431\u0430\u0437\u043e\u0432\u044b\u0445": 106, "\u044d\u0442\u043e\u043c": [107, 108, 110, 112], "\u043f\u0440\u0438\u043c\u0435\u0440\u0435": [107, 108, 110, 112, 121], "\u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c": 107, "\u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c": [107, 110], "\u043a\u043b\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043a\u0438\u0439": 107, "\u0440\u0430\u043c\u043a\u0430\u0445": 107, "\u043d\u0430\u0431\u043e\u0440\u0430": 107, "\u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432": 107, "\u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e": 107, "\u0441\u043f\u0435\u0440\u0432\u0430": 107, "\u0431\u0443\u0434\u0435\u043c": [107, 110, 113], "\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439": 107, "\u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438": 107, "\u043a\u043b\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e": 107, "\u0434\u0432\u0443\u043c\u044f": [107, 123], "\u0441\u043b\u043e\u044f\u043c\u0438": [107, 114, 123], "\u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442": [107, 114], "\u0434\u0435\u043b\u0430\u0435\u0442": 107, "\u043f\u0440\u043e\u0446\u0435\u0441\u0441": [107, 123], "\u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439": 107, "\u043b\u0430\u043a\u043e\u043d\u0438\u0447\u043d\u044b\u043c": 107, "\u043f\u0440\u043e\u0441\u0442\u043e": [107, 108, 110], "\u0441\u043e\u0437\u0434\u0430\u0435\u043c": [107, 112, 122], "\u043f\u0440\u0438": [107, 124], "\u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c": 107, "\u0432\u044b\u0437\u043e\u0432\u0435": 107, "\u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c": 107, "\u043a\u0430\u043a\u0438\u0435": [107, 110], "\u0441\u043b\u043e\u0442\u044b": [107, 114, 123], "\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u0442\u044c": 107, "\u0434\u0440\u0443\u0433\u0438\u043c\u0438": 107, "\u0431\u043b\u043e\u043a\u0430\u043c\u0438": [107, 108, 123], "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435": [107, 108], "\u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442": 107, "\u0441\u043b\u043e\u0442\u0443": 107, "\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435": [107, 108], "\u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442": 107, "\u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435": [107, 108, 110, 123], "\u0432\u0445\u043e\u0434\u0430": 107, "\u0441\u043b\u043e\u0442\u0430": 107, "\u0432\u0441\u0435": [107, 108, 113, 118, 121, 122, 123], "\u0442\u043e\u043b\u044c\u043a\u043e": [107, 108, 110, 113, 122, 124], "\u043e\u0434\u0438\u043d": [107, 108, 110, 121], "\u0432\u044b\u0445\u043e\u0434\u043d\u043e\u0439": 107, "\u043f\u043e\u044d\u0442\u043e\u043c\u0443": [107, 108, 110, 114, 124], "\u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c": 107, "\u0438\u043c\u0435\u043d\u043d\u043e": 107, "\u043e\u0431\u044a\u0435\u043a\u0442\u0430": [107, 108, 112, 122], "\u043a\u043e\u043d\u0441\u0442\u0440\u0443\u0438\u0440\u0443\u044e\u0449\u0435\u0433\u043e": [107, 112, 122], "\u0434\u0430\u043b\u0435\u0435": [107, 118, 123], "\u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c": 107, "\u043e\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0435": [107, 118], "\u0432\u044b\u0448\u0435": [107, 108, 118, 123], "\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f": 107, "\u0438\u0437\u043e\u0431\u0440\u0430\u0437\u0438\u043c": [107, 111], "\u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c": 107, "\u043d\u0443\u0436\u043d\u044b\u0435": 107, "\u0432\u0445\u043e\u0434\u044b": [107, 110, 123], "\u0432\u044b\u0445\u043e\u0434\u044b": [107, 110, 123], "\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u0445": 107, "\u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044f": [107, 110, 120, 122, 123], "\u0437\u0430\u043f\u0443\u0441\u043a\u0430": [107, 110], "\u0441\u043b\u043e\u0432\u0430\u0440\u044c": [107, 110, 123], "\u043a\u043b\u044e\u0447\u0430\u043c\u0438": 107, "\u0432\u0445\u043e\u0434\u043e\u0432": [107, 110, 123], "\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438": 107, "\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c": [107, 108], "\u0441\u0442\u0430\u043d\u0435\u0442": 107, "\u0438\u043c\u0435\u043d\u0430\u043c\u0438": 107, "\u0432\u044b\u0445\u043e\u0434\u043e\u0432": [107, 123], "\u043a\u043b\u044e\u0447\u0435\u0439": [107, 108], "\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439": [107, 108, 123], "\u0441\u043b\u0435\u0434\u0443\u0435\u0442": [107, 124], "\u043a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c": [107, 123], "\u043c\u0430\u0441\u0441\u0438\u0432": 107, "\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e": 107, "\u0441\u043b\u043e\u044f": [107, 110, 123], "\u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e": [107, 113, 121, 124], "\u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e": 107, "\u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0439": 107, "\u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c": [107, 110], "\u0441\u0432\u043e\u0435\u043c": 107, "\u0432\u044b\u0445\u043e\u0434\u0435": 107, "\u0434\u043e\u043b\u0436\u0435\u043d": [107, 108, 121], "\u0434\u0430\u0442\u044c": [107, 121], "\u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435": 107, "\u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0435": 107, "\u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c": 107, "\u043c\u0435\u0442\u0440\u0438\u043a\u0438": [107, 108], "\u043e\u0447\u0435\u0432\u0438\u0434\u043d\u043e": 107, "\u0432\u043d\u0435\u0448\u043d\u044f\u044f": 107, "\u043e\u0446\u0435\u043d\u043a\u0430": 107, "\u0434\u043e\u043b\u0436\u043d\u0430": [107, 108, 121], "\u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0442\u044c": 107, "\u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0439": 107, "\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435": 107, "\u043d\u0430\u043a\u043e\u043d\u0435\u0446": 107, "\u043f\u043e\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c": 107, "\u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439": 107, "\u0432\u044b\u0431\u043e\u0440\u043a\u043e\u0439": 107, "\u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439": [107, 110, 123], "\u0433\u0440\u0430\u0444": [107, 110, 112, 123], "\u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0435": 107, "\u0438\u043c\u0435\u0435\u0442": 107, "\u0442\u0438\u043f": 107, "\u043a\u043b\u0430\u0441\u0441": [107, 108, 110, 121], "\u043a\u043e\u0442\u043e\u0440\u044b\u0439": [107, 108, 110, 111, 114, 123], "\u0442": 107, "\u0435": 107, "\u0440\u0435\u0431\u0440\u0430": 107, "\u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f": [107, 123], "\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d": 107, "\u0430\u0446\u0438\u043a\u043b\u0438\u0447\u0435\u043d": 107, "\u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0443\u044e": 107, "\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e": [107, 113], "\u0432\u0445\u043e\u0434\u0430\u0445": 107, "\u0432\u044b\u0445\u043e\u0434\u0430\u0445": [107, 123], "\u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435": 107, "\u043d\u0435\u0441\u043c\u043e\u0442\u0440\u044f": 107, "\u043d\u0430\u043c\u0438": 107, "\u043f\u0440\u0435\u0434\u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0430": 107, "\u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430": 107, "\u0438\u043d\u044a\u0435\u043a\u0446\u0438\u044e": 107, "\u043d\u0430\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e": 107, "\u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u043c": [107, 121], "\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e": 107, "\u043f\u043e\u043c\u0435\u0447\u0430\u0442\u044c": 107, "\u0440\u0430\u0437\u043d\u044b\u043c": [107, 108], "\u0441\u043b\u043e\u0442\u0430\u043c": 107, "\u0434\u043e\u043b\u0436\u043d\u044b": [107, 109, 110, 113, 121, 123, 124], "\u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c": [107, 121], "\u0440\u0430\u0437\u043d\u044b\u0435": [107, 108, 118], "\u043a\u043e\u043d\u0432\u0435\u0439\u0435\u0440\u0443": 107, "\u0431\u044b\u043b\u0430": 107, "\u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430": 107, "\u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u044f": 107, "\u0441\u043b\u043e\u0442\u043e\u0432": [107, 110, 113], "\u043a\u0430\u0436\u0434\u044b\u0439": [107, 110, 114, 118, 121, 123], "\u0441\u043f\u0438\u0441\u043e\u043a": [107, 123], "\u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445": [107, 123], "\u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u043c\u0438": 107, "\u0434\u0430\u043d\u043d\u043e\u0433\u043e": 107, "\u043a\u0443\u0434\u0430": 107, "\u043c\u043e\u0433\u0443\u0442": [107, 113, 118, 121], "\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c\u0441\u044f": 107, "\u043e\u0431\u044b\u0447\u043d\u043e": 107, "\u043d\u043e": [107, 110, 124], "\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e": 107, "\u0442\u0430\u043a\u0438\u043c": [107, 110, 114], "\u043e\u0431\u0440\u0430\u0437\u043e\u043c": [107, 110, 114, 123], "\u043c\u043e\u0436\u0435\u0442": [107, 108, 110, 111, 113, 123, 124], "\u0431\u044b\u0442\u044c": [107, 108, 109, 111, 113, 118, 121, 123, 124], "\u043e\u043f\u0438\u0441\u0430\u043d": [107, 109], "\u0442\u0435\u0440\u043c\u0438\u043d\u0430\u0445": 107, "\u0441\u0441\u044b\u043b\u043a\u0443": 107, "\u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439": 107, "\u0442\u0435\u043c": 107, "\u043c\u0435\u043d\u0435\u0435": 107, "\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c": 107, "\u0442\u043e\u0447\u043a\u0438": 107, "\u0437\u0440\u0435\u043d\u0438\u044f": 107, "\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c": 107, "\u0432\u044b\u0445\u043e\u0434\u043d\u043e\u0433\u043e": 107, "\u0432\u043e": [107, 108, 110], "\u0432\u0445\u043e\u0434\u043d\u043e\u0439": 107, "\u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440": [107, 123], "\u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442": [107, 108], "\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443": 107, "\u0432\u0435\u0441\u0442\u0438": 107, "\u0440\u0430\u0437\u043d\u043e\u043c\u0443": 107, "\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438": 107, "\u043e\u0442": [107, 110, 124], "\u044d\u0442\u0430\u043f\u0430": [107, 110], "\u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439": [107, 124], "\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440": [107, 108, 123, 124], "\u043a\u043b\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043a\u043e\u0439": 107, "\u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c": [107, 110], "\u043f\u0440\u0435\u0434\u0438\u043a\u0442\u043e\u0440\u044b": 107, "\u043e\u0442\u043a\u043b\u0438\u043a\u0438": 107, "\u043f\u043e\u0441\u043b\u0435": [107, 110, 112, 121, 122, 123], "\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430": [107, 108], "\u043a\u0430\u0436\u0434\u043e\u0433\u043e": [107, 110, 123], "\u044d\u0442\u0438\u0445": [107, 113, 118], "\u044d\u0442\u0430\u043f\u043e\u0432": 107, "\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c": [107, 110], "\u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439": 107, "\u043a\u043e\u043d\u0432\u0435\u0439\u0435\u0440\u044b": [107, 108, 110, 123], "\u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c\u0441\u044f": [107, 108], "\u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u043c": 107, "\u0438\u043b\u0438": [107, 108, 121, 123, 124], "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430": 107, "\u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e": 107, "\u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u044b\u0445": 107, "\u043e\u0431\u043e\u0438\u0445": 107, "\u0441\u043b\u0443\u0447\u0430\u044f\u0445": 107, "\u043f\u043e\u0442\u0440\u0435\u0431\u043e\u0432\u0430\u0442\u044c\u0441\u044f": 107, "\u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e": [107, 108, 121, 123], "\u0440\u0430\u0431\u043e\u0447\u0438\u0445": 107, "\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432": 107, "\u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c": 107, "\u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044f": 107, "\u043f\u043e\u0442\u043e\u043a\u043e\u0432": 107, "\u043a\u0430\u0436\u0434\u043e\u043c\u0443": 107, "\u0431\u043b\u043e\u043a\u0443": 107, "\u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0435": 107, "\u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435": [107, 112, 122], "\u0442\u043e\u043c": [107, 121, 123], "\u0432\u0430\u0441": [107, 121], "\u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432": 107, "\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438": [107, 108, 110, 111], "\u0440\u0430\u0437\u043d\u044b\u0445": [107, 123], "\u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435": [107, 108], "\u043a\u043e\u043d\u0432\u0435\u0439\u0435\u0440\u0435": [107, 108, 118], "\u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f": 107, "\u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e": 107, "\u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u043c": [107, 120, 123], "\u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e": 107, "\u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435": 107, "\u043f\u0440\u043e\u0441\u0442\u044b\u043c\u0438": 107, "\u0443\u0434\u043e\u0431\u043d\u044b\u0439": 107, "\u043e\u0434\u043d\u0430\u043a\u043e": 107, "\u0437\u0430\u0434\u0430\u0442\u044c": [107, 122, 123], "\u0432\u0440\u0443\u0447\u043d\u0443\u044e": [107, 121, 123, 124], "\u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u043c": 107, "\u0442\u043e\u0442": 107, "\u043f\u043e\u043c\u043e\u0449\u044c\u044e": [107, 108, 109, 110, 118, 119, 121, 123, 124], "\u044d\u0442\u043e\u0439": [107, 111, 117, 120, 122], "\u0442\u0435\u0445\u043d\u0438\u043a\u0438": 107, "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c": [107, 121, 123], "\u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435": [107, 122], "\u043d\u0430\u0447\u0430\u043b\u0430": 107, "\u0432\u0445\u043e\u0434\u043d\u044b\u0435": [107, 108, 110], "\u0441\u043b\u043e\u0435\u0432": [107, 108, 118], "\u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u043c\u0438": 107, "\u043b\u0435\u0441\u0430\u043c\u0438": 107, "\u0441\u0432\u0435\u0440\u0445\u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u043c\u0438": 107, "\u0434\u0435\u0440\u0435\u0432\u044c\u044f\u043c\u0438": 107, "\u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f": [107, 123], "\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432": [107, 108], "\u0432\u0445\u043e\u0434": [107, 118, 123], "\u0441\u043b\u043e\u0438": 107, "\u043d\u0430\u0440\u0438\u0441\u0443\u0435\u043c": [107, 108, 109, 114], "\u0443\u0431\u0435\u0434\u0438\u043c\u0441\u044f": 107, "\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442": [107, 113, 118, 123], "\u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432": 107, "\u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f": 107, "\u043f\u0440\u0438\u043c\u0435\u0440\u0430": 107, "\u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043c": [107, 111], "\u0442\u0435": 107, "\u0442\u0435\u0441\u0442\u044b": [107, 121], "\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b": [107, 108], "\u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b": [107, 108], "\u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0442\u044c": 108, "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c": [108, 120], "\u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0435": 108, "\u0432\u043d\u0435": 108, "\u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430": [108, 123], "\u043f\u043e\u0434\u043f\u0430\u043a\u0435\u0442": 108, "\u0441omparison": 108, "\u043f\u043e\u0445\u043e\u0436\u0438\u0445": 108, "\u043a\u043e\u043d\u0432\u0435\u0439\u0435\u0440\u043e\u0432": [108, 113], "\u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0435": 108, "\u0432\u0430\u043c": [108, 113, 121], "\u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c": [108, 121], "\u0430\u0434\u0430\u043f\u0442\u0435\u0440\u0430": 108, "\u043d\u0430\u0441\u043b\u0435\u0434\u0443\u0435\u0442": 108, "\u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441": [108, 114, 117, 122], "\u0442\u0440\u0435\u0431\u0443\u0435\u0442": 108, "\u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043b\u0430": 108, "\u0441\u043b\u043e\u0432\u0430\u0440\u0438": 108, "\u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u043b\u0430": 108, "\u043c\u0435\u0442\u043e\u0434": [108, 110, 121, 123], "\u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442": 108, "\u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b\u043c": 108, "\u0434\u0432\u0435": 108, "\u0442\u0430\u043a\u0438\u0435": [108, 114], "\u043d\u0435\u043c\u043d\u043e\u0433\u043e": 108, "\u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c": 108, "\u0430\u0434\u0430\u043f\u0442\u0435\u0440\u044b": 108, "\u0441\u043b\u043e\u0432\u0430\u0440\u0435\u0439": 108, "\u0441\u0434\u0435\u043b\u0430\u0435\u043c": [108, 110, 114, 123], "\u043f\u043e\u0437\u0436\u0435": 108, "\u0441\u0447\u0430\u0441\u0442\u044c\u044e": 108, "\u043f\u0440\u043e\u0441\u0442\u044b\u0445": 108, "\u043c\u0435\u0442\u0440\u0438\u043a": [108, 112, 122], "\u0433\u043e\u0442\u043e\u0432\u044b\u0439": 108, "\u043e\u0431\u043e\u043b\u043e\u0447\u043a\u0443": 108, "\u043f\u043e\u0433\u043e\u0432\u043e\u0440\u0438\u0442\u044c": 108, "\u043a\u043b\u0430\u0441\u0441\u0435": [108, 123], "\u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435": [108, 117, 122], "\u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430": 108, "\u043f\u0435\u0440\u0435\u043a\u0440\u0435\u0441\u0442\u043d\u043e\u0439": 108, "\u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438": 108, "\u0441\u0445\u0435\u043c\u0430": 108, "\u0432\u044b\u0431\u0438\u0440\u0430\u0435\u0442\u0441\u044f": 108, "\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c": 108, "\u0438\u043c\u0435\u0442\u044c": [108, 114], "\u043a\u043e\u043c\u043f\u0430\u0440\u0430\u0442\u043e\u0440": 108, "\u043f\u043e\u043f\u044b\u0442\u0430\u0435\u0442\u0441\u044f": 108, "\u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c": 108, "\u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0435": 108, "\u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442": [108, 110], "\u043e\u0431\u0449\u0443\u044e": [108, 113], "\u0447\u0430\u0441\u0442\u044c": [108, 124], "\u0432\u0441\u0435\u0445": 108, "\u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c": [108, 110, 122], "\u044d\u0442\u0443": [108, 114, 124], "\u0440\u0430\u0437": [108, 113], "\u0441\u043e\u043a\u0440\u0430\u0442\u0438\u0442": 108, "\u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f": 108, "\u0432\u0430\u0436\u043d\u0430\u044f": 108, "\u0434\u0435\u0442\u0430\u043b\u044c": 108, "\u043e\u0431\u0449\u0438\u0435": 108, "\u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f": [108, 123], "\u0444\u0443\u043d\u043a\u0446\u0438\u0438": 108, "\u043e\u043d\u0430": 108, "\u0432\u044b\u0434\u0430\u0432\u0430\u0442\u044c": 108, "\u0445\u0435\u0448\u0438": 108, "\u0441\u0435\u043c\u0430\u043d\u0442\u0438\u0447\u0435\u0441\u043a\u0438": 108, "\u0438\u0434\u0435\u043d\u0442\u0438\u0447\u043d\u044b\u0445": 108, "\u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e": [108, 114], "\u0442\u043e\u0447\u043d\u043e": 108, "\u0440\u0430\u0437\u043d\u044b\u043c\u0438": 108, "\u043f\u0435\u0440\u0435\u0434": [108, 120, 121], "\u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435\u043c": 108, "\u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442\u0441\u044f": 108, "\u043e\u0434\u043d\u043e": 108, "\u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0435": [108, 122], "\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435": 108, "\u0447\u0438\u0441\u043b\u043e": 108, "\u043f\u0440\u0438\u0447\u0438\u043d\u0435": 108, "\u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c": [108, 111], "\u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438": 108, "\u043f\u043e\u0440\u0442\u0438\u0442": 108, "\u0432\u0430\u0448\u0443": [108, 121], "\u043e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u044c": 108, "\u043f\u0435\u0440\u0435\u0434\u0430\u0432": 108, "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f": 108, "\u0438\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0435": 108, "\u0443\u0432\u0438\u0434\u0435\u0442\u044c": [108, 122], "\u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044e": 108, "\u043e\u0441\u0437\u0434\u0430\u043d\u0438\u044f": 108, "\u0445\u043e\u0442\u0438\u0442\u0435": 108, "\u0447\u0443\u0436\u0438\u0435": 108, "\u043f\u0435\u0440\u0435\u0434\u0430\u0439\u0442\u0435": 108, "\u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0431\u0449\u0438\u0439": 108, "\u043d\u0430\u0439\u0434\u0435\u043d\u043d\u0430\u044f": 108, "\u043e\u0431\u0449\u0430\u044f": 108, "\u0442\u0440\u0435\u0445": 108, "\u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439": 108, "\u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435": 108, "\u0441\u0442\u0430\u0434\u0438\u0438": [108, 109], "\u0432\u0438\u0434\u0438\u043c": 108, "\u043d\u0438": 108, "\u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445": 108, "\u043f\u0435\u0440\u0432\u043e\u043c": 108, "\u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u043c": 108, "\u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0433\u043e": 108, "\u0431\u044b\u043b\u043e": [108, 110], "\u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u043e": 108, "\u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e": 108, "\u0438\u0442\u0430\u043a": [108, 114], "\u043d\u0430\u0445\u043e\u0434\u0438\u0442": 108, "\u0432\u044b\u0440\u0435\u0437\u0430\u0435\u0442": 108, "\u043d\u0438\u0445": [108, 123], "\u0432\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442": 108, "\u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435": 108, "\u0437\u0430\u0433\u043b\u0443\u0448\u043a\u0438": 108, "\u0434\u0440\u0443\u0433\u0438\u0445": 108, "\u043a\u043e\u043d\u0432\u0435\u0439\u0435\u0440\u0430\u0445": 108, "\u0437\u0430\u043f\u0443\u0441\u0442\u0438\u043c": [108, 109], "\u043f\u043e\u043b\u0443\u0447\u0438\u043c": 108, "\u0442\u0430\u0431\u043b\u0438\u0446\u0443": 108, "048471": 108, "19999999995224e": 108, "004177": 108, "2000000007006406e": 108, "048540": 108, "3399999999895726e": 108, "004222": 108, "3000000000040757e": 108, "072807": 108, "3000000000928935e": 108, "inp": 108, "\u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0438": 108, "\u0441\u0442\u043e\u043b\u0431\u0446\u044b": 108, "\u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c\u043e\u0439": 108, "\u043d\u0430\u0437\u044b\u0432\u0430\u0442\u044c\u0441\u044f": [108, 114], "\u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u044b": 108, "\u043e\u043d\u0438": [108, 109, 110, 123], "\u0441\u043f\u0438\u0441\u043a\u0435": 108, "\u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438": 108, "\u043d\u043e\u043c\u0435\u0440": 108, "\u0444\u043e\u043b\u0434\u0430": 108, "\u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u0439\u0441\u044f": 108, "\u0441\u0442\u0440\u043e\u043a\u043e\u0432\u0430\u044f": 108, "\u0431\u0438\u043d\u0430\u0440\u043d\u0430\u044f": 108, "\u043c\u0435\u0442\u043a\u0430": 108, "\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f": [108, 113], "\u0442\u0435\u0441\u0442\u0430": 108, "\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u043d\u043e\u0435": 108, "\u043d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439": 108, "\u0441\u0442\u043e\u043b\u0431\u0435\u0446": 108, "\u0444\u043b\u0430\u0433": 108, "\u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d": 108, "\u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439": 108, "\u043d\u0435\u0441\u043a\u0430\u043b\u044f\u0440\u043d\u044b\u0435": 108, "\u044f\u0447\u0435\u0439\u043a\u0438": 108, "\u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442": 108, "\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u043d\u044b\u043c": 108, "\u0432\u0440\u0435\u043c\u0435\u043d\u0435\u043c": 108, "\u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439": 108, "\u0444\u043e\u043b\u0434\u0435": 108, "\u0443\u043a\u0430\u0437\u0430\u043d\u043e": 108, "\u0433\u0434\u0435": [108, 124], "\u043f\u043e\u0437\u0438\u0446\u0438\u044f": 108, "\u0446\u0435\u043d\u0437\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c": 109, "\u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c": [109, 113, 118], "\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439": 109, "\u0441\u0442\u0430\u0442\u044c\u0435": [109, 111], "\u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f": 109, "\u0444\u0443\u043d\u043a\u0446\u0438\u044f": [109, 121, 123], "\u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435": 109, "\u043c\u0430\u0441\u043a\u0438": 109, "\u0446\u0435\u043d\u0437\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f": 109, "\u043e\u0442\u0431\u043e\u0440": 109, "\u0442\u043e\u0447\u0435\u043a": 109, "\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u044b": [109, 110], "\u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e": 109, "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f": 109, "\u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435": 109, "\u0441\u043b\u0438\u0448\u043a\u043e\u043c": 109, "\u0431\u043e\u043b\u044c\u0448\u043e\u0439": 109, "\u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0438\u0442\u044c": 109, "\u0432\u0435\u0440\u0442\u0438\u043a\u0430\u043b\u044c\u043d\u043e": 109, "\u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c": 109, "\u0432\u0437\u0432\u0435\u0448\u0435\u043d\u043d\u044b\u0439": 109, "\u0432\u0430\u0440\u0438\u0430\u043d\u0442": 109, "\u043e\u0431\u0443\u0447\u0430\u0442\u044c": 110, "\u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c": 110, "\u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u043e\u0432": 110, "\u043d\u0430\u0437\u044b\u0432\u0430\u0435\u043c\u044b\u0445": [110, 118], "\u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044f\u043c\u0438": 110, "\u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u0435": 110, "\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f": 110, "\u043e\u0431\u044a\u044f\u0441\u043d\u0438\u043c": 110, "\u0441\u0435\u043c\u0430\u043d\u0442\u0438\u043a\u0443": 110, "\u043f\u043e\u043a\u0430\u0436\u0435\u043c": 110, "\u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c": 110, "\u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435": 110, "\u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0439": 110, "\u043f\u0440\u043e\u0441\u0442\u043e\u0439": [110, 114, 121], "\u0432\u044b\u0432\u043e\u0434\u0430": 110, "\u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e": 110, "\u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442": 110, "\u043f\u0440\u043e\u0445\u043e\u0434\u0438\u0442": 110, "\u043e\u0431\u0440\u0430\u0442\u043d\u043e\u043c": 110, "\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0438": 110, "\u0441\u043a\u0430\u0437\u0430\u043d\u043e": 110, "\u0431\u0430\u0437\u043e\u0432\u043e\u043c": 110, "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f": [110, 120, 123, 124], "\u043d\u043e\u0432\u044b\u0439": 110, "\u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440": 110, "\u0441\u0430\u043c\u044b\u0439": [110, 121], "\u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e": 110, "\u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u043c": [110, 112, 114, 122], "\u0441\u043e\u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f": 110, "\u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c": 110, "\u0445\u043e\u0440\u043e\u0448\u043e": [110, 118], "\u043f\u043e\u043d\u0438\u043c\u0430\u0442\u044c": 110, "\u0435\u043c\u0443": 110, "\u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e": [110, 118], "\u043e\u0431\u0443\u0447\u0430\u0435\u0442\u0441\u044f": 110, "\u0447\u0435\u0433\u043e": [110, 121, 123], "\u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f": 110, "\u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435": 110, "\u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0445": 110, "\u0435\u0449\u0435": [110, 123], "\u043e\u0431\u0440\u0430\u0442\u0438\u043c": 110, "\u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b": [110, 114], "\u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u044e\u0442": 110, "\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435": 110, "\u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435": 110, "\u0430\u0442\u0440\u0438\u0431\u0443\u0442\u044b": [110, 121], "\u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u044f": 110, "\u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442\u0435": 110, "\u0436\u0435\u0441\u0442\u043a\u0438\u0435": 110, "\u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f": 110, "\u0432\u0445\u043e\u0434\u043d\u044b\u043c": [110, 118], "\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c": 110, "\u0443\u043a\u0430\u0436\u0435\u0442\u0435": 110, "\u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c": 110, "\u044d\u0442\u0438": 110, "\u043a\u043b\u044e\u0447\u0438": 110, "\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0442": 110, "\u0443\u0442\u043e\u0447\u043d\u0438\u043c": 110, "\u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c": [110, 113], "\u043d\u0430\u0440\u0443\u0448\u0438\u0442\u044c": 110, "\u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u0435": 110, "\u0432\u0445\u043e\u0434\u0430\u043c": 110, "\u0431\u044b": [110, 114], "\u0443\u043a\u0430\u0437\u0430\u043b\u0438": 110, "\u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435": 110, "\u0432\u043e\u0437\u0431\u0443\u0436\u0434\u0435\u043d\u043e": 110, "\u0434\u0430\u0436\u0435": 110, "\u043a\u0440\u043e\u043c\u0435": [110, 118], "\u0432\u0445\u043e\u0434\u043d\u043e\u043c": 110, "\u0441\u043b\u043e\u0432\u0430\u0440\u0435": [110, 123], "\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439": 110, "\u043e\u0431\u0441\u0443\u0434\u0438\u0442\u044c": [110, 123], "\u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b": 110, "\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0439": 110, "\u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438": 110, "\u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f": 110, "\u0432\u0438\u0434\u043d\u043e": 110, "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0439": 110, "\u043f\u043e\u043b\u0438\u0442\u0438\u043a\u0443": 110, "\u0441\u0432\u043e\u0438": 110, "\u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435": 110, "\u043d\u0430\u0441\u043b\u0435\u0434\u043d\u0438\u043a\u0438": 110, "\u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e": 110, "\u043d\u0435\u043a\u043e\u0442\u043e\u0440\u0443\u044e": 110, "\u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e": 110, "\u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u043c": 110, "\u043d\u0438\u0436\u0435": [110, 122, 124], "\u0438\u0437\u043c\u0435\u0440\u044f\u0442\u044c": 110, "\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e": 110, "\u043c\u043d\u043e\u0433\u043e\u0437\u0435\u0440\u043d\u0438\u0441\u0442\u043e\u0435": [111, 118], "\u0441\u043a\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435": [111, 118], "\u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f": 111, "\u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439": [111, 118], "\u0443\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u0435\u0442\u0441\u044f": 111, "\u043c\u043d\u043e\u0433\u043e\u0437\u0435\u0440\u043d\u0438\u0441\u0442\u044b\u043c": 111, "\u0441\u043a\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c": 111, "\u0441\u0440\u0430\u0432\u043d\u0438\u043c": [111, 113], "\u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0443": 111, "\u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439": [111, 123], "\u0441\u0432\u0435\u0440\u0442\u043e\u0447\u043d\u044b\u043c\u0438": 111, "\u043d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u044f\u043c\u0438": 111, "\u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u043e\u043d\u043d\u044b\u0439": 112, "\u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438": [112, 114], "\u0441\u043e\u0441\u0442\u043e\u044f\u0442\u044c": 112, "\u0434\u0432\u0443\u0445": [112, 123], "\u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043d\u043e\u0433\u043e": 112, "\u0431\u0443\u0441\u0442\u0438\u043d\u0433\u0430": 112, "\u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e": 112, "\u043e\u0431\u0435\u0440\u0442\u043a\u0438": 112, "\u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0435\u043c": 112, "\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f": [112, 121, 122], "\u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u0435\u0439": [112, 122, 123], "\u043d\u0430\u0448\u0435\u0433\u043e": [112, 122, 123], "\u0432\u044b\u0432\u043e\u0434": [112, 123], "\u0438\u043d\u043e\u0433\u0434\u0430": 113, "\u043e\u0434\u043d\u043e\u043c": 113, "\u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u0435": 113, "\u0434\u0440\u0443\u0433\u043e\u043c": 113, "\u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442": [113, 114], "\u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432": [113, 123], "\u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0443\u0435\u043c\u044b\u043c": 113, "\u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b": 113, "\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f": 113, "\u043f\u043e\u043b\u044f": 113, "__dict__": [113, 115], "\u0432\u0430\u0448\u0435\u0433\u043e": 113, "\u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0443\u0435\u043c\u044b": 113, "\u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c": 113, "\u043c\u0435\u0442\u043e\u0434\u0430\u0445": 113, "\u043e\u0431\u043e\u043b\u043e\u0447\u043a\u0430": 113, "\u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438": [113, 119, 123], "\u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c": [113, 123], "\u043f\u0435\u0440\u0435\u0434\u0430\u0434\u0438\u0442\u0435": 113, "\u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439": 113, "\u0432\u0430\u0436\u043d\u043e": 113, "\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442": 113, "\u043c\u0435\u0442\u0430\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e": 113, "\u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438": 113, "\u043f\u0440\u0435\u043e\u0434\u043e\u043b\u0435\u0442\u044c": 113, "\u0442\u0440\u0443\u0434\u043d\u043e\u0441\u0442\u0438": 113, "\u0434\u0435\u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0435\u0439": 113, "\u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0443\u0435\u043c": 113, "\u0441\u043e\u0437\u0434\u0430\u043d\u043d\u0443\u044e": 113, "\u0434\u0435\u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438": 113, "\u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u043e\u043c": 113, "\u0441\u043e\u0445\u0440\u0430\u043d\u0438\u043c": 113, "\u043f\u0430\u0439\u043f\u043b\u0430\u0439\u043d": [113, 114], "\u0444\u0430\u0439\u043b": 113, "zip_seri": [113, 115], "\u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c": 113, "\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430": 113, "\u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0430\u0441\u044c": 113, "\u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c": [113, 121], "\u0442\u0435\u0441\u0442": 113, "\u043e\u0431\u0443\u0447\u0435\u043d\u043d\u044b\u043c": 113, "\u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c": 113, "joblib_seri": [113, 115], "gz": [113, 115], "pipeline_copi": [113, 115], "exec_1": [113, 115], "exec_2": [113, 115], "res_1": [113, 115], "res_2": [113, 115], "l1": [113, 115], "ab": [113, 115], "\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442": 114, "\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435": 114, "\u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e": 114, "\u0445\u043e\u0442\u0435\u043b\u0438": 114, "\u0430\u0434\u0430\u043f\u0442\u0435\u0440": 114, "\u043c\u0435\u0436\u0434\u0443": [114, 123], "\u043a\u043e\u043d\u0432\u0435\u0439\u0435\u0440\u043e\u043c": 114, "\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043b\u0438": 114, "\u043a\u043b\u0430\u0441\u0441\u044b": 114, "\u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438": 114, "\u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u0443\u044e": 114, "load_iri": [114, 116], "confusionmatrixdisplai": [114, 116], "\u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u0446\u0438\u0440\u0443\u044e\u0449\u0438\u0439": 114, "\u043d\u0430\u0440\u0438\u0441\u043e\u0432\u0430\u0442\u044c": 114, "\u043c\u0430\u0442\u0440\u0438\u0446\u0443": 114, "\u043e\u0448\u0438\u0431\u043e\u043a": 114, "confus": [114, 116], "\u0437\u043d\u0430\u0435\u043c": 114, "\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c": 114, "\u043e\u0431\u0435\u0440\u043d\u0435\u043c": 114, "\u0441\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u0442": 114, "sample_weigth": [114, 116], "\u043c\u0435\u0442\u043e\u0434\u0430": [114, 123], "\u043e\u0434\u043d\u043e\u0438\u043c\u0435\u043d\u043d\u044b\u043c\u0438": 114, "\u0432\u0445\u043e\u0434\u0430\u043c\u0438": 114, "\u043e\u0436\u0438\u0434\u0430\u0435\u0442\u0441\u044f": 114, "\u0443\u043a\u0430\u0437\u0430\u0442\u044c": 114, "\u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435": 114, "\u0442\u0440\u0435\u0431\u0443\u0435\u043c\u044b\u0445": 114, "\u043d\u0430\u0448\u0438": 114, "sklearn_model": [114, 116], "iri": [114, 116], "target_nam": [114, 116], "from_estim": [114, 116], "display_label": [114, 116], "cmap": [114, 116], "green": [114, 116], "lt": [114, 116], "_plot": [114, 116], "confusion_matrix": [114, 116], "0x7f62dae33d60": [114, 116], "gt": [114, 116], "serializ": 115, "thing": 115, "overcom": 115, "deser": 115, "difficulti": 115, "remain": 115, "still": 115, "standart": 116, "scientist": 116, "suppos": 116, "associ": 116, "eponym": 116, "\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435": [117, 120, 122, 123], "\u043e\u0437\u043d\u0430\u043a\u043e\u043c\u043b\u0435\u043d\u0438\u044f": 117, "\u043e\u0441\u043d\u043e\u0432\u0430\u043c\u0438": 117, "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435": [117, 122, 123], "\u043f\u0440\u0438\u043c\u0435\u0440": [117, 120, 122, 123], "\u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438": [117, 122], "\u043e\u0441\u043d\u043e\u0432\u043d\u0430\u044f": 118, "\u0438\u0434\u0435\u044f": 118, "\u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f": 118, "\u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u0438": 118, "\u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445": 118, "\u0440\u0435\u0448\u0435\u043d\u0438\u0439": 118, "\u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442": 118, "\u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u043d\u044b\u0439": 118, "\u043c\u043e\u0434\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438": 118, "\u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c": 118, "\u0433\u043b\u0443\u0431\u043e\u043a\u043e\u043c\u0443": 118, "\u043b\u0435\u0441\u0443": 118, "\u0440\u0430\u0437\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u043d\u044b": 118, "\u0441\u0445\u0435\u043c\u044b": 118, "\u0432\u0437\u0432\u0435\u0448\u0438\u0432\u0430\u043d\u0438\u044f": 118, "\u0446\u0435\u043d\u0437\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435": 118, "\u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445": 118, "\u0443\u0447\u0435\u0442\u043e\u043c": 118, "\u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u0439": 118, "\u0433\u0438\u0431\u043a\u043e\u0441\u0442\u0438": 118, "\u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b": 118, "\u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b": 118, "\u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u043c": 118, "\u0438\u0434\u0435\u0438": 118, "\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u044b": 118, "\u0432\u0432\u0435\u0434\u0435\u043d\u0438\u044f": [118, 121], "\u043d\u043e\u0432\u044b\u0445": [118, 123], "\u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u044b": 118, "\u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u044b": 118, "\u043b\u0443\u0447\u0448\u0435": 118, "\u043f\u043e\u043d\u044f\u0442\u044c": 118, "\u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0443": 118, "\u043e\u0437\u043d\u0430\u043a\u043e\u043c\u0438\u0442\u044c\u0441\u044f": [118, 120], "\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c\u0438": 118, "\u0441\u0442\u0430\u0442\u044c\u044f\u043c\u0438": 118, "\u0431\u0430\u0437\u043e\u0432\u044b\u0439": [118, 123], "\u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044f": 118, "\u0440\u0435\u0433\u0440\u0435\u0441\u0441\u043e\u0440\u043e\u0432": 118, "\u044d\u0442\u0430": [119, 123], "\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430": 119, "\u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435": 119, "\u043f\u0440\u0438\u043a\u043b\u0430\u0434\u043d\u043e\u0433\u043e": 119, "\u0441\u043e\u0437\u0434\u0430\u043d\u043e": 119, "\u0441\u0441\u044b\u043b\u043a\u0438": [120, 122], "\u0431\u043e\u043b\u044c\u0448\u0438\u043c": 120, "\u043f\u043e\u044f\u0441\u043d\u0435\u043d\u0438\u0439": 120, "\u0441\u043d\u0430\u0447\u0430\u043b\u0430": 120, "\u0432\u0432\u043e\u0434\u043d\u043e\u0439": 120, "\u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0435\u0439": 120, "\u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0438\u043c": 120, "\u043e\u0437\u043d\u0430\u043a\u043e\u043c\u043b\u0435\u043d\u0438\u0435\u043c": 120, "\u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u043c": 120, "\u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e": [120, 122], "\u043f\u0440\u0438\u043d\u044f\u0442\u044c": 121, "\u0443\u0447\u0430\u0441\u0442\u0438\u0435": 121, "\u0440\u0430\u0437\u0432\u0438\u0442\u0438\u0438": 121, "\u0441\u0434\u0435\u043b\u0430\u0442\u044c": 121, "\u0432\u0435\u0449\u0435\u0439": 121, "\u043d\u043e\u0432\u043e\u0439": 121, "\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438": 121, "\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439": 121, "\u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0438\u0442\u044c": 121, "\u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435": 121, "\u0431\u0430\u0433\u0430": 121, "\u043e\u0448\u0438\u0431\u043a\u0438": 121, "\u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u0435": 121, "\u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c": 121, "\u043e\u0446\u0435\u043d\u043a\u0443": 121, "\u043e\u0442\u043a\u0440\u044b\u0442\u044b\u043c": 121, "\u0430\u043c": 121, "\u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439": [121, 124], "\u0440\u0430\u0441\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f": 121, "\u043a\u043e\u043c\u0430\u043d\u0434\u0430": 121, "\u0441\u0438\u0441\u0442\u0435\u043c\u0443": 121, "\u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f": 121, "\u0432\u0435\u0440\u0441\u0438\u0439": 121, "\u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0438\u0442\u0430\u0435\u043c\u044b\u0439": 121, "\u0432\u043d\u0435\u0441\u0435\u043d\u0438\u044f": 121, "\u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0433\u043e": 121, "\u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f": 121, "\u0432\u0435\u0442\u043a\u0438": 121, "\u043f\u0440\u043e\u0432\u0435\u0441\u0442\u0438": 121, "\u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435": 121, "\u0440\u0430\u0431\u043e\u0442\u044b": 121, "\u0441\u0432\u043e\u0435\u0439": 121, "\u043a\u043e\u043f\u0438\u0438": 121, "\u0432\u043d\u0435\u0441\u0435\u043d\u043d\u044b\u0435": 121, "\u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f": [121, 124], "\u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0435": 121, "\u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435": 121, "\u043e\u0431\u0440\u0430\u0442\u0438\u0442\u044c\u0441\u044f": 121, "\u043d\u0430\u0448\u0435\u043c\u0443": 121, "\u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u0443": [121, 124], "\u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c": [121, 124], "\u043f\u0430\u043a\u0435\u0442": [121, 124], "\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430": 121, "\u0432\u0430\u0448": 121, "\u043e\u0434\u043e\u0431\u0440\u0438\u043b\u0438": 121, "\u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u044f\u0442\u044c": 121, "\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c": 121, "\u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f\u043c": 121, "\u043e\u0442\u043d\u043e\u0441\u044f\u0449\u0438\u0435\u0441\u044f": 121, "\u043e\u0434\u043d\u043e\u0439": 121, "\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0439": 121, "\u0435\u0434\u0438\u043d\u0438\u0446\u0435": 121, "\u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0442\u044c": 121, "\u0432\u0435\u0442\u043a\u0435": 121, "\u0432\u0435\u0442\u043a\u0430": 121, "\u0441\u0430\u043c\u043e\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e\u0439": 121, "\u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439": 121, "\u0432\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0439": 121, "\u0444\u0440\u0435\u043c\u0432\u043e\u0440\u043a": 121, "\u0444\u0443\u043d\u043a\u0446\u0438\u0435\u0439": 121, "\u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c": 121, "\u043d\u043e\u0432\u0443\u044e": 121, "\u0432\u0435\u0442\u043a\u0443": 121, "\u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0432": [121, 124], "\u0432\u0435\u0441\u044c": 121, "\u0441\u0442\u0438\u043b\u044e": 121, "\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f": 121, "\u044f\u0437\u044b\u043a\u0435": 121, "\u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e": 121, "\u0441\u0442\u0430\u0440\u0430\u0435\u0442\u0441\u044f": 121, "\u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u043e\u0432\u0430\u043b": 121, "\u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c": 121, "\u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435": 121, "\u043e\u043f\u0438\u0441\u0430\u043d\u043d\u043e\u043c\u0443": 121, "\u0437\u0430\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u044b": 121, "\u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0430": 121, "\u044f\u0437\u044b\u043a\u0430": 121, "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0432\u0443\u0435\u043c": 121, "\u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442": 121, "\u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f": 121, "\u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u043c\u044b\u0439": 121, "\u0432\u0441\u0435\u0433\u0434\u0430": [121, 123], "\u0441\u043e\u043f\u0440\u043e\u0432\u043e\u0436\u0434\u0430\u0442\u044c\u0441\u044f": 121, "\u044e\u043d\u0438\u0442": 121, "\u0442\u0435\u0441\u0442\u0430\u043c\u0438": 121, "\u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c\u0441\u044f": 121, "\u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438": 121, "\u043f\u043e\u043c\u043d\u0438\u0442\u0435": 121, "\u043b\u0438\u0446\u0435\u043d\u0437\u0438\u044e": 121, "\u0432\u0430\u043c\u0438": 121, "\u0435\u0439": 121, "\u0441\u0434\u0435\u043b\u0430\u0439\u0442\u0435": 121, "\u043a\u043e\u043c\u043c\u0438\u0442\u043e\u0432": 121, "\u043a\u043e\u043c\u043c\u0438\u0442": 121, "\u043e\u0442\u0432\u0435\u0447\u0430\u0442\u044c": 121, "\u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u043c": 121, "\u0432\u043d\u0435\u0441\u0435\u043d\u043d\u044b\u043c": 121, "\u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\u043c": 121, "\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f": 121, "\u0434\u0430\u043b\u0436\u043d\u044b": 121, "\u043a\u043e\u0440\u043e\u0442\u043a\u0438\u043c\u0438": 121, "\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0432\u043d\u044b\u043c\u0438": 121, "\u043a\u043e\u0433\u0434\u0430": 121, "\u0437\u0430\u043a\u043e\u043d\u0447\u0438\u0442\u0435": 121, "\u0440\u0430\u0431\u043e\u0442\u0443": 121, "\u043a\u043e\u0434\u043e\u043c": 121, "\u0441\u043e\u0437\u0434\u0430\u0439\u0442\u0435": 121, "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f": 121, "\u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f": 121, "\u043f\u0430\u043f\u043a\u0435": [121, 122], "\u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0430": 121, "\u0444\u0430\u0439\u043b\u044b": [121, 122], "\u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u044b": 121, "\u0441\u0431\u043e\u0440\u043a\u043e\u0439": 121, "\u0443\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c": [121, 124], "\u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u044b": 121, "\u043f\u0430\u043a\u0435\u0442\u044b": 121, "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435": [121, 122], "\u0431\u043b\u043e\u043a\u043d\u043e\u0442\u044b": 121, "\u0438\u043b\u043b\u044e\u0441\u0442\u0440\u0430\u0446\u0438\u0438": 121, "\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0433\u043e": 121, "\u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433\u0430": 121, "\u0443\u0442\u0438\u043b\u0438\u0442\u0443": 121, "\u0441\u043e\u0431\u0440\u0430\u0442\u044c": 121, "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e": 121, "\u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435": 121, "\u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435": 122, "\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f\u043c\u0438": 122, "\u0438\u043b\u043b\u044e\u0441\u0442\u0440\u0430\u0446\u0438\u044f\u043c\u0438": 122, "\u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438": 122, "\u043a\u0440\u0430\u0442\u043a\u0438\u0439": 122, "\u0441\u0430\u043c\u043e\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u044b\u0439": 122, "\u0441\u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c": [122, 124], "\u043b\u043e\u043a\u0430\u043b\u044c\u043d\u0443\u044e": 122, "\u043c\u0430\u0448\u0438\u043d\u0443": 122, "\u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438": [122, 123, 124], "\u043e\u0431\u0435\u0440\u0442\u043e\u043a": [122, 123], "\u0441\u0442\u0438\u043b\u0435": 122, "\u0437\u0430\u0434\u0430\u043d\u0438\u044f": 122, "\u0437\u0435\u0440\u043d\u043e": 122, "\u0440\u0430\u0441\u0447\u0435\u0442": 122, "\u0431\u0430\u0437\u043e\u0432\u0430\u044f": 122, "\u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440": 122, "\u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f": 122, "\u043f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0435": 122, "\u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u0438": 123, "\u0443\u0437\u0435\u043b": 123, "\u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e": 123, "\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b": 123, "\u043e\u0431\u0443\u0447\u0435\u043d": 123, "\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e": 123, "\u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f": 123, "\u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u0430\u044f": 123, "\u0444\u043e\u0440\u043c\u0435": 123, "\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0433\u043e": 123, "\u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u043e\u043c": 123, "\u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f": 123, "\u0441\u0432\u044f\u0437\u0435\u0439": 123, "\u0441\u043b\u043e\u0442\u0430\u043c\u0438": 123, "\u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442": 123, "\u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u0435\u0442": 123, "\u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442": 123, "\u0438\u0441\u0445\u043e\u0434\u044f": 123, "\u043f\u043e\u0434\u0430\u043d\u043d\u044b\u0445": 123, "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d": 123, "\u043e\u0431\u0443\u0447\u0435\u043d\u043d\u043e\u0439": 123, "\u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u043c": 123, "\u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435": 123, "\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043e": 123, "\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f": 123, "\u043f\u0440\u043e\u0447\u0438\u0435": 123, "\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b": 123, "\u043c\u0435\u0442\u0430\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f": 123, "\u043e\u0431\u0449\u0435\u0439": 123, "\u043e\u0434\u043d\u043e\u0433\u043e": 123, "\u0442\u0438\u043f\u0430": 123, "\u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f": 123, "\u043a\u043b\u0430\u0441\u0441\u043e\u043c": 123, "\u0441\u043e\u0431\u043e\u0439": 123, "\u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442": 123, "\u043e\u043f\u0438\u0441\u0430\u043d\u043d\u043e\u0439": 123, "\u043e\u0442\u043b\u0438\u0447\u0438\u0435": 123, "\u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b": 123, "\u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430": 123, "\u0432\u044b\u0447\u0438\u0441\u043b\u044f\u044e\u0442\u0441\u044f": 123, "\u043a\u0430\u043a\u0438\u043c": 123, "\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435": 123, "\u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u0441\u044f": 123, "\u043f\u043e\u0434\u043c\u043e\u0434\u0443\u043b\u0435": 123, "\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f": 123, "\u043d\u0430\u0431\u043e\u0440\u043e\u043c": 123, "\u0443\u0437\u043b\u043e\u0432": 123, "\u0441\u0432\u044f\u0437\u044f\u043c\u0438": 123, "\u043d\u0438\u043c\u0438": 123, "\u0442\u0440\u0438": 123, "\u0441\u043f\u043e\u0441\u043e\u0431\u0430": 123, "\u0437\u0430\u0434\u0430\u0432": 123, "\u0441\u0442\u0440\u043e\u044f": 123, "\u0437\u0430\u0440\u0430\u043d\u0435\u0435": 123, "\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043e\u0439": 123, "\u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e": 123, "\u043b\u0438\u0448\u044c": 123, "\u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435": 123, "\u0431\u043e\u043b\u0435\u0435": 123, "\u0443\u0434\u043e\u0431\u043d\u044b": 123, "\u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0438\u0442\u0435\u043b\u044c\u043d\u044b": 123, "\u0441\u043e\u0437\u0434\u0430\u043d": 123, "\u0440\u0443\u0447\u043d\u043e\u043c": 123, "\u043b\u044e\u0431\u043e\u0439": 123, "\u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438": 123, "\u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0439": 123, "\u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0445": 123, "\u043f\u0435\u0440\u0432\u043e\u0433\u043e": 123, "\u043a\u043e\u043d\u043a\u0430\u0442\u0435\u043d\u0430\u0446\u0438\u044f": 123, "\u0432\u0442\u043e\u0440\u043e\u0433\u043e": 123, "\u0444\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0439": 123, "\u0432\u044b\u0445\u043e\u0434\u0430": 123, "\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435": 123, "\u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c": 123, "\u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f": 123, "\u043d\u0430\u0431\u043e\u0440": 123, "\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432": 123, "\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439": 123, "\u0433\u043b\u0443\u0431\u0438\u043d\u043e\u0439": 123, "\u0442\u0438\u043f\u043e\u0432": 123, "\u043a\u0430\u0436\u0434\u043e\u043c": 123, "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f": [123, 124], "\u043a\u0440\u043e\u0441\u0441": 123, "\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f": 123, "\u0444\u043e\u043b\u0434\u0430\u043c\u0438": 123, "\u043e\u0441\u043d\u043e\u0432\u044b\u0432\u0430\u044f\u0441\u044c": 123, "\u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c": 123, "\u0432\u0435\u0434\u0435\u0442": 123, "\u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d": 123, "\u0441\u043b\u043e\u0432\u0430\u0440\u044e": 123, "\u0432\u0445\u043e\u0434\u043d\u044b\u043c\u0438": 123, "\u0434\u0430\u043d\u043d\u044b\u043c\u0438": 123, "\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439": 123, "\u043e\u0431\u0435\u0440\u043d\u0443\u0442\u044b\u0435": 123, "\u043c\u0430\u0441\u0441\u0438\u0432\u044b": 123, "\u0432\u044b\u0437\u0432\u0430\u0442\u044c": 123, "\u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0435\u043c": 123, "\u043d\u0430\u0439\u0434\u0435\u043d\u043e": 123, "\u043f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430": 124, "\u0432\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u043e": 124, "\u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0439\u0442\u0435": 124, "\u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044e": 124, "\u0437\u0430\u0432\u0438\u0441\u0438\u0442": 124, "\u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438": 124, "\u043a\u043e\u0442\u043e\u0440\u0430\u044f": 124, "\u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0430": 124, "\u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u043c": 124, "\u0441\u043e\u0437\u0434\u0430\u043b\u0438": 124, "\u0438\u0437\u043e\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435": 124, "\u0432\u0435\u0440\u0441\u0438\u0438": 124, "\u0430\u043a\u0442\u0438\u0432\u0438\u0440\u043e\u0432\u0430\u0442\u044c": 124, "\u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0438": 124, "\u043f\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435": 124, "\u0442\u0440\u0438\u0432\u0438\u0430\u043b\u044c\u043d\u0430": 124, "\u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e": 124, "\u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u044f\u0435\u0442\u0441\u044f": 124, "\u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u044e": 124, "\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c": 124, "\u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u043e\u0439": 124, "\u0432\u0430\u0448\u0435\u0439": 124, "\u0441\u0438\u0441\u0442\u0435\u043c\u0435": 124, "\u043d\u0435\u0442": 124, "\u0432\u0435\u0440\u0441\u0438\u044e": 124, "\u043e\u0431\u0440\u0430\u0442\u0438\u0442\u0435\u0441\u044c": 124, "\u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439": 124, "\u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438": 124, "\u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435": 124, "\u043a\u043e\u043c\u0430\u043d\u0434\u0443": 124, "\u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e": 124, "\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438": 124, "\u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c": 124, "\u0434\u0440\u0430\u0439\u0432\u0435\u0440": 124, "\u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438": 124, "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435": 124, "\u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0438\u0432\u0430\u043b\u0438": 124, "\u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u043e\u0432\u0430\u0442\u044c": 124, "\u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u0430": 124, "\u043f\u0440\u0435\u0434\u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u0430\u044f": 124, "\u043a\u043e\u043f\u0438\u044f": 124, "\u043f\u043e\u0432\u0435\u0440\u0445": 124, "\u043d\u0435\u0435": 124, "\u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e": 124, "\u043f\u043b\u0430\u043d\u0438\u0440\u0443\u0435\u0442\u0435": 124, "\u0432\u043d\u043e\u0441\u0438\u0442\u044c": 124, "\u0443\u0434\u043e\u0431\u043d\u0435\u0435": 124, "\u0441\u0430\u043c": 124, "\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043b": 124, "\u0432\u043d\u043e\u0441\u0438\u043c\u044b\u0435": 124, "\u0437\u0430\u043f\u0443\u0441\u043a\u0435": 124}, "objects": {"": [[65, 0, 0, "-", "bosk"]], "bosk": [[65, 1, 1, "", "BaseData"], [65, 1, 1, "", "BaseSlot"], [65, 1, 1, "", "CPUData"], [65, 1, 1, "", "GPUData"], [65, 1, 1, "", "Stage"], [65, 1, 1, "", "Stages"], [5, 0, 0, "-", "auto"], [12, 0, 0, "-", "block"], [48, 0, 0, "-", "comparison"], [50, 0, 0, "-", "data"], [51, 0, 0, "-", "exceptions"], [54, 0, 0, "-", "executor"], [65, 6, 1, "", "get_rand_int"], [65, 6, 1, "", "get_random_generator"], [68, 0, 0, "-", "painter"], [79, 0, 0, "-", "pipeline"], [86, 0, 0, "-", "stages"], [65, 6, 1, "", "timer_wrap"], [87, 0, 0, "-", "utility"], [90, 0, 0, "-", "visitor"]], "bosk.BaseData": [[65, 2, 1, "", "__repr__"], [65, 3, 1, "", "data"], [65, 2, 1, "", "to_cpu"], [65, 2, 1, "", "to_gpu"]], "bosk.BaseSlot": [[65, 2, 1, "", "__hash__"], [65, 2, 1, "", "__repr__"], [65, 3, 1, "id0", "debug_info"], [65, 3, 1, "", "meta"], [65, 3, 1, "", "name"], [65, 3, 1, "", "parent_block"], [65, 3, 1, "", "stages"]], "bosk.CPUData": [[65, 3, 1, "", "data"]], "bosk.GPUData": [[65, 3, 1, "", "data"], [65, 2, 1, "", "to_cpu"]], "bosk.Stage": [[65, 3, 1, "", "FIT"], [65, 3, 1, "", "TRANSFORM"]], "bosk.Stages": [[65, 3, 1, "id1", "fit"], [65, 3, 1, "id2", "transform"], [65, 3, 1, "id3", "transform_on_fit"]], "bosk.auto": [[5, 1, 1, "", "BaseAutoDeepForestConstructor"], [5, 1, 1, "", "ClassicalDeepForestConstructor"], [5, 1, 1, "", "EarlyStoppingCV"], [5, 1, 1, "", "EarlyStoppingVal"], [5, 1, 1, "", "HyperparamSearchDeepForestConstructor"], [5, 1, 1, "", "MGSDeepForestConstructor"], [5, 1, 1, "", "MetricsEvaluator"], [2, 0, 0, "-", "builders"], [3, 0, 0, "-", "deep_forest"], [4, 0, 0, "-", "growing_strategies"], [6, 0, 0, "-", "layers"], [7, 0, 0, "-", "metrics"], [8, 0, 0, "-", "validation"]], "bosk.auto.BaseAutoDeepForestConstructor": [[5, 2, 1, "", "construct"], [5, 2, 1, "", "make_step_layer"], [5, 4, 1, "", "n_steps"]], "bosk.auto.ClassicalDeepForestConstructor": [[5, 3, 1, "", "LAYER_CLS"], [5, 2, 1, "", "make_step_layer"], [5, 3, 1, "", "n_steps"], [5, 3, 1, "", "rf_params"]], "bosk.auto.EarlyStoppingCV": [[5, 2, 1, "", "need_grow"], [5, 2, 1, "", "trim"]], "bosk.auto.EarlyStoppingVal": [[5, 2, 1, "", "need_grow"], [5, 2, 1, "", "trim"]], "bosk.auto.HyperparamSearchDeepForestConstructor": [[5, 3, 1, "", "LAYER_CLS"], [5, 2, 1, "", "make_step_layer"], [5, 3, 1, "", "n_steps"], [5, 3, 1, "", "rf_param_grid"]], "bosk.auto.MGSDeepForestConstructor": [[5, 3, 1, "", "MGS_LAYER_CLS"], [5, 3, 1, "", "STACKING_LAYER_CLS"], [5, 2, 1, "", "make_step_layer"], [5, 3, 1, "", "n_steps"], [5, 3, 1, "", "rf_params"]], "bosk.auto.MetricsEvaluator": [[5, 2, 1, "", "append_eval"], [5, 2, 1, "", "average"], [5, 3, 1, "", "names"], [5, 3, 1, "", "results"]], "bosk.auto.builders": [[2, 1, 1, "", "SequentialPipelineBuilder"]], "bosk.auto.builders.SequentialPipelineBuilder": [[2, 2, 1, "", "_log_metrics"], [2, 2, 1, "", "append"], [2, 3, 1, "", "base_input_names"], [2, 2, 1, "", "build"], [2, 3, 1, "", "history"], [2, 3, 1, "", "pipelines"]], "bosk.auto.deep_forest": [[3, 1, 1, "", "BaseAutoDeepForestConstructor"], [3, 1, 1, "", "ClassicalDeepForestConstructor"], [3, 5, 1, "", "DEFAULT_EXECUTOR_CLS"], [3, 6, 1, "", "DEFAULT_MAKE_METRICS"], [3, 1, 1, "", "HyperparamSearchDeepForestConstructor"], [3, 1, 1, "", "MGSDeepForestConstructor"], [3, 6, 1, "", "_make_base_df_blocks"]], "bosk.auto.deep_forest.BaseAutoDeepForestConstructor": [[3, 2, 1, "", "construct"], [3, 2, 1, "", "make_step_layer"], [3, 4, 1, "", "n_steps"]], "bosk.auto.deep_forest.ClassicalDeepForestConstructor": [[3, 3, 1, "", "LAYER_CLS"], [3, 2, 1, "", "make_step_layer"], [3, 3, 1, "", "n_steps"], [3, 3, 1, "", "rf_params"]], "bosk.auto.deep_forest.HyperparamSearchDeepForestConstructor": [[3, 3, 1, "", "LAYER_CLS"], [3, 2, 1, "", "make_step_layer"], [3, 3, 1, "", "n_steps"], [3, 3, 1, "", "rf_param_grid"]], "bosk.auto.deep_forest.MGSDeepForestConstructor": [[3, 3, 1, "", "MGS_LAYER_CLS"], [3, 3, 1, "", "STACKING_LAYER_CLS"], [3, 2, 1, "", "make_step_layer"], [3, 3, 1, "", "n_steps"], [3, 3, 1, "", "rf_params"]], "bosk.auto.growing_strategies": [[4, 1, 1, "", "DefaultGrowingStrategy"], [4, 1, 1, "", "EarlyStoppingCV"], [4, 1, 1, "", "EarlyStoppingVal"], [4, 1, 1, "", "GrowingStrategy"]], "bosk.auto.growing_strategies.DefaultGrowingStrategy": [[4, 2, 1, "", "need_grow"]], "bosk.auto.growing_strategies.EarlyStoppingCV": [[4, 2, 1, "", "need_grow"], [4, 2, 1, "", "trim"]], "bosk.auto.growing_strategies.EarlyStoppingVal": [[4, 2, 1, "", "need_grow"], [4, 2, 1, "", "trim"]], "bosk.auto.growing_strategies.GrowingStrategy": [[4, 2, 1, "", "need_grow"], [4, 2, 1, "", "trim"]], "bosk.auto.layers": [[6, 1, 1, "", "ForestsLayer"], [6, 1, 1, "", "Layer"], [6, 1, 1, "", "MGSLayer"], [6, 1, 1, "", "MGSRFLayer"], [6, 1, 1, "", "NativeStackingLayer"], [6, 1, 1, "", "StackingLayer"]], "bosk.auto.layers.ForestsLayer": [[6, 2, 1, "", "fit"], [6, 3, 1, "", "inputs"]], "bosk.auto.layers.Layer": [[6, 2, 1, "", "calc_metrics"], [6, 2, 1, "", "fit"], [6, 4, 1, "", "inputs"]], "bosk.auto.layers.MGSLayer": [[6, 2, 1, "", "fit"], [6, 3, 1, "", "inputs"]], "bosk.auto.layers.MGSRFLayer": [[6, 2, 1, "", "fit"], [6, 3, 1, "", "inputs"]], "bosk.auto.layers.NativeStackingLayer": [[6, 2, 1, "", "fit"], [6, 3, 1, "", "inputs"]], "bosk.auto.layers.StackingLayer": [[6, 2, 1, "", "__custom_cross_validate"], [6, 2, 1, "", "_make_fitter"], [6, 2, 1, "", "fit"], [6, 3, 1, "", "inputs"]], "bosk.auto.metrics": [[7, 1, 1, "", "MetricsEvaluator"], [7, 5, 1, "", "MetricsResults"]], "bosk.auto.metrics.MetricsEvaluator": [[7, 2, 1, "", "append_eval"], [7, 2, 1, "", "average"], [7, 3, 1, "", "names"], [7, 3, 1, "", "results"]], "bosk.auto.validation": [[8, 1, 1, "", "BasePipelineModelValidator"], [8, 1, 1, "", "CVPipelineModelValidator"], [8, 1, 1, "", "DumbPipelineModelValidator"], [8, 1, 1, "", "TrainSetPipelineModelValidator"]], "bosk.auto.validation.BasePipelineModelValidator": [[8, 2, 1, "", "calc_metrics"], [8, 4, 1, "", "need_refit"]], "bosk.auto.validation.CVPipelineModelValidator": [[8, 2, 1, "", "calc_metrics"], [8, 3, 1, "", "need_refit"]], "bosk.auto.validation.DumbPipelineModelValidator": [[8, 2, 1, "", "calc_metrics"], [8, 3, 1, "", "need_refit"]], "bosk.auto.validation.TrainSetPipelineModelValidator": [[8, 2, 1, "", "calc_metrics"], [8, 3, 1, "", "need_refit"]], "bosk.block": [[12, 1, 1, "", "BaseBlock"], [12, 1, 1, "", "BaseInputBlock"], [12, 1, 1, "", "BaseOutputBlock"], [12, 1, 1, "", "BaseSlot"], [12, 1, 1, "", "BaseSlotMeta"], [12, 1, 1, "", "BlockGroup"], [12, 5, 1, "", "BlockInputData"], [12, 1, 1, "", "BlockInputSlot"], [12, 1, 1, "", "BlockMeta"], [12, 5, 1, "", "BlockOutputData"], [12, 1, 1, "", "BlockOutputSlot"], [12, 1, 1, "", "InputSlotMeta"], [12, 1, 1, "", "OutputSlotMeta"], [12, 5, 1, "", "SlotT"], [12, 5, 1, "", "TransformOutputData"], [9, 0, 0, "-", "auto"], [12, 6, 1, "", "auto_block"], [10, 0, 0, "-", "base"], [11, 0, 0, "-", "functional"], [13, 0, 0, "-", "meta"], [15, 0, 0, "-", "repo"], [22, 0, 0, "-", "zoo"]], "bosk.block.BaseBlock": [[12, 2, 1, "", "__repr__"], [12, 2, 1, "", "_make_slots"], [12, 2, 1, "", "accept"], [12, 4, 1, "", "default_output"], [12, 2, 1, "", "fit"], [12, 2, 1, "", "get_default_output"], [12, 4, 1, "id0", "meta"], [12, 2, 1, "", "set_random_state"], [12, 3, 1, "", "slots"], [12, 2, 1, "", "transform"], [12, 2, 1, "", "wrap"]], "bosk.block.BaseInputBlock": [[12, 2, 1, "", "_make_slots"], [12, 2, 1, "", "get_single_input"], [12, 4, 1, "", "name"]], "bosk.block.BaseOutputBlock": [[12, 2, 1, "", "_make_slots"], [12, 2, 1, "", "get_single_output"], [12, 4, 1, "", "name"]], "bosk.block.BaseSlot": [[12, 2, 1, "", "__hash__"], [12, 2, 1, "", "__repr__"], [12, 3, 1, "id1", "debug_info"], [12, 3, 1, "", "meta"], [12, 3, 1, "", "name"], [12, 3, 1, "", "parent_block"], [12, 3, 1, "", "stages"]], "bosk.block.BaseSlotMeta": [[12, 3, 1, "", "name"]], "bosk.block.BlockGroup": [[12, 2, 1, "", "__repr__"], [12, 2, 1, "", "add"], [12, 3, 1, "", "name"], [12, 2, 1, "", "remove"]], "bosk.block.BlockInputSlot": [[12, 3, 1, "", "meta"]], "bosk.block.BlockMeta": [[12, 3, 1, "", "execution_props"], [12, 3, 1, "", "inputs"], [12, 2, 1, "", "list_of_slots_meta_to_mapping"], [12, 3, 1, "", "outputs"]], "bosk.block.BlockOutputSlot": [[12, 3, 1, "", "meta"]], "bosk.block.InputSlotMeta": [[12, 3, 1, "", "stages"]], "bosk.block.auto": [[9, 1, 1, "", "FitTransformClass"], [9, 6, 1, "", "auto_block"]], "bosk.block.auto.FitTransformClass": [[9, 2, 1, "", "fit"], [9, 2, 1, "", "transform"]], "bosk.block.base": [[10, 1, 1, "", "BaseBlock"], [10, 1, 1, "", "BaseInputBlock"], [10, 1, 1, "", "BaseOutputBlock"], [10, 1, 1, "", "BaseSlot"], [10, 1, 1, "", "BlockGroup"], [10, 5, 1, "", "BlockInputData"], [10, 1, 1, "", "BlockInputSlot"], [10, 5, 1, "", "BlockOutputData"], [10, 1, 1, "", "BlockOutputSlot"], [10, 1, 1, "", "BlockSlots"], [10, 5, 1, "", "BlockT"], [10, 5, 1, "", "SlotMetaT"], [10, 5, 1, "", "SlotT"], [10, 5, 1, "", "TransformOutputData"]], "bosk.block.base.BaseBlock": [[10, 2, 1, "", "__repr__"], [10, 2, 1, "", "_make_slots"], [10, 2, 1, "", "accept"], [10, 4, 1, "", "default_output"], [10, 2, 1, "", "fit"], [10, 2, 1, "", "get_default_output"], [10, 4, 1, "id4", "meta"], [10, 2, 1, "", "set_random_state"], [10, 3, 1, "", "slots"], [10, 2, 1, "", "transform"], [10, 2, 1, "", "wrap"]], "bosk.block.base.BaseInputBlock": [[10, 2, 1, "", "_make_slots"], [10, 2, 1, "", "get_single_input"], [10, 4, 1, "", "name"]], "bosk.block.base.BaseOutputBlock": [[10, 2, 1, "", "_make_slots"], [10, 2, 1, "", "get_single_output"], [10, 4, 1, "", "name"]], "bosk.block.base.BaseSlot": [[10, 2, 1, "", "__hash__"], [10, 2, 1, "", "__repr__"], [10, 3, 1, "id0", "debug_info"], [10, 3, 1, "", "meta"], [10, 3, 1, "", "name"], [10, 3, 1, "", "parent_block"], [10, 3, 1, "", "stages"]], "bosk.block.base.BlockGroup": [[10, 2, 1, "", "__repr__"], [10, 2, 1, "", "add"], [10, 3, 1, "", "name"], [10, 2, 1, "", "remove"]], "bosk.block.base.BlockInputSlot": [[10, 3, 1, "", "meta"]], "bosk.block.base.BlockOutputSlot": [[10, 3, 1, "", "meta"]], "bosk.block.base.BlockSlots": [[10, 3, 1, "id3", "groups"], [10, 3, 1, "id1", "inputs"], [10, 3, 1, "id2", "outputs"]], "bosk.block.functional": [[11, 1, 1, "", "FunctionalBlockWrapper"]], "bosk.block.functional.FunctionalBlockWrapper": [[11, 2, 1, "", "__getitem__"], [11, 2, 1, "", "get_input_slot"], [11, 2, 1, "", "get_output_slot"]], "bosk.block.meta": [[13, 1, 1, "", "BaseSlotMeta"], [13, 1, 1, "", "BlockExecutionProperties"], [13, 1, 1, "", "BlockMeta"], [13, 1, 1, "", "DynamicBlockMetaStub"], [13, 1, 1, "", "InputSlotMeta"], [13, 1, 1, "", "OutputSlotMeta"], [13, 6, 1, "", "make_simple_meta"]], "bosk.block.meta.BaseSlotMeta": [[13, 3, 1, "", "name"]], "bosk.block.meta.BlockExecutionProperties": [[13, 3, 1, "", "cpu"], [13, 3, 1, "", "gpu"], [13, 3, 1, "", "plain"], [13, 3, 1, "", "threadsafe"]], "bosk.block.meta.BlockMeta": [[13, 3, 1, "", "execution_props"], [13, 3, 1, "", "inputs"], [13, 2, 1, "", "list_of_slots_meta_to_mapping"], [13, 3, 1, "", "outputs"]], "bosk.block.meta.InputSlotMeta": [[13, 3, 1, "", "stages"]], "bosk.block.repo": [[15, 1, 1, "", "BaseBlockClassRepository"], [15, 5, 1, "", "DEFAULT_BLOCK_CLASS_REPOSITORY"], [15, 1, 1, "", "ScopeBlockClassRepository"], [15, 1, 1, "", "ZooBlockClassRepository"], [14, 0, 0, "-", "base"], [16, 0, 0, "-", "scope"], [17, 0, 0, "-", "zoo"]], "bosk.block.repo.BaseBlockClassRepository": [[15, 2, 1, "", "get"]], "bosk.block.repo.ScopeBlockClassRepository": [[15, 2, 1, "", "get"]], "bosk.block.repo.base": [[14, 1, 1, "", "BaseBlockClassRepository"]], "bosk.block.repo.base.BaseBlockClassRepository": [[14, 2, 1, "", "get"]], "bosk.block.repo.scope": [[16, 1, 1, "", "ScopeBlockClassRepository"]], "bosk.block.repo.scope.ScopeBlockClassRepository": [[16, 2, 1, "", "get"]], "bosk.block.repo.zoo": [[17, 5, 1, "", "IGNORE_IMPORT_ERROR_PACKAGES"], [17, 1, 1, "", "ZooBlockClassRepository"], [17, 6, 1, "", "import_submodules_contents"]], "bosk.block.zoo": [[18, 0, 0, "-", "data_conversion"], [19, 0, 0, "-", "data_weighting"], [20, 0, 0, "-", "debugging"], [21, 0, 0, "-", "gpu_blocks"], [23, 0, 0, "-", "input_plugs"], [24, 0, 0, "-", "metrics"], [30, 0, 0, "-", "models"], [35, 0, 0, "-", "multi_grained_scanning"], [41, 0, 0, "-", "output_plugs"], [42, 0, 0, "-", "preprocessing"], [45, 0, 0, "-", "routing"]], "bosk.block.zoo.data_conversion": [[18, 1, 1, "", "ArgmaxBlock"], [18, 1, 1, "", "AverageBlock"], [18, 1, 1, "", "ConcatBlock"], [18, 1, 1, "", "FlattenBlock"], [18, 1, 1, "", "ReshapeBlock"], [18, 1, 1, "", "StackBlock"]], "bosk.block.zoo.data_conversion.ArgmaxBlock": [[18, 2, 1, "", "fit"], [18, 3, 1, "", "meta"], [18, 2, 1, "", "transform"]], "bosk.block.zoo.data_conversion.AverageBlock": [[18, 2, 1, "", "fit"], [18, 3, 1, "", "meta"], [18, 2, 1, "", "transform"]], "bosk.block.zoo.data_conversion.ConcatBlock": [[18, 2, 1, "", "fit"], [18, 3, 1, "", "meta"], [18, 2, 1, "", "transform"]], "bosk.block.zoo.data_conversion.FlattenBlock": [[18, 2, 1, "", "fit"], [18, 3, 1, "", "meta"], [18, 2, 1, "", "transform"]], "bosk.block.zoo.data_conversion.ReshapeBlock": [[18, 2, 1, "", "fit"], [18, 3, 1, "", "meta"], [18, 2, 1, "", "transform"]], "bosk.block.zoo.data_conversion.StackBlock": [[18, 2, 1, "", "fit"], [18, 3, 1, "", "meta"], [18, 2, 1, "", "transform"]], "bosk.block.zoo.data_weighting": [[19, 1, 1, "", "WeightsBlock"]], "bosk.block.zoo.data_weighting.WeightsBlock": [[19, 3, 1, "", "_weights"], [19, 2, 1, "", "fit"], [19, 2, 1, "", "transform"]], "bosk.block.zoo.debugging": [[20, 1, 1, "", "FitLambdaBlock"], [20, 1, 1, "", "TransformLambdaBlock"]], "bosk.block.zoo.debugging.FitLambdaBlock": [[20, 2, 1, "", "fit"], [20, 3, 1, "id0", "meta"], [20, 3, 1, "", "slots"], [20, 2, 1, "", "transform"]], "bosk.block.zoo.debugging.TransformLambdaBlock": [[20, 2, 1, "", "fit"], [20, 3, 1, "", "meta"], [20, 2, 1, "", "transform"]], "bosk.block.zoo.gpu_blocks": [[21, 1, 1, "", "BaseBlock"], [21, 1, 1, "", "BaseData"], [21, 1, 1, "", "BlockExecutionProperties"], [21, 5, 1, "", "BlockInputData"], [21, 1, 1, "", "CPUData"], [21, 1, 1, "", "GPUData"], [21, 1, 1, "", "MoveToBlock"], [21, 5, 1, "", "TransformOutputData"], [21, 6, 1, "", "make_simple_meta"]], "bosk.block.zoo.gpu_blocks.BaseBlock": [[21, 2, 1, "", "__repr__"], [21, 2, 1, "", "_make_slots"], [21, 2, 1, "", "accept"], [21, 4, 1, "", "default_output"], [21, 2, 1, "", "fit"], [21, 2, 1, "", "get_default_output"], [21, 4, 1, "id0", "meta"], [21, 2, 1, "", "set_random_state"], [21, 3, 1, "", "slots"], [21, 2, 1, "", "transform"], [21, 2, 1, "", "wrap"]], "bosk.block.zoo.gpu_blocks.BaseData": [[21, 2, 1, "", "__repr__"], [21, 3, 1, "", "data"], [21, 2, 1, "", "to_cpu"], [21, 2, 1, "", "to_gpu"]], "bosk.block.zoo.gpu_blocks.BlockExecutionProperties": [[21, 3, 1, "", "cpu"], [21, 3, 1, "", "gpu"], [21, 3, 1, "", "plain"], [21, 3, 1, "", "threadsafe"]], "bosk.block.zoo.gpu_blocks.CPUData": [[21, 3, 1, "", "data"]], "bosk.block.zoo.gpu_blocks.GPUData": [[21, 3, 1, "", "data"], [21, 2, 1, "", "to_cpu"]], "bosk.block.zoo.gpu_blocks.MoveToBlock": [[21, 2, 1, "", "fit"], [21, 3, 1, "", "meta"], [21, 2, 1, "", "transform"]], "bosk.block.zoo.input_plugs": [[23, 1, 1, "", "BaseInputBlock"], [23, 1, 1, "", "BlockExecutionProperties"], [23, 5, 1, "", "BlockInputData"], [23, 1, 1, "", "BlockMeta"], [23, 1, 1, "", "DynamicBlockMetaStub"], [23, 1, 1, "", "InputBlock"], [23, 1, 1, "", "Stages"], [23, 1, 1, "", "TargetInputBlock"], [23, 5, 1, "", "TransformOutputData"], [23, 6, 1, "", "make_simple_meta"]], "bosk.block.zoo.input_plugs.BaseInputBlock": [[23, 2, 1, "", "_make_slots"], [23, 2, 1, "", "get_single_input"], [23, 4, 1, "", "name"]], "bosk.block.zoo.input_plugs.BlockExecutionProperties": [[23, 3, 1, "", "cpu"], [23, 3, 1, "", "gpu"], [23, 3, 1, "", "plain"], [23, 3, 1, "", "threadsafe"]], "bosk.block.zoo.input_plugs.BlockMeta": [[23, 3, 1, "", "execution_props"], [23, 3, 1, "", "inputs"], [23, 2, 1, "", "list_of_slots_meta_to_mapping"], [23, 3, 1, "", "outputs"]], "bosk.block.zoo.input_plugs.InputBlock": [[23, 3, 1, "", "DEFAULT_INPUT_NAME"], [23, 2, 1, "", "fit"], [23, 3, 1, "", "meta"], [23, 3, 1, "", "name"], [23, 2, 1, "", "transform"]], "bosk.block.zoo.input_plugs.Stages": [[23, 3, 1, "id0", "fit"], [23, 3, 1, "id1", "transform"], [23, 3, 1, "id2", "transform_on_fit"]], "bosk.block.zoo.input_plugs.TargetInputBlock": [[23, 3, 1, "", "DEFAULT_TARGET_NAME"], [23, 2, 1, "", "fit"], [23, 3, 1, "", "meta"], [23, 3, 1, "", "name"], [23, 2, 1, "", "transform"]], "bosk.block.zoo.metrics": [[24, 1, 1, "", "AccuracyBlock"], [24, 1, 1, "", "F1ScoreBlock"], [24, 1, 1, "", "R2ScoreBlock"], [24, 1, 1, "", "RocAucBlock"], [24, 1, 1, "", "RocAucMultiLabelBlock"]], "bosk.block.zoo.metrics.AccuracyBlock": [[24, 2, 1, "", "fit"], [24, 3, 1, "", "meta"], [24, 2, 1, "", "transform"]], "bosk.block.zoo.metrics.F1ScoreBlock": [[24, 2, 1, "", "fit"], [24, 3, 1, "", "meta"], [24, 2, 1, "", "transform"]], "bosk.block.zoo.metrics.R2ScoreBlock": [[24, 2, 1, "", "fit"], [24, 3, 1, "", "meta"], [24, 2, 1, "", "transform"]], "bosk.block.zoo.metrics.RocAucBlock": [[24, 2, 1, "", "fit"], [24, 3, 1, "", "meta"], [24, 2, 1, "", "transform"]], "bosk.block.zoo.metrics.RocAucMultiLabelBlock": [[24, 2, 1, "", "fit"], [24, 3, 1, "", "meta"], [24, 2, 1, "", "transform"]], "bosk.block.zoo.models": [[27, 0, 0, "-", "classification"], [31, 0, 0, "-", "regression"]], "bosk.block.zoo.models.classification": [[27, 1, 1, "", "CatBoostClassifierBlock"], [27, 1, 1, "", "ETCBlock"], [27, 1, 1, "", "RFCBlock"], [27, 1, 1, "", "XGBClassifierBlock"], [25, 0, 0, "-", "_jax_util"], [26, 0, 0, "-", "ferns"], [28, 0, 0, "-", "jax"], [29, 0, 0, "-", "mgs_ferns"]], "bosk.block.zoo.models.classification.CatBoostClassifierBlock": [[27, 2, 1, "", "transform"]], "bosk.block.zoo.models.classification.ETCBlock": [[27, 2, 1, "", "transform"]], "bosk.block.zoo.models.classification.RFCBlock": [[27, 2, 1, "", "transform"]], "bosk.block.zoo.models.classification.XGBClassifierBlock": [[27, 2, 1, "", "fit"], [27, 2, 1, "", "transform"]], "bosk.block.zoo.models.classification._jax_util": [[25, 1, 1, "", "DecisionTree"], [25, 1, 1, "", "DecisionTreeClassifier"], [25, 1, 1, "", "ExtraTree"], [25, 1, 1, "", "ExtraTreeClassifier"], [25, 1, 1, "", "TreeNode"], [25, 6, 1, "", "accuracy"], [25, 6, 1, "", "compute_score_generic"], [25, 6, 1, "", "entropy"], [25, 6, 1, "", "make_scoring_function"], [25, 6, 1, "", "make_split_node_function"], [25, 6, 1, "", "most_frequent"], [25, 6, 1, "", "predict_proba"], [25, 6, 1, "", "row_to_nan"], [25, 6, 1, "", "split_mask"], [25, 6, 1, "", "split_node_generic"], [25, 6, 1, "", "split_node_generic_random"], [25, 6, 1, "", "split_points"]], "bosk.block.zoo.models.classification._jax_util.DecisionTree": [[25, 2, 1, "", "fit"], [25, 2, 1, "", "predict"], [25, 2, 1, "", "tree_flatten"], [25, 2, 1, "", "tree_unflatten"]], "bosk.block.zoo.models.classification._jax_util.DecisionTreeClassifier": [[25, 2, 1, "", "tree_flatten"]], "bosk.block.zoo.models.classification._jax_util.ExtraTreeClassifier": [[25, 2, 1, "", "tree_flatten"]], "bosk.block.zoo.models.classification._jax_util.TreeNode": [[25, 2, 1, "", "tree_flatten"], [25, 2, 1, "", "tree_unflatten"]], "bosk.block.zoo.models.classification.ferns": [[26, 1, 1, "", "RandomFernsBlock"]], "bosk.block.zoo.models.classification.ferns.RandomFernsBlock": [[26, 2, 1, "", "__getstate__"], [26, 2, 1, "", "__setstate__"], [26, 2, 1, "", "_apply_ferns"], [26, 2, 1, "", "_classifier_init"], [26, 2, 1, "", "_make_ferns"], [26, 2, 1, "", "_parallel_calc_bucket_stats"], [26, 2, 1, "", "_predict_proba"], [26, 2, 1, "", "fit"], [26, 3, 1, "", "meta"], [26, 2, 1, "", "transform"]], "bosk.block.zoo.models.classification.jax": [[28, 1, 1, "", "ETCGBlock"], [28, 1, 1, "", "RFCGBlock"]], "bosk.block.zoo.models.classification.jax.ETCGBlock": [[28, 2, 1, "", "fit"], [28, 3, 1, "", "meta"], [28, 2, 1, "", "predict"], [28, 2, 1, "", "transform"], [28, 2, 1, "", "tree_flatten"], [28, 2, 1, "", "tree_unflatten"]], "bosk.block.zoo.models.classification.jax.RFCGBlock": [[28, 2, 1, "", "fit"], [28, 3, 1, "", "meta"], [28, 2, 1, "", "predict"], [28, 2, 1, "", "transform"], [28, 2, 1, "", "tree_flatten"], [28, 2, 1, "", "tree_unflatten"]], "bosk.block.zoo.models.classification.mgs_ferns": [[29, 1, 1, "", "MGSRandomFernsBlock"]], "bosk.block.zoo.models.classification.mgs_ferns.MGSRandomFernsBlock": [[29, 2, 1, "", "__getstate__"], [29, 2, 1, "", "__prepare_pooling_indices"], [29, 2, 1, "", "__setstate__"], [29, 2, 1, "", "_apply_ferns"], [29, 2, 1, "", "_classifier_init"], [29, 2, 1, "", "_get_flattened_window_size"], [29, 2, 1, "", "_make_ferns"], [29, 2, 1, "", "_parallel_calc_bucket_stats"], [29, 2, 1, "", "_predict_proba"], [29, 2, 1, "", "fit"], [29, 3, 1, "", "meta"], [29, 3, 1, "", "pooling_indices_"], [29, 2, 1, "", "transform"]], "bosk.block.zoo.models.regression": [[31, 1, 1, "", "CatBoostRegressorBlock"], [31, 1, 1, "", "ETRBlock"], [31, 1, 1, "", "RFRBlock"], [31, 1, 1, "", "XGBCRegressorBlock"]], "bosk.block.zoo.models.regression.CatBoostRegressorBlock": [[31, 2, 1, "", "transform"]], "bosk.block.zoo.models.regression.ETRBlock": [[31, 3, 1, "", "base_estimator_"], [31, 3, 1, "", "estimators_"], [31, 3, 1, "", "feature_importances_"], [31, 3, 1, "", "feature_names_in_"], [31, 3, 1, "", "n_features_"], [31, 3, 1, "", "n_features_in_"], [31, 3, 1, "", "n_outputs_"], [31, 3, 1, "", "oob_prediction_"], [31, 3, 1, "", "oob_score_"], [31, 2, 1, "", "transform"]], "bosk.block.zoo.models.regression.RFRBlock": [[31, 3, 1, "", "base_estimator_"], [31, 3, 1, "", "estimators_"], [31, 3, 1, "", "feature_importances_"], [31, 3, 1, "", "feature_names_in_"], [31, 3, 1, "", "n_features_"], [31, 3, 1, "", "n_features_in_"], [31, 3, 1, "", "n_outputs_"], [31, 3, 1, "", "oob_prediction_"], [31, 3, 1, "", "oob_score_"], [31, 2, 1, "", "transform"]], "bosk.block.zoo.models.regression.XGBCRegressorBlock": [[31, 2, 1, "", "fit"], [31, 2, 1, "", "transform"]], "bosk.block.zoo.multi_grained_scanning": [[35, 1, 1, "", "MultiGrainedScanning1DBlock"], [35, 1, 1, "", "MultiGrainedScanning2DBlock"], [35, 1, 1, "", "MultiGrainedScanningNDBlock"], [35, 1, 1, "", "PoolingBlock"], [32, 0, 0, "-", "_convolution_helpers"], [33, 0, 0, "-", "_pooling_impl"], [34, 0, 0, "-", "base"], [36, 0, 0, "-", "mil"], [37, 0, 0, "-", "multi_grained_scanning_1d"], [38, 0, 0, "-", "multi_grained_scanning_2d"], [39, 0, 0, "-", "multi_grained_scanning_nd"], [40, 0, 0, "-", "pooling"]], "bosk.block.zoo.multi_grained_scanning.MultiGrainedScanning1DBlock": [[35, 2, 1, "", "_window_slicing_data"]], "bosk.block.zoo.multi_grained_scanning.MultiGrainedScanning2DBlock": [[35, 2, 1, "", "_window_slicing_data"]], "bosk.block.zoo.multi_grained_scanning.MultiGrainedScanningNDBlock": [[35, 2, 1, "", "__prepare_pooling_indices"], [35, 2, 1, "", "_model_transform"], [35, 2, 1, "", "fit"], [35, 3, 1, "", "meta"], [35, 2, 1, "", "transform"]], "bosk.block.zoo.multi_grained_scanning.PoolingBlock": [[35, 2, 1, "", "__aggregate"], [35, 2, 1, "", "__chunk_pooling"], [35, 2, 1, "", "__index_based_chunk_pooling"], [35, 2, 1, "", "__jax_based_pooling"], [35, 2, 1, "", "__njit_based_chunk_pooling"], [35, 2, 1, "", "__prepare_pooling_indices"], [35, 2, 1, "", "fit"], [35, 3, 1, "", "meta"], [35, 2, 1, "", "transform"]], "bosk.block.zoo.multi_grained_scanning._convolution_helpers": [[32, 1, 1, "", "_ConvolutionHelper"], [32, 1, 1, "", "_ConvolutionParams"], [32, 1, 1, "", "_PoolingIndices"], [32, 3, 1, "", "xs_shape"]], "bosk.block.zoo.multi_grained_scanning._convolution_helpers._ConvolutionHelper": [[32, 2, 1, "", "check_kernel_size"], [32, 2, 1, "", "check_stride"], [32, 2, 1, "", "get_pooled_shape"], [32, 2, 1, "", "pad"], [32, 2, 1, "", "prepare_corner"], [32, 2, 1, "", "prepare_kernel"], [32, 2, 1, "", "prepare_pooling_indices"], [32, 2, 1, "", "slice"]], "bosk.block.zoo.multi_grained_scanning._convolution_helpers._ConvolutionParams": [[32, 3, 1, "", "chunk_size"], [32, 3, 1, "", "dilation"], [32, 3, 1, "", "kernel_size"], [32, 3, 1, "", "padding"], [32, 3, 1, "", "stride"]], "bosk.block.zoo.multi_grained_scanning._convolution_helpers._PoolingIndices": [[32, 3, 1, "id1", "full_index_tuple"], [32, 3, 1, "id2", "n_corners"], [32, 3, 1, "id3", "n_kernel_points"], [32, 3, 1, "id4", "pooled_shape"], [32, 3, 1, "id0", "xs_shape"]], "bosk.block.zoo.multi_grained_scanning._pooling_impl": [[33, 6, 1, "", "_njit_max_pooling_1d"], [33, 6, 1, "", "_njit_max_pooling_2d"], [33, 6, 1, "", "_njit_mean_pooling_1d"], [33, 6, 1, "", "_njit_mean_pooling_2d"]], "bosk.block.zoo.multi_grained_scanning.base": [[34, 1, 1, "", "MultiGrainedScanningBlock"]], "bosk.block.zoo.multi_grained_scanning.base.MultiGrainedScanningBlock": [[34, 2, 1, "", "_window_slicing_data"], [34, 2, 1, "", "_window_slicing_fit"], [34, 2, 1, "", "_window_slicing_predict"], [34, 2, 1, "", "fit"], [34, 2, 1, "", "set_random_state"], [34, 2, 1, "", "transform"]], "bosk.block.zoo.multi_grained_scanning.multi_grained_scanning_1d": [[37, 1, 1, "", "MultiGrainedScanning1DBlock"]], "bosk.block.zoo.multi_grained_scanning.multi_grained_scanning_1d.MultiGrainedScanning1DBlock": [[37, 2, 1, "", "_window_slicing_data"]], "bosk.block.zoo.multi_grained_scanning.multi_grained_scanning_2d": [[38, 1, 1, "", "MultiGrainedScanning2DBlock"]], "bosk.block.zoo.multi_grained_scanning.multi_grained_scanning_2d.MultiGrainedScanning2DBlock": [[38, 2, 1, "", "_window_slicing_data"]], "bosk.block.zoo.multi_grained_scanning.multi_grained_scanning_nd": [[39, 1, 1, "", "MultiGrainedScanningNDBlock"]], "bosk.block.zoo.multi_grained_scanning.multi_grained_scanning_nd.MultiGrainedScanningNDBlock": [[39, 2, 1, "", "__prepare_pooling_indices"], [39, 2, 1, "", "_model_transform"], [39, 2, 1, "", "fit"], [39, 3, 1, "", "meta"], [39, 2, 1, "", "transform"]], "bosk.block.zoo.multi_grained_scanning.pooling": [[40, 5, 1, "", "AGGREGATION_FUNCTIONS"], [40, 1, 1, "", "GlobalAveragePoolingBlock"], [40, 1, 1, "", "PoolingBlock"]], "bosk.block.zoo.multi_grained_scanning.pooling.GlobalAveragePoolingBlock": [[40, 2, 1, "", "_check_dims"], [40, 2, 1, "", "fit"], [40, 3, 1, "id0", "meta"], [40, 3, 1, "", "slots"], [40, 2, 1, "", "transform"]], "bosk.block.zoo.multi_grained_scanning.pooling.PoolingBlock": [[40, 2, 1, "", "__aggregate"], [40, 2, 1, "", "__chunk_pooling"], [40, 2, 1, "", "__index_based_chunk_pooling"], [40, 2, 1, "", "__jax_based_pooling"], [40, 2, 1, "", "__njit_based_chunk_pooling"], [40, 2, 1, "", "__prepare_pooling_indices"], [40, 2, 1, "", "fit"], [40, 3, 1, "", "meta"], [40, 2, 1, "", "transform"]], "bosk.block.zoo.output_plugs": [[41, 1, 1, "", "BaseOutputBlock"], [41, 1, 1, "", "BlockExecutionProperties"], [41, 5, 1, "", "BlockInputData"], [41, 1, 1, "", "BlockMeta"], [41, 1, 1, "", "DynamicBlockMetaStub"], [41, 1, 1, "", "OutputBlock"], [41, 5, 1, "", "TransformOutputData"], [41, 6, 1, "", "make_simple_meta"]], "bosk.block.zoo.output_plugs.BaseOutputBlock": [[41, 2, 1, "", "_make_slots"], [41, 2, 1, "", "get_single_output"], [41, 4, 1, "", "name"]], "bosk.block.zoo.output_plugs.BlockExecutionProperties": [[41, 3, 1, "", "cpu"], [41, 3, 1, "", "gpu"], [41, 3, 1, "", "plain"], [41, 3, 1, "", "threadsafe"]], "bosk.block.zoo.output_plugs.BlockMeta": [[41, 3, 1, "", "execution_props"], [41, 3, 1, "", "inputs"], [41, 2, 1, "", "list_of_slots_meta_to_mapping"], [41, 3, 1, "", "outputs"]], "bosk.block.zoo.output_plugs.OutputBlock": [[41, 3, 1, "", "DEFAULT_OUTPUT_NAME"], [41, 2, 1, "", "fit"], [41, 3, 1, "", "meta"], [41, 3, 1, "", "name"], [41, 2, 1, "", "transform"]], "bosk.block.zoo.routing": [[45, 1, 1, "", "CSBlock"], [45, 1, 1, "", "CSFilterBlock"], [45, 1, 1, "", "CSJoinBlock"], [45, 1, 1, "", "CVTrainIndicesBlock"], [45, 1, 1, "", "SubsetTrainWrapperBlock"], [43, 0, 0, "-", "cs"], [44, 0, 0, "-", "cv"]], "bosk.block.zoo.routing.CSBlock": [[45, 3, 1, "", "eps"], [45, 2, 1, "", "fit"], [45, 3, 1, "", "meta"], [45, 2, 1, "", "transform"]], "bosk.block.zoo.routing.CSFilterBlock": [[45, 2, 1, "", "fit"], [45, 3, 1, "", "input_names"], [45, 3, 1, "", "meta"], [45, 2, 1, "", "transform"]], "bosk.block.zoo.routing.CSJoinBlock": [[45, 2, 1, "", "fit"], [45, 3, 1, "", "meta"], [45, 2, 1, "", "transform"]], "bosk.block.zoo.routing.CVTrainIndicesBlock": [[45, 2, 1, "", "fit"], [45, 3, 1, "", "meta"], [45, 3, 1, "", "random_state"], [45, 3, 1, "", "size"], [45, 2, 1, "", "transform"]], "bosk.block.zoo.routing.SubsetTrainWrapperBlock": [[45, 3, 1, "", "TRAINING_INDICES_NAME"], [45, 2, 1, "", "_exclude_training_indices"], [45, 3, 1, "", "block"], [45, 2, 1, "", "fit"], [45, 3, 1, "", "meta"], [45, 2, 1, "", "set_random_state"], [45, 2, 1, "", "transform"]], "bosk.block.zoo.routing.cs": [[43, 1, 1, "", "CSBlock"], [43, 1, 1, "", "CSFilterBlock"], [43, 1, 1, "", "CSJoinBlock"]], "bosk.block.zoo.routing.cs.CSBlock": [[43, 3, 1, "", "eps"], [43, 2, 1, "", "fit"], [43, 3, 1, "", "meta"], [43, 2, 1, "", "transform"]], "bosk.block.zoo.routing.cs.CSFilterBlock": [[43, 2, 1, "", "fit"], [43, 3, 1, "", "input_names"], [43, 3, 1, "", "meta"], [43, 2, 1, "", "transform"]], "bosk.block.zoo.routing.cs.CSJoinBlock": [[43, 2, 1, "", "fit"], [43, 3, 1, "", "meta"], [43, 2, 1, "", "transform"]], "bosk.block.zoo.routing.cv": [[44, 1, 1, "", "CVTrainIndicesBlock"], [44, 1, 1, "", "SubsetTrainWrapperBlock"]], "bosk.block.zoo.routing.cv.CVTrainIndicesBlock": [[44, 2, 1, "", "fit"], [44, 3, 1, "", "meta"], [44, 3, 1, "", "random_state"], [44, 3, 1, "", "size"], [44, 2, 1, "", "transform"]], "bosk.block.zoo.routing.cv.SubsetTrainWrapperBlock": [[44, 3, 1, "", "TRAINING_INDICES_NAME"], [44, 2, 1, "", "_exclude_training_indices"], [44, 3, 1, "", "block"], [44, 2, 1, "", "fit"], [44, 3, 1, "", "meta"], [44, 2, 1, "", "set_random_state"], [44, 2, 1, "", "transform"]], "bosk.comparison": [[48, 1, 1, "", "BaseComparator"], [48, 1, 1, "", "BaseForeignModel"], [48, 1, 1, "", "BaseMetric"], [48, 1, 1, "", "CVComparator"], [48, 1, 1, "", "MetricWrapper"], [46, 0, 0, "-", "base"], [47, 0, 0, "-", "cross_val"], [49, 0, 0, "-", "metric"]], "bosk.comparison.BaseComparator": [[48, 2, 1, "", "_add_common_block"], [48, 2, 1, "", "_compare_blocks_conns"], [48, 2, 1, "", "_continue_bfs"], [48, 2, 1, "", "_find_next_block"], [48, 2, 1, "", "_get_aj_lists"], [48, 2, 1, "", "_get_common_input_dict"], [48, 2, 1, "", "_get_common_inputs"], [48, 2, 1, "", "_get_input_plug"], [48, 2, 1, "", "_set_manual_state"], [48, 2, 1, "", "_set_random_state"], [48, 2, 1, "", "_splice_pipelines"], [48, 2, 1, "", "get_score"], [48, 3, 1, "", "random_state"]], "bosk.comparison.BaseForeignModel": [[48, 2, 1, "", "fit"], [48, 2, 1, "", "predict"], [48, 2, 1, "", "set_random_state"]], "bosk.comparison.BaseMetric": [[48, 2, 1, "", "get_score"]], "bosk.comparison.CVComparator": [[48, 2, 1, "", "_get_copy_pipeline"], [48, 2, 1, "", "_get_metrics_names"], [48, 2, 1, "", "_get_pers_inp_dict"], [48, 2, 1, "", "_get_times_dict"], [48, 2, 1, "", "_write_metrics_info_to_dict"], [48, 2, 1, "", "_write_preamble"], [48, 2, 1, "", "get_score"]], "bosk.comparison.MetricWrapper": [[48, 2, 1, "", "get_score"]], "bosk.comparison.base": [[46, 1, 1, "", "BaseComparator"], [46, 1, 1, "", "BaseForeignModel"], [46, 6, 1, "", "get_block_md5_hash"]], "bosk.comparison.base.BaseComparator": [[46, 2, 1, "", "_add_common_block"], [46, 2, 1, "", "_compare_blocks_conns"], [46, 2, 1, "", "_continue_bfs"], [46, 2, 1, "", "_find_next_block"], [46, 2, 1, "", "_get_aj_lists"], [46, 2, 1, "", "_get_common_input_dict"], [46, 2, 1, "", "_get_common_inputs"], [46, 2, 1, "", "_get_input_plug"], [46, 2, 1, "", "_set_manual_state"], [46, 2, 1, "", "_set_random_state"], [46, 2, 1, "", "_splice_pipelines"], [46, 2, 1, "", "get_score"], [46, 3, 1, "", "random_state"]], "bosk.comparison.base.BaseForeignModel": [[46, 2, 1, "", "fit"], [46, 2, 1, "", "predict"], [46, 2, 1, "", "set_random_state"]], "bosk.comparison.cross_val": [[47, 1, 1, "", "CVComparator"]], "bosk.comparison.cross_val.CVComparator": [[47, 2, 1, "", "_get_copy_pipeline"], [47, 2, 1, "", "_get_metrics_names"], [47, 2, 1, "", "_get_pers_inp_dict"], [47, 2, 1, "", "_get_times_dict"], [47, 2, 1, "", "_write_metrics_info_to_dict"], [47, 2, 1, "", "_write_preamble"], [47, 2, 1, "", "get_score"]], "bosk.comparison.metric": [[49, 1, 1, "", "BaseMetric"], [49, 1, 1, "", "MetricWrapper"]], "bosk.comparison.metric.BaseMetric": [[49, 2, 1, "", "get_score"]], "bosk.comparison.metric.MetricWrapper": [[49, 2, 1, "", "get_score"]], "bosk.data": [[50, 1, 1, "", "BaseData"], [50, 1, 1, "", "CPUData"], [50, 1, 1, "", "GPUData"], [50, 5, 1, "", "jnp"]], "bosk.data.BaseData": [[50, 2, 1, "", "__repr__"], [50, 3, 1, "", "data"], [50, 2, 1, "", "to_cpu"], [50, 2, 1, "", "to_gpu"]], "bosk.data.CPUData": [[50, 3, 1, "", "data"]], "bosk.data.GPUData": [[50, 3, 1, "", "data"], [50, 2, 1, "", "to_cpu"]], "bosk.exceptions": [[51, 7, 1, "", "MultipleBlockInputsError"], [51, 7, 1, "", "MultipleBlockOutputsError"], [51, 7, 1, "", "MultipleBlockSlotsError"], [51, 7, 1, "", "NoDefaultBlockOutputError"]], "bosk.executor": [[54, 1, 1, "", "BaseBlockExecutor"], [54, 1, 1, "", "BaseBoskPipelineWrapper"], [54, 1, 1, "", "BaseSlotHandler"], [54, 1, 1, "", "BoskPipelineClassifier"], [54, 1, 1, "", "BoskPipelineRegressor"], [54, 1, 1, "", "BoskPipelineTransformer"], [54, 1, 1, "", "DefaultBlockExecutor"], [54, 1, 1, "", "DefaultSlotHandler"], [54, 1, 1, "", "FitBlacklistBlockExecutor"], [54, 1, 1, "", "GreedyParallelExecutor"], [54, 1, 1, "", "RecursiveExecutor"], [54, 1, 1, "", "TimerBlockExecutor"], [54, 1, 1, "", "TopologicalExecutor"], [52, 0, 0, "-", "base"], [53, 0, 0, "-", "block"], [57, 0, 0, "-", "parallel"], [60, 0, 0, "-", "recursive"], [61, 0, 0, "-", "sklearn_interface"], [62, 0, 0, "-", "timer"], [63, 0, 0, "-", "topological"], [64, 0, 0, "-", "utility"]], "bosk.executor.BaseBlockExecutor": [[54, 2, 1, "", "execute_block"]], "bosk.executor.BaseBoskPipelineWrapper": [[54, 2, 1, "", "__map_vars"], [54, 2, 1, "", "_extract"], [54, 2, 1, "", "_predict_all"], [54, 2, 1, "", "_prepare_executors"], [54, 2, 1, "", "fit"]], "bosk.executor.BaseSlotHandler": [[54, 2, 1, "", "is_slot_required"]], "bosk.executor.BoskPipelineClassifier": [[54, 2, 1, "", "_classifier_init"], [54, 2, 1, "", "fit"], [54, 2, 1, "", "predict"], [54, 2, 1, "", "predict_proba"]], "bosk.executor.BoskPipelineRegressor": [[54, 2, 1, "", "predict"]], "bosk.executor.BoskPipelineTransformer": [[54, 2, 1, "", "fit_transform"], [54, 2, 1, "", "transform"]], "bosk.executor.DefaultBlockExecutor": [[54, 2, 1, "", "execute_block"]], "bosk.executor.DefaultSlotHandler": [[54, 2, 1, "", "is_slot_required"]], "bosk.executor.FitBlacklistBlockExecutor": [[54, 2, 1, "", "execute_block"]], "bosk.executor.GreedyParallelExecutor": [[54, 2, 1, "", "__append_outputs"], [54, 2, 1, "", "__execute_with_parallel"], [54, 2, 1, "", "_clean_unnecessary_data"], [54, 2, 1, "", "_compute_all_non_threadsafe"], [54, 2, 1, "", "_compute_all_parallel"], [54, 2, 1, "", "_compute_all_plain"], [54, 3, 1, "id2", "_conn_map"], [54, 2, 1, "", "_find_ready_blocks"], [54, 2, 1, "", "_get_blocks"], [54, 2, 1, "", "_prepare_inputs"], [54, 2, 1, "", "_prepare_inputs_by_block"], [54, 2, 1, "", "_prepare_out_to_in_edges"], [54, 2, 1, "", "execute"], [54, 4, 1, "", "outputs"]], "bosk.executor.RecursiveExecutor": [[54, 3, 1, "id0", "_conn_map"], [54, 2, 1, "", "execute"]], "bosk.executor.TimerBlockExecutor": [[54, 3, 1, "", "block_time"], [54, 4, 1, "", "blocks_time"], [54, 2, 1, "", "execute_block"]], "bosk.executor.TopologicalExecutor": [[54, 3, 1, "id1", "_conn_dict"], [54, 2, 1, "", "_dfs"], [54, 2, 1, "", "_get_backward_aj_list"], [54, 2, 1, "", "_get_forward_aj_list"], [54, 2, 1, "", "_topological_sort"], [54, 2, 1, "", "execute"]], "bosk.executor.base": [[52, 1, 1, "", "BaseExecutor"], [52, 1, 1, "", "BaseSlotHandler"], [52, 1, 1, "", "DefaultSlotHandler"], [52, 1, 1, "", "ExecutionResult"]], "bosk.executor.base.BaseExecutor": [[52, 3, 1, "", "__block_executor"], [52, 2, 1, "", "__call__"], [52, 3, 1, "", "__inputs"], [52, 3, 1, "", "__outputs"], [52, 3, 1, "", "__pipeline"], [52, 2, 1, "", "__process_inputs_outputs"], [52, 3, 1, "", "__slot_handler"], [52, 3, 1, "", "__stage"], [52, 2, 1, "", "_check_input_values"], [52, 2, 1, "", "_execute_block"], [52, 2, 1, "", "_is_slot_required"], [52, 2, 1, "", "_map_input_names_to_slots"], [52, 2, 1, "", "_prepare_block_executor"], [52, 2, 1, "", "_prepare_slot_handler"], [52, 4, 1, "id4", "block_executor"], [52, 2, 1, "", "execute"], [52, 4, 1, "id1", "inputs"], [52, 4, 1, "id2", "outputs"], [52, 4, 1, "id0", "pipeline"], [52, 4, 1, "id3", "slot_handler"], [52, 4, 1, "id5", "stage"]], "bosk.executor.base.BaseSlotHandler": [[52, 2, 1, "", "is_slot_required"]], "bosk.executor.base.DefaultSlotHandler": [[52, 2, 1, "", "is_slot_required"]], "bosk.executor.base.ExecutionResult": [[52, 2, 1, "", "numpy"]], "bosk.executor.block": [[53, 1, 1, "", "BaseBlockExecutor"], [53, 1, 1, "", "CPUBlockExecutor"], [53, 1, 1, "", "DefaultBlockExecutor"], [53, 1, 1, "", "FitBlacklistBlockExecutor"], [53, 1, 1, "", "GPUBlockExecutor"]], "bosk.executor.block.BaseBlockExecutor": [[53, 2, 1, "", "execute_block"]], "bosk.executor.block.CPUBlockExecutor": [[53, 2, 1, "", "execute_block"]], "bosk.executor.block.DefaultBlockExecutor": [[53, 2, 1, "", "execute_block"]], "bosk.executor.block.FitBlacklistBlockExecutor": [[53, 2, 1, "", "execute_block"]], "bosk.executor.block.GPUBlockExecutor": [[53, 2, 1, "", "execute_block"]], "bosk.executor.parallel": [[57, 1, 1, "", "GreedyParallelExecutor"], [57, 1, 1, "", "JoblibParallelEngine"], [57, 1, 1, "", "MultiprocessingParallelEngine"], [57, 1, 1, "", "ParallelEngine"], [55, 0, 0, "-", "dask"], [56, 0, 0, "-", "greedy"], [58, 0, 0, "-", "networkx"], [59, 0, 0, "-", "topsort"]], "bosk.executor.parallel.GreedyParallelExecutor": [[57, 2, 1, "", "__append_outputs"], [57, 2, 1, "", "__execute_with_parallel"], [57, 2, 1, "", "_clean_unnecessary_data"], [57, 2, 1, "", "_compute_all_non_threadsafe"], [57, 2, 1, "", "_compute_all_parallel"], [57, 2, 1, "", "_compute_all_plain"], [57, 3, 1, "id0", "_conn_map"], [57, 2, 1, "", "_find_ready_blocks"], [57, 2, 1, "", "_get_blocks"], [57, 2, 1, "", "_prepare_inputs"], [57, 2, 1, "", "_prepare_inputs_by_block"], [57, 2, 1, "", "_prepare_out_to_in_edges"], [57, 2, 1, "", "execute"], [57, 4, 1, "", "outputs"]], "bosk.executor.parallel.JoblibParallelEngine": [[57, 1, 1, "", "JoblibInstance"], [57, 2, 1, "", "__enter__"], [57, 2, 1, "", "__exit__"]], "bosk.executor.parallel.JoblibParallelEngine.JoblibInstance": [[57, 2, 1, "", "starmap"]], "bosk.executor.parallel.MultiprocessingParallelEngine": [[57, 1, 1, "", "MPInstance"], [57, 2, 1, "", "__enter__"], [57, 2, 1, "", "__exit__"]], "bosk.executor.parallel.MultiprocessingParallelEngine.MPInstance": [[57, 2, 1, "", "starmap"]], "bosk.executor.parallel.ParallelEngine": [[57, 1, 1, "", "Instance"], [57, 2, 1, "", "__enter__"], [57, 2, 1, "", "__exit__"]], "bosk.executor.parallel.ParallelEngine.Instance": [[57, 2, 1, "", "starmap"]], "bosk.executor.parallel.greedy": [[56, 1, 1, "", "GreedyParallelExecutor"], [56, 1, 1, "", "JoblibParallelEngine"], [56, 1, 1, "", "MultiprocessingParallelEngine"], [56, 5, 1, "", "OutSlotToData"], [56, 1, 1, "", "ParallelEngine"], [56, 5, 1, "", "ResultT"]], "bosk.executor.parallel.greedy.GreedyParallelExecutor": [[56, 2, 1, "", "__append_outputs"], [56, 2, 1, "", "__execute_with_parallel"], [56, 2, 1, "", "_clean_unnecessary_data"], [56, 2, 1, "", "_compute_all_non_threadsafe"], [56, 2, 1, "", "_compute_all_parallel"], [56, 2, 1, "", "_compute_all_plain"], [56, 3, 1, "id0", "_conn_map"], [56, 2, 1, "", "_find_ready_blocks"], [56, 2, 1, "", "_get_blocks"], [56, 2, 1, "", "_prepare_inputs"], [56, 2, 1, "", "_prepare_inputs_by_block"], [56, 2, 1, "", "_prepare_out_to_in_edges"], [56, 2, 1, "", "execute"], [56, 4, 1, "", "outputs"]], "bosk.executor.parallel.greedy.JoblibParallelEngine": [[56, 1, 1, "", "JoblibInstance"], [56, 2, 1, "", "__enter__"], [56, 2, 1, "", "__exit__"]], "bosk.executor.parallel.greedy.JoblibParallelEngine.JoblibInstance": [[56, 2, 1, "", "starmap"]], "bosk.executor.parallel.greedy.MultiprocessingParallelEngine": [[56, 1, 1, "", "MPInstance"], [56, 2, 1, "", "__enter__"], [56, 2, 1, "", "__exit__"]], "bosk.executor.parallel.greedy.MultiprocessingParallelEngine.MPInstance": [[56, 2, 1, "", "starmap"]], "bosk.executor.parallel.greedy.ParallelEngine": [[56, 1, 1, "", "Instance"], [56, 2, 1, "", "__enter__"], [56, 2, 1, "", "__exit__"]], "bosk.executor.parallel.greedy.ParallelEngine.Instance": [[56, 2, 1, "", "starmap"]], "bosk.executor.recursive": [[60, 1, 1, "", "RecursiveExecutor"]], "bosk.executor.recursive.RecursiveExecutor": [[60, 3, 1, "id0", "_conn_map"], [60, 2, 1, "", "execute"]], "bosk.executor.sklearn_interface": [[61, 1, 1, "", "BaseBoskPipelineWrapper"], [61, 1, 1, "", "BoskPipelineClassifier"], [61, 1, 1, "", "BoskPipelineRegressor"], [61, 1, 1, "", "BoskPipelineTransformer"]], "bosk.executor.sklearn_interface.BaseBoskPipelineWrapper": [[61, 2, 1, "", "__map_vars"], [61, 2, 1, "", "_extract"], [61, 2, 1, "", "_predict_all"], [61, 2, 1, "", "_prepare_executors"], [61, 2, 1, "", "fit"]], "bosk.executor.sklearn_interface.BoskPipelineClassifier": [[61, 2, 1, "", "_classifier_init"], [61, 2, 1, "", "fit"], [61, 2, 1, "", "predict"], [61, 2, 1, "", "predict_proba"]], "bosk.executor.sklearn_interface.BoskPipelineRegressor": [[61, 2, 1, "", "predict"]], "bosk.executor.sklearn_interface.BoskPipelineTransformer": [[61, 2, 1, "", "fit_transform"], [61, 2, 1, "", "transform"]], "bosk.executor.timer": [[62, 1, 1, "", "TimerBlockExecutor"]], "bosk.executor.timer.TimerBlockExecutor": [[62, 3, 1, "", "block_time"], [62, 4, 1, "", "blocks_time"], [62, 2, 1, "", "execute_block"]], "bosk.executor.topological": [[63, 1, 1, "", "TopologicalExecutor"]], "bosk.executor.topological.TopologicalExecutor": [[63, 3, 1, "id0", "_conn_dict"], [63, 2, 1, "", "_dfs"], [63, 2, 1, "", "_get_backward_aj_list"], [63, 2, 1, "", "_get_forward_aj_list"], [63, 2, 1, "", "_topological_sort"], [63, 2, 1, "", "execute"]], "bosk.executor.utility": [[64, 6, 1, "", "get_connection_map"]], "bosk.painter": [[68, 1, 1, "", "BasePainter"], [68, 1, 1, "", "GraphvizPainter"], [68, 1, 1, "", "TopologicalPainter"], [66, 0, 0, "-", "base"], [67, 0, 0, "-", "graphviz"], [69, 0, 0, "-", "topological"]], "bosk.painter.BasePainter": [[68, 4, 1, "", "available_formats"], [68, 2, 1, "", "from_executor"], [68, 2, 1, "", "from_pipeline"], [68, 2, 1, "", "render"]], "bosk.painter.GraphvizPainter": [[68, 2, 1, "", "_add_edge"], [68, 2, 1, "", "_add_input"], [68, 2, 1, "", "_add_node"], [68, 2, 1, "", "_add_output"], [68, 2, 1, "", "available_formats"], [68, 4, 1, "id2", "dpi"], [68, 2, 1, "", "from_executor"], [68, 2, 1, "", "from_pipeline"], [68, 4, 1, "id1", "levels_sep"], [68, 4, 1, "id0", "rankdir"], [68, 2, 1, "", "render"]], "bosk.painter.TopologicalPainter": [[68, 3, 1, "", "dpi"], [68, 2, 1, "", "from_executor"], [68, 3, 1, "", "levels_sep"], [68, 3, 1, "", "rankdir"]], "bosk.painter.base": [[66, 1, 1, "", "BasePainter"]], "bosk.painter.base.BasePainter": [[66, 4, 1, "", "available_formats"], [66, 2, 1, "", "from_executor"], [66, 2, 1, "", "from_pipeline"], [66, 2, 1, "", "render"]], "bosk.painter.graphviz": [[67, 1, 1, "", "GraphvizPainter"]], "bosk.painter.graphviz.GraphvizPainter": [[67, 2, 1, "", "_add_edge"], [67, 2, 1, "", "_add_input"], [67, 2, 1, "", "_add_node"], [67, 2, 1, "", "_add_output"], [67, 2, 1, "", "available_formats"], [67, 4, 1, "id2", "dpi"], [67, 2, 1, "", "from_executor"], [67, 2, 1, "", "from_pipeline"], [67, 4, 1, "id1", "levels_sep"], [67, 4, 1, "id0", "rankdir"], [67, 2, 1, "", "render"]], "bosk.painter.topological": [[69, 1, 1, "", "TopologicalPainter"]], "bosk.painter.topological.TopologicalPainter": [[69, 3, 1, "", "dpi"], [69, 2, 1, "", "from_executor"], [69, 3, 1, "", "levels_sep"], [69, 3, 1, "", "rankdir"]], "bosk.pipeline": [[79, 1, 1, "", "BaseDynamicPipeline"], [79, 1, 1, "", "BasePipeline"], [79, 1, 1, "", "Connection"], [70, 0, 0, "-", "base"], [73, 0, 0, "-", "builder"], [74, 0, 0, "-", "connection"], [76, 0, 0, "-", "converter"], [78, 0, 0, "-", "dynamic"], [81, 0, 0, "-", "serializer"]], "bosk.pipeline.BaseDynamicPipeline": [[79, 2, 1, "", "extend"]], "bosk.pipeline.BasePipeline": [[79, 2, 1, "", "accept"], [79, 3, 1, "id1", "connections"], [79, 3, 1, "id2", "inputs"], [79, 3, 1, "id0", "nodes"], [79, 3, 1, "id3", "outputs"], [79, 2, 1, "", "set_random_state"]], "bosk.pipeline.Connection": [[79, 2, 1, "", "accept"], [79, 3, 1, "", "dst"], [79, 3, 1, "", "src"]], "bosk.pipeline.base": [[70, 1, 1, "", "BasePipeline"]], "bosk.pipeline.base.BasePipeline": [[70, 2, 1, "", "accept"], [70, 3, 1, "id1", "connections"], [70, 3, 1, "id2", "inputs"], [70, 3, 1, "id0", "nodes"], [70, 3, 1, "id3", "outputs"], [70, 2, 1, "", "set_random_state"]], "bosk.pipeline.builder": [[73, 1, 1, "", "BasePipelineBuilder"], [73, 1, 1, "", "FunctionalBlockWrapper"], [73, 1, 1, "", "FunctionalPipelineBuilder"], [71, 0, 0, "-", "base"], [72, 0, 0, "-", "functional"]], "bosk.pipeline.builder.BasePipelineBuilder": [[73, 2, 1, "", "build"]], "bosk.pipeline.builder.FunctionalBlockWrapper": [[73, 2, 1, "", "__getitem__"], [73, 2, 1, "", "get_input_slot"], [73, 2, 1, "", "get_output_slot"]], "bosk.pipeline.builder.FunctionalPipelineBuilder": [[73, 2, 1, "", "__getattr__"], [73, 2, 1, "", "_get_block_init"], [73, 2, 1, "", "_make_placeholder_fn"], [73, 2, 1, "", "_register_block"], [73, 2, 1, "", "build"], [73, 2, 1, "", "new"], [73, 2, 1, "", "wrap"]], "bosk.pipeline.builder.base": [[71, 1, 1, "", "BasePipelineBuilder"]], "bosk.pipeline.builder.base.BasePipelineBuilder": [[71, 2, 1, "", "build"]], "bosk.pipeline.builder.functional": [[72, 1, 1, "", "FunctionalPipelineBuilder"], [72, 5, 1, "", "SlotOrBlockWrapper"]], "bosk.pipeline.builder.functional.FunctionalPipelineBuilder": [[72, 2, 1, "", "__getattr__"], [72, 2, 1, "", "_get_block_init"], [72, 2, 1, "", "_make_placeholder_fn"], [72, 2, 1, "", "_register_block"], [72, 2, 1, "", "build"], [72, 2, 1, "", "new"], [72, 2, 1, "", "wrap"]], "bosk.pipeline.connection": [[74, 1, 1, "", "Connection"]], "bosk.pipeline.connection.Connection": [[74, 2, 1, "", "accept"], [74, 3, 1, "", "dst"], [74, 3, 1, "", "src"]], "bosk.pipeline.converter": [[76, 1, 1, "", "DaskConverter"], [76, 1, 1, "", "NetworkXConverter"], [75, 0, 0, "-", "dask"], [77, 0, 0, "-", "nx"]], "bosk.pipeline.converter.DaskConverter": [[76, 1, 1, "", "Visitor"], [76, 2, 1, "", "__call__"], [76, 2, 1, "", "_mangle_block"], [76, 2, 1, "", "_mangle_input_slot"], [76, 2, 1, "", "_mangle_output_slot"]], "bosk.pipeline.converter.DaskConverter.Visitor": [[76, 2, 1, "id1", "_"], [76, 2, 1, "", "visit"]], "bosk.pipeline.converter.NetworkXConverter": [[76, 1, 1, "", "Visitor"], [76, 2, 1, "", "__call__"]], "bosk.pipeline.converter.NetworkXConverter.Visitor": [[76, 2, 1, "id2", "_"], [76, 2, 1, "", "visit"]], "bosk.pipeline.converter.dask": [[75, 1, 1, "", "DaskConverter"], [75, 1, 1, "", "DaskOperatorSet"], [75, 1, 1, "", "FitDaskOperatorSet"], [75, 1, 1, "", "TransformDaskOperatorSet"]], "bosk.pipeline.converter.dask.DaskConverter": [[75, 1, 1, "", "Visitor"], [75, 2, 1, "", "__call__"], [75, 2, 1, "", "_mangle_block"], [75, 2, 1, "", "_mangle_input_slot"], [75, 2, 1, "", "_mangle_output_slot"]], "bosk.pipeline.converter.dask.DaskConverter.Visitor": [[75, 2, 1, "id1", "_"], [75, 2, 1, "", "visit"]], "bosk.pipeline.converter.dask.DaskOperatorSet": [[75, 2, 1, "", "bypass"], [75, 2, 1, "", "compute"], [75, 2, 1, "", "extract"]], "bosk.pipeline.converter.dask.FitDaskOperatorSet": [[75, 2, 1, "", "bypass"], [75, 2, 1, "", "compute"], [75, 2, 1, "", "extract"]], "bosk.pipeline.converter.dask.TransformDaskOperatorSet": [[75, 2, 1, "", "bypass"], [75, 2, 1, "", "compute"], [75, 2, 1, "", "extract"]], "bosk.pipeline.converter.nx": [[77, 1, 1, "", "NetworkXConverter"]], "bosk.pipeline.converter.nx.NetworkXConverter": [[77, 1, 1, "", "Visitor"], [77, 2, 1, "", "__call__"]], "bosk.pipeline.converter.nx.NetworkXConverter.Visitor": [[77, 2, 1, "id0", "_"], [77, 2, 1, "", "visit"]], "bosk.pipeline.dynamic": [[78, 1, 1, "", "BaseDynamicPipeline"]], "bosk.pipeline.dynamic.BaseDynamicPipeline": [[78, 2, 1, "", "extend"]], "bosk.pipeline.serializer": [[81, 1, 1, "", "BaseBlockSerializer"], [81, 1, 1, "", "BasePipelineSerializer"], [81, 1, 1, "", "JoblibBlockSerializer"], [81, 1, 1, "", "JoblibPipelineSerializer"], [81, 1, 1, "", "SkopsBlockSerializer"], [81, 1, 1, "", "ZipPipelineSerializer"], [80, 0, 0, "-", "base"], [82, 0, 0, "-", "joblib"], [83, 0, 0, "-", "onnx"], [84, 0, 0, "-", "skops"], [85, 0, 0, "-", "zip"]], "bosk.pipeline.serializer.BaseBlockSerializer": [[81, 2, 1, "", "dump"], [81, 2, 1, "", "load"]], "bosk.pipeline.serializer.BasePipelineSerializer": [[81, 2, 1, "", "dump"], [81, 2, 1, "", "load"]], "bosk.pipeline.serializer.JoblibBlockSerializer": [[81, 2, 1, "", "dump"], [81, 2, 1, "", "load"]], "bosk.pipeline.serializer.JoblibPipelineSerializer": [[81, 2, 1, "", "dump"], [81, 2, 1, "", "load"]], "bosk.pipeline.serializer.SkopsBlockSerializer": [[81, 2, 1, "", "dump"], [81, 2, 1, "", "load"]], "bosk.pipeline.serializer.ZipPipelineSerializer": [[81, 2, 1, "", "_dump_all_blocks"], [81, 2, 1, "", "_dump_block"], [81, 2, 1, "", "_load_all_blocks"], [81, 2, 1, "", "dump"], [81, 2, 1, "", "load"]], "bosk.pipeline.serializer.base": [[80, 1, 1, "", "BaseBlockSerializer"], [80, 1, 1, "", "BasePipelineSerializer"]], "bosk.pipeline.serializer.base.BaseBlockSerializer": [[80, 2, 1, "", "dump"], [80, 2, 1, "", "load"]], "bosk.pipeline.serializer.base.BasePipelineSerializer": [[80, 2, 1, "", "dump"], [80, 2, 1, "", "load"]], "bosk.pipeline.serializer.joblib": [[82, 1, 1, "", "JoblibBlockSerializer"], [82, 1, 1, "", "JoblibPipelineSerializer"]], "bosk.pipeline.serializer.joblib.JoblibBlockSerializer": [[82, 2, 1, "", "dump"], [82, 2, 1, "", "load"]], "bosk.pipeline.serializer.joblib.JoblibPipelineSerializer": [[82, 2, 1, "", "dump"], [82, 2, 1, "", "load"]], "bosk.pipeline.serializer.skops": [[84, 1, 1, "", "SkopsBlockSerializer"]], "bosk.pipeline.serializer.skops.SkopsBlockSerializer": [[84, 2, 1, "", "dump"], [84, 2, 1, "", "load"]], "bosk.pipeline.serializer.zip": [[85, 1, 1, "", "ConnectionSerializer"], [85, 5, 1, "", "STRUCTURE_FILENAME"], [85, 1, 1, "", "SlotSerializer"], [85, 1, 1, "", "ZipPipelineSerializer"]], "bosk.pipeline.serializer.zip.ConnectionSerializer": [[85, 2, 1, "", "from_dict"], [85, 2, 1, "", "to_dict"]], "bosk.pipeline.serializer.zip.SlotSerializer": [[85, 2, 1, "", "from_dict"], [85, 2, 1, "", "input_from_dict"], [85, 2, 1, "", "output_from_dict"], [85, 2, 1, "", "to_dict"]], "bosk.pipeline.serializer.zip.ZipPipelineSerializer": [[85, 2, 1, "", "_dump_all_blocks"], [85, 2, 1, "", "_dump_block"], [85, 2, 1, "", "_load_all_blocks"], [85, 2, 1, "", "dump"], [85, 2, 1, "", "load"]], "bosk.stages": [[86, 1, 1, "", "Stage"], [86, 1, 1, "", "Stages"]], "bosk.stages.Stage": [[86, 3, 1, "", "FIT"], [86, 3, 1, "", "TRANSFORM"]], "bosk.stages.Stages": [[86, 3, 1, "id0", "fit"], [86, 3, 1, "id1", "transform"], [86, 3, 1, "id2", "transform_on_fit"]], "bosk.utility": [[87, 5, 1, "", "RT"], [87, 6, 1, "", "get_rand_int"], [87, 6, 1, "", "get_random_generator"], [87, 6, 1, "", "timer_wrap"]], "bosk.visitor": [[90, 1, 1, "", "BaseVisitor"], [88, 0, 0, "-", "base"], [89, 0, 0, "-", "group"]], "bosk.visitor.BaseVisitor": [[90, 2, 1, "", "visit"]], "bosk.visitor.base": [[88, 1, 1, "", "BaseVisitor"]], "bosk.visitor.base.BaseVisitor": [[88, 2, 1, "", "visit"]], "bosk.visitor.group": [[89, 5, 1, "", "ModificationAction"], [89, 1, 1, "", "ModifyGroupVisitor"]], "bosk.visitor.group.ModifyGroupVisitor": [[89, 2, 1, "", "_"], [89, 2, 1, "", "visit"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:property", "5": "py:data", "6": "py:function", "7": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "property", "Python property"], "5": ["py", "data", "Python data"], "6": ["py", "function", "Python function"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"advanc": 0, "bosk": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 94, 95, 97, 98, 100, 101, 107, 108, 114, 116, 117, 120, 122, 124], "usag": [0, 92, 95, 99, 100, 103, 116], "exampl": [0, 1, 94, 95, 99, 100, 102, 104, 105, 116], "deep": [1, 96], "forest": [1, 96], "architectur": 1, "refer": [1, 91], "auto": [2, 3, 4, 5, 6, 7, 8, 9], "builder": [2, 71, 72, 73], "modul": [2, 3, 4, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 25, 26, 28, 29, 32, 33, 34, 37, 38, 39, 40, 43, 44, 46, 47, 49, 50, 51, 52, 53, 56, 60, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 74, 75, 77, 78, 80, 82, 84, 85, 86, 87, 88, 89], "content": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 94], "class": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 34, 35, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90], "deep_forest": 3, "function": [3, 9, 11, 12, 13, 17, 21, 23, 25, 33, 41, 46, 64, 65, 72, 87, 96], "attribut": [3, 7, 10, 12, 15, 17, 21, 23, 40, 41, 50, 56, 72, 85, 87, 89], "growing_strategi": 4, "submodul": [5, 12, 15, 27, 35, 45, 48, 54, 57, 65, 68, 73, 76, 79, 81, 90], "packag": [5, 12, 15, 18, 19, 20, 21, 23, 24, 27, 31, 35, 41, 45, 48, 54, 57, 65, 68, 73, 76, 79, 81, 90, 98], "layer": 6, "metric": [7, 24, 49], "valid": 8, "block": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 53, 96], "base": [10, 14, 34, 46, 52, 66, 70, 71, 80, 88], "subpackag": [12, 22, 30, 54, 65, 79], "meta": 13, "repo": [14, 15, 16, 17], "scope": 16, "zoo": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], "data_convers": 18, "input": [18, 19, 20, 21, 23, 24, 26, 27, 28, 29, 34, 35, 37, 38, 39, 40, 41, 43, 44, 45], "slot": [18, 19, 20, 21, 23, 24, 26, 27, 28, 29, 34, 35, 37, 38, 39, 40, 41, 43, 44, 45], "fit": [18, 19, 20, 21, 23, 24, 26, 27, 28, 29, 34, 35, 37, 38, 39, 40, 41, 43, 44, 45], "transform": [18, 19, 20, 21, 23, 24, 26, 27, 28, 29, 34, 35, 37, 38, 39, 40, 41, 43, 44, 45], "output": [18, 19, 20, 21, 23, 24, 26, 27, 28, 29, 34, 35, 37, 38, 39, 40, 41, 43, 44, 45], "data_weight": 19, "debug": 20, "gpu_block": 21, "input_plug": 23, "model": [25, 26, 27, 28, 29, 30, 31, 101], "classif": [25, 26, 27, 28, 29], "_jax_util": 25, "fern": 26, "jax": [28, 98, 124], "mgs_fern": 29, "regress": [31, 105], "multi_grained_scan": [32, 33, 34, 35, 36, 37, 38, 39, 40], "_convolution_help": 32, "_pooling_impl": 33, "mil": 36, "multi_grained_scanning_1d": 37, "multi_grained_scanning_2d": 38, "multi_grained_scanning_nd": 39, "pool": 40, "output_plug": 41, "preprocess": 42, "rout": [43, 44, 45], "c": 43, "cv": 44, "comparison": [46, 47, 48, 49, 101], "cross_val": 47, "data": 50, "except": 51, "executor": [52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 96, 100, 103], "parallel": [55, 56, 57, 58, 59], "dask": [55, 75], "greedi": 56, "networkx": 58, "topsort": 59, "recurs": 60, "sklearn_interfac": 61, "timer": 62, "topolog": [63, 69], "util": [64, 87], "painter": [66, 67, 68, 69], "graphviz": 67, "pipelin": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 96, 100, 103, 116], "connect": 74, "convert": [75, 76, 77], "nx": 77, "dynam": 78, "serial": [80, 81, 82, 83, 84, 85, 115], "joblib": 82, "onnx": 83, "skop": 84, "zip": 85, "stage": 86, "visitor": [88, 89, 90], "group": 89, "api": 91, "basic": [92, 96, 100], "user": [92, 101, 103, 115], "guid": [92, 101, 103, 115], "contribut": 93, "guidelin": 93, "set": 93, "up": 93, "develop": 93, "environ": [93, 98], "make": 93, "chang": 93, "code": 93, "submit": 93, "pull": [93, 121], "request": [93, 121], "build": 93, "document": [93, 94], "welcom": 94, "": 94, "quick": 94, "get": 96, "start": 96, "primit": 96, "style": 96, "definit": 96, "automat": 96, "layerwis": 96, "construct": [96, 100], "\u0434\u043e\u0431\u0440\u043e": 97, "\u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c": 97, "\u0432": [97, 108, 121, 123, 124], "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e": 97, "\u043f\u0440\u043e\u0435\u043a\u0442\u0430": [97, 121], "\u043a\u0440\u0430\u0442\u043a\u0438\u0439": 97, "\u043f\u0440\u0438\u043c\u0435\u0440": [97, 106, 107, 111, 114], "\u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435": 97, "instal": 98, "prerequisit": 98, "dev": 98, "autoblock": 99, "A": [100, 115], "note": [100, 115], "about": [100, 115], "manual": 100, "us": 101, "confid": [102, 109], "screen": [102, 109], "multi": 104, "grain": 104, "scan": 104, "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f": [106, 107, 114, 117, 122], "\u0430\u0432\u0442\u043e\u0431\u043b\u043e\u043a\u0430": 106, "\u0431\u0430\u0437\u043e\u0432\u044b\u0439": 107, "\u0437\u0430\u043c\u0435\u0442\u043a\u0430": [107, 113], "\u043e": 107, "\u043a\u043e\u043d\u0432\u0435\u0439\u0435\u0440\u0430\u0445": 107, "\u043e\u0431": [107, 113], "\u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044f\u0445": 107, "\u0440\u0443\u0447\u043d\u043e\u0435": 107, "\u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435": [107, 123], "\u043a\u043e\u043d\u0432\u0435\u0439\u0435\u0440\u0430": [107, 114, 123], "\u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e": 108, "\u043f\u043e": [108, 110, 113, 120], "\u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e": 108, "\u043c\u043e\u0434\u0435\u043b\u0435\u0439": 108, "\u0446\u0435\u043d\u0437\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435": 109, "\u0445\u043e\u0440\u043e\u0448\u043e": 109, "\u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445": 109, "\u0434\u0430\u043d\u043d\u044b\u0445": 109, "\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f": 110, "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044e": [110, 120], "\u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u0435\u0439": 110, "\u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f": 111, "\u043c\u043d\u043e\u0433\u043e\u0437\u0435\u0440\u043d\u0438\u0441\u0442\u043e\u0433\u043e": 111, "\u0441\u043a\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f": 111, "\u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044f": 112, "\u0440\u0435\u0433\u0440\u0435\u0441\u0441\u043e\u0440\u043e\u0432": 112, "\u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f": [113, 120], "\u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438": 113, "\u0443\u0441\u043b\u043e\u0432\u0438\u044f\u0445": 113, "sklearn": [114, 116], "\u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430": [114, 119], "\u043f\u043e\u0432\u0435\u0440\u0445": 114, "requir": 115, "interfac": 116, "over": 116, "\u043f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0435": 117, "\u043f\u0440\u0438\u043c\u0435\u0440\u044b": [117, 118, 120, 122], "\u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440": 118, "\u043c\u043e\u0434\u0435\u043b\u0438": 118, "\u0433\u043b\u0443\u0431\u043e\u043a\u043e\u0433\u043e": 118, "\u043b\u0435\u0441\u0430": 118, "\u0441\u0441\u044b\u043b\u043a\u0438": 118, "\u043d\u0430": 118, "\u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f": 118, "\u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445": 118, "\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435": 119, "\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e": 119, "\u0431\u0430\u0437\u043e\u0432\u0430\u044f": 120, "\u0431\u0430\u0437\u043e\u0432\u044b\u0435": [120, 123], "\u043a\u0430\u043a": 121, "\u0441\u0442\u0430\u0442\u044c": 121, "\u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u043c": 121, "\u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430": [121, 124], "\u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f": 121, "\u0434\u043b\u044f": 121, "\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438": 121, "\u0432\u043d\u0435\u0441\u0435\u043d\u0438\u0435": 121, "\u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439": 121, "\u043a\u043e\u0434": 121, "\u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435": 121, "\u0441\u0431\u043e\u0440\u043a\u0430": 121, "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438": 121, "\u043f\u0440\u0438\u0441\u0442\u0443\u043f\u0430\u044f": 123, "\u043a": 123, "\u0440\u0430\u0431\u043e\u0442\u0435": 123, "\u043f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u044b": 123, "\u0431\u043b\u043e\u043a": 123, "\u043a\u043e\u043d\u0432\u0435\u0439\u0435\u0440": 123, "\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u043c": 123, "\u0441\u0442\u0438\u043b\u0435": 123, "\u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435": 123, "\u0441\u043b\u043e\u0439": 123, "\u0437\u0430": 123, "\u0441\u043b\u043e\u0435\u043c": 123, "\u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c": 123, "\u043f\u0435\u0440\u0435\u0434": 124, "\u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u043e\u0439": 124, "\u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435": 124, "\u043f\u0430\u043a\u0435\u0442\u0430": 124, "\u0440\u0435\u0436\u0438\u043c\u0435": 124, "\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430": 124}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx": 57}, "alltitles": {"Advanced bosk usage examples": [[0, "advanced-bosk-usage-examples"]], "Advanced bosk usage examples:": [[0, null]], "Deep Forest architectures examples": [[1, "deep-forest-architectures-examples"]], "References": [[1, "references"]], "Architectures examples": [[1, "architectures-examples"]], "bosk.auto.builders": [[2, "module-bosk.auto.builders"]], "Module Contents": [[2, "module-contents"], [3, "module-contents"], [4, "module-contents"], [6, "module-contents"], [7, "module-contents"], [8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [11, "module-contents"], [13, "module-contents"], [14, "module-contents"], [16, "module-contents"], [17, "module-contents"], [25, "module-contents"], [26, "module-contents"], [28, "module-contents"], [29, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [43, "module-contents"], [44, "module-contents"], [46, "module-contents"], [47, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [56, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [66, "module-contents"], [67, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [74, "module-contents"], [75, "module-contents"], [77, "module-contents"], [78, "module-contents"], [80, "module-contents"], [82, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"]], "Classes": [[2, "classes"], [3, "classes"], [4, "classes"], [5, "classes"], [6, "classes"], [7, "classes"], [8, "classes"], [9, "classes"], [10, "classes"], [11, "classes"], [12, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [31, "classes"], [32, "classes"], [34, "classes"], [35, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [56, "classes"], [57, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [88, "classes"], [89, "classes"], [90, "classes"]], "bosk.auto.deep_forest": [[3, "module-bosk.auto.deep_forest"]], "Functions": [[3, "functions"], [9, "functions"], [12, "functions"], [13, "functions"], [17, "functions"], [21, "functions"], [23, "functions"], [25, "functions"], [33, "functions"], [41, "functions"], [46, "functions"], [64, "functions"], [65, "functions"], [87, "functions"]], "Attributes": [[3, "attributes"], [7, "attributes"], [10, "attributes"], [12, "attributes"], [15, "attributes"], [17, "attributes"], [21, "attributes"], [23, "attributes"], [40, "attributes"], [41, "attributes"], [50, "attributes"], [56, "attributes"], [72, "attributes"], [85, "attributes"], [87, "attributes"], [89, "attributes"]], "bosk.auto.growing_strategies": [[4, "module-bosk.auto.growing_strategies"]], "bosk.auto": [[5, "module-bosk.auto"]], "Submodules": [[5, "submodules"], [12, "submodules"], [15, "submodules"], [27, "submodules"], [35, "submodules"], [45, "submodules"], [48, "submodules"], [54, "submodules"], [57, "submodules"], [65, "submodules"], [68, "submodules"], [73, "submodules"], [76, "submodules"], [79, "submodules"], [81, "submodules"], [90, "submodules"]], "Package Contents": [[5, "package-contents"], [12, "package-contents"], [15, "package-contents"], [18, "package-contents"], [19, "package-contents"], [20, "package-contents"], [21, "package-contents"], [23, "package-contents"], [24, "package-contents"], [27, "package-contents"], [31, "package-contents"], [35, "package-contents"], [41, "package-contents"], [45, "package-contents"], [48, "package-contents"], [54, "package-contents"], [57, "package-contents"], [65, "package-contents"], [68, "package-contents"], [73, "package-contents"], [76, "package-contents"], [79, "package-contents"], [81, "package-contents"], [90, "package-contents"]], "bosk.auto.layers": [[6, "module-bosk.auto.layers"]], "bosk.auto.metrics": [[7, "module-bosk.auto.metrics"]], "bosk.auto.validation": [[8, "module-bosk.auto.validation"]], "bosk.block.auto": [[9, "module-bosk.block.auto"]], "bosk.block.base": [[10, "module-bosk.block.base"]], "bosk.block.functional": [[11, "module-bosk.block.functional"]], "bosk.block": [[12, "module-bosk.block"]], "Subpackages": [[12, "subpackages"], [22, "subpackages"], [30, "subpackages"], [54, "subpackages"], [65, "subpackages"], [79, "subpackages"]], "bosk.block.meta": [[13, "module-bosk.block.meta"]], "bosk.block.repo.base": [[14, "module-bosk.block.repo.base"]], "bosk.block.repo": [[15, "module-bosk.block.repo"]], "bosk.block.repo.scope": [[16, "module-bosk.block.repo.scope"]], "bosk.block.repo.zoo": [[17, "module-bosk.block.repo.zoo"]], "bosk.block.zoo.data_conversion": [[18, "module-bosk.block.zoo.data_conversion"]], "Input slots": [[18, "input-slots"], [18, "id1"], [18, "id5"], [18, "id9"], [18, "id13"], [18, "id17"], [19, "input-slots"], [20, "input-slots"], [21, "input-slots"], [23, "input-slots"], [23, "id3"], [24, "input-slots"], [24, "id1"], [24, "id5"], [24, "id9"], [24, "id13"], [26, "input-slots"], [27, "input-slots"], [27, "id1"], [27, "id5"], [27, "id9"], [28, "input-slots"], [28, "id1"], [29, "input-slots"], [34, "input-slots"], [35, "input-slots"], [35, "id1"], [35, "id5"], [35, "id9"], [37, "input-slots"], [38, "input-slots"], [39, "input-slots"], [40, "input-slots"], [41, "input-slots"], [43, "input-slots"], [43, "id1"], [43, "id5"], [44, "input-slots"], [44, "id1"], [45, "input-slots"], [45, "id1"], [45, "id5"], [45, "id9"], [45, "id13"]], "Fit inputs": [[18, "fit-inputs"], [18, "id2"], [18, "id6"], [18, "id10"], [18, "id14"], [18, "id18"], [19, "fit-inputs"], [20, "fit-inputs"], [21, "fit-inputs"], [23, "fit-inputs"], [23, "id4"], [24, "fit-inputs"], [24, "id2"], [24, "id6"], [24, "id10"], [24, "id14"], [26, "fit-inputs"], [27, "fit-inputs"], [27, "id2"], [27, "id6"], [27, "id10"], [28, "fit-inputs"], [28, "id2"], [29, "fit-inputs"], [34, "fit-inputs"], [35, "fit-inputs"], [35, "id2"], [35, "id6"], [35, "id10"], [37, "fit-inputs"], [38, "fit-inputs"], [39, "fit-inputs"], [40, "fit-inputs"], [41, "fit-inputs"], [43, "fit-inputs"], [43, "id2"], [43, "id6"], [44, "fit-inputs"], [44, "id2"], [45, "fit-inputs"], [45, "id2"], [45, "id6"], [45, "id10"], [45, "id14"]], "Transform inputs": [[18, "transform-inputs"], [18, "id3"], [18, "id7"], [18, "id11"], [18, "id15"], [18, "id19"], [19, "transform-inputs"], [20, "transform-inputs"], [21, "transform-inputs"], [23, "transform-inputs"], [23, "id5"], [24, "transform-inputs"], [24, "id3"], [24, "id7"], [24, "id11"], [24, "id15"], [26, "transform-inputs"], [27, "transform-inputs"], [27, "id3"], [27, "id7"], [27, "id11"], [28, "transform-inputs"], [28, "id3"], [29, "transform-inputs"], [34, "transform-inputs"], [35, "transform-inputs"], [35, "id3"], [35, "id7"], [35, "id11"], [37, "transform-inputs"], [38, "transform-inputs"], [39, "transform-inputs"], [40, "transform-inputs"], [41, "transform-inputs"], [43, "transform-inputs"], [43, "id3"], [43, "id7"], [44, "transform-inputs"], [44, "id3"], [45, "transform-inputs"], [45, "id3"], [45, "id7"], [45, "id11"], [45, "id15"]], "Output slots": [[18, "output-slots"], [18, "id4"], [18, "id8"], [18, "id12"], [18, "id16"], [18, "id20"], [19, "output-slots"], [20, "output-slots"], [21, "output-slots"], [23, "output-slots"], [23, "id6"], [24, "output-slots"], [24, "id4"], [24, "id8"], [24, "id12"], [24, "id16"], [26, "output-slots"], [27, "output-slots"], [27, "id4"], [27, "id8"], [27, "id12"], [28, "output-slots"], [28, "id4"], [29, "output-slots"], [34, "output-slots"], [35, "output-slots"], [35, "id4"], [35, "id8"], [35, "id12"], [37, "output-slots"], [38, "output-slots"], [39, "output-slots"], [40, "output-slots"], [41, "output-slots"], [43, "output-slots"], [43, "id4"], [43, "id8"], [44, "output-slots"], [44, "id4"], [45, "output-slots"], [45, "id4"], [45, "id8"], [45, "id12"], [45, "id16"]], "bosk.block.zoo.data_weighting": [[19, "module-bosk.block.zoo.data_weighting"]], "bosk.block.zoo.debugging": [[20, "module-bosk.block.zoo.debugging"]], "bosk.block.zoo.gpu_blocks": [[21, "module-bosk.block.zoo.gpu_blocks"]], "bosk.block.zoo": [[22, "module-bosk.block.zoo"]], "bosk.block.zoo.input_plugs": [[23, "module-bosk.block.zoo.input_plugs"]], "bosk.block.zoo.metrics": [[24, "module-bosk.block.zoo.metrics"]], "bosk.block.zoo.models.classification._jax_util": [[25, "module-bosk.block.zoo.models.classification._jax_util"]], "bosk.block.zoo.models.classification.ferns": [[26, "module-bosk.block.zoo.models.classification.ferns"]], "bosk.block.zoo.models.classification": [[27, "module-bosk.block.zoo.models.classification"]], "bosk.block.zoo.models.classification.jax": [[28, "module-bosk.block.zoo.models.classification.jax"]], "bosk.block.zoo.models.classification.mgs_ferns": [[29, "module-bosk.block.zoo.models.classification.mgs_ferns"]], "bosk.block.zoo.models": [[30, "module-bosk.block.zoo.models"]], "bosk.block.zoo.models.regression": [[31, "module-bosk.block.zoo.models.regression"]], "bosk.block.zoo.multi_grained_scanning._convolution_helpers": [[32, "module-bosk.block.zoo.multi_grained_scanning._convolution_helpers"]], "bosk.block.zoo.multi_grained_scanning._pooling_impl": [[33, "module-bosk.block.zoo.multi_grained_scanning._pooling_impl"]], "bosk.block.zoo.multi_grained_scanning.base": [[34, "module-bosk.block.zoo.multi_grained_scanning.base"]], "bosk.block.zoo.multi_grained_scanning": [[35, "module-bosk.block.zoo.multi_grained_scanning"]], "bosk.block.zoo.multi_grained_scanning.mil": [[36, "module-bosk.block.zoo.multi_grained_scanning.mil"]], "bosk.block.zoo.multi_grained_scanning.multi_grained_scanning_1d": [[37, "module-bosk.block.zoo.multi_grained_scanning.multi_grained_scanning_1d"]], "bosk.block.zoo.multi_grained_scanning.multi_grained_scanning_2d": [[38, "module-bosk.block.zoo.multi_grained_scanning.multi_grained_scanning_2d"]], "bosk.block.zoo.multi_grained_scanning.multi_grained_scanning_nd": [[39, "module-bosk.block.zoo.multi_grained_scanning.multi_grained_scanning_nd"]], "bosk.block.zoo.multi_grained_scanning.pooling": [[40, "module-bosk.block.zoo.multi_grained_scanning.pooling"]], "bosk.block.zoo.output_plugs": [[41, "module-bosk.block.zoo.output_plugs"]], "bosk.block.zoo.preprocessing": [[42, "module-bosk.block.zoo.preprocessing"]], "bosk.block.zoo.routing.cs": [[43, "module-bosk.block.zoo.routing.cs"]], "bosk.block.zoo.routing.cv": [[44, "module-bosk.block.zoo.routing.cv"]], "bosk.block.zoo.routing": [[45, "module-bosk.block.zoo.routing"]], "bosk.comparison.base": [[46, "module-bosk.comparison.base"]], "bosk.comparison.cross_val": [[47, "module-bosk.comparison.cross_val"]], "bosk.comparison": [[48, "module-bosk.comparison"]], "bosk.comparison.metric": [[49, "module-bosk.comparison.metric"]], "bosk.data": [[50, "module-bosk.data"]], "bosk.exceptions": [[51, "module-bosk.exceptions"]], "bosk.executor.base": [[52, "module-bosk.executor.base"]], "bosk.executor.block": [[53, "module-bosk.executor.block"]], "bosk.executor": [[54, "module-bosk.executor"]], "bosk.executor.parallel.dask": [[55, "module-bosk.executor.parallel.dask"]], "bosk.executor.parallel.greedy": [[56, "module-bosk.executor.parallel.greedy"]], "bosk.executor.parallel": [[57, "module-bosk.executor.parallel"]], "bosk.executor.parallel.networkx": [[58, "module-bosk.executor.parallel.networkx"]], "bosk.executor.parallel.topsort": [[59, "module-bosk.executor.parallel.topsort"]], "bosk.executor.recursive": [[60, "module-bosk.executor.recursive"]], "bosk.executor.sklearn_interface": [[61, "module-bosk.executor.sklearn_interface"]], "bosk.executor.timer": [[62, "module-bosk.executor.timer"]], "bosk.executor.topological": [[63, "module-bosk.executor.topological"]], "bosk.executor.utility": [[64, "module-bosk.executor.utility"]], "bosk": [[65, "module-bosk"]], "bosk.painter.base": [[66, "module-bosk.painter.base"]], "bosk.painter.graphviz": [[67, "module-bosk.painter.graphviz"]], "bosk.painter": [[68, "module-bosk.painter"]], "bosk.painter.topological": [[69, "module-bosk.painter.topological"]], "bosk.pipeline.base": [[70, "module-bosk.pipeline.base"]], "bosk.pipeline.builder.base": [[71, "module-bosk.pipeline.builder.base"]], "bosk.pipeline.builder.functional": [[72, "module-bosk.pipeline.builder.functional"]], "bosk.pipeline.builder": [[73, "module-bosk.pipeline.builder"]], "bosk.pipeline.connection": [[74, "module-bosk.pipeline.connection"]], "bosk.pipeline.converter.dask": [[75, "module-bosk.pipeline.converter.dask"]], "bosk.pipeline.converter": [[76, "module-bosk.pipeline.converter"]], "bosk.pipeline.converter.nx": [[77, "module-bosk.pipeline.converter.nx"]], "bosk.pipeline.dynamic": [[78, "module-bosk.pipeline.dynamic"]], "bosk.pipeline": [[79, "module-bosk.pipeline"]], "bosk.pipeline.serializer.base": [[80, "module-bosk.pipeline.serializer.base"]], "bosk.pipeline.serializer": [[81, "module-bosk.pipeline.serializer"]], "bosk.pipeline.serializer.joblib": [[82, "module-bosk.pipeline.serializer.joblib"]], "bosk.pipeline.serializer.onnx": [[83, "module-bosk.pipeline.serializer.onnx"]], "bosk.pipeline.serializer.skops": [[84, "module-bosk.pipeline.serializer.skops"]], "bosk.pipeline.serializer.zip": [[85, "module-bosk.pipeline.serializer.zip"]], "bosk.stages": [[86, "module-bosk.stages"]], "bosk.utility": [[87, "module-bosk.utility"]], "bosk.visitor.base": [[88, "module-bosk.visitor.base"]], "bosk.visitor.group": [[89, "module-bosk.visitor.group"]], "bosk.visitor": [[90, "module-bosk.visitor"]], "API Reference": [[91, "api-reference"]], "Basic bosk usage user guide": [[92, "basic-bosk-usage-user-guide"]], "Basic user guide:": [[92, null]], "Contributing guidelines": [[93, "contributing-guidelines"]], "Setting up a Development Environment": [[93, "setting-up-a-development-environment"]], "Making Changes to the code": [[93, "making-changes-to-the-code"]], "Submitting a Pull Request": [[93, "submitting-a-pull-request"]], "Building the Documentation": [[93, "building-the-documentation"]], "Welcome to bosk\u2019s documentation!": [[94, "welcome-to-bosk-s-documentation"]], "Quick example": [[94, "quick-example"]], "Contents": [[94, "contents"]], "Bosk usage examples": [[95, "bosk-usage-examples"]], "Bosk usage examples:": [[95, null]], "Getting started": [[96, "getting-started"]], "Basic primitives": [[96, "basic-primitives"]], "Block": [[96, "block"]], "Pipeline": [[96, "pipeline"]], "Functional-style Pipeline Definition": [[96, "functional-style-pipeline-definition"]], "Automatic layerwise Deep Forest construction": [[96, "automatic-layerwise-deep-forest-construction"]], "Executor": [[96, "executor"]], "\u0414\u043e\u0431\u0440\u043e \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 bosk!": [[97, "bosk"]], "\u041a\u0440\u0430\u0442\u043a\u0438\u0439 \u043f\u0440\u0438\u043c\u0435\u0440": [[97, "id1"]], "\u0421\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435": [[97, "id2"]], "Installing bosk": [[98, "installing-bosk"]], "Prerequisites": [[98, "prerequisites"]], "Environment": [[98, "environment"]], "JAX installation": [[98, "jax-installation"]], "Package Installation": [[98, "package-installation"]], "Dev Installation": [[98, "dev-installation"]], "Example of the autoblock usage": [[99, "Example-of-the-autoblock-usage"]], "Example of the basic bosk usage": [[100, "Example-of-the-basic-bosk-usage"]], "A note about pipelines": [[100, "A-note-about-pipelines"]], "A note about executors": [[100, "A-note-about-executors"]], "Manual pipeline construction": [[100, "Manual-pipeline-construction"]], "User guide of the models comparison using bosk": [[101, "User-guide-of-the-models-comparison-using-bosk"]], "Confidence screening example": [[102, "Confidence-screening-example"]], "User guide of the pipeline executors usage": [[103, "User-guide-of-the-pipeline-executors-usage"]], "Multi-grained scanning example": [[104, "Multi-grained-scanning-example"]], "Regression example": [[105, "Regression-example"]], "\u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0430\u0432\u0442\u043e\u0431\u043b\u043e\u043a\u0430": [[106, "\u041f\u0440\u0438\u043c\u0435\u0440-\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f-\u0430\u0432\u0442\u043e\u0431\u043b\u043e\u043a\u0430"]], "\u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f bosk": [[107, "\u0411\u0430\u0437\u043e\u0432\u044b\u0439-\u043f\u0440\u0438\u043c\u0435\u0440-\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f-bosk"]], "\u0417\u0430\u043c\u0435\u0442\u043a\u0430 \u043e \u043a\u043e\u043d\u0432\u0435\u0439\u0435\u0440\u0430\u0445": [[107, "\u0417\u0430\u043c\u0435\u0442\u043a\u0430-\u043e-\u043a\u043e\u043d\u0432\u0435\u0439\u0435\u0440\u0430\u0445"]], "\u0417\u0430\u043c\u0435\u0442\u043a\u0430 \u043e\u0431 \u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044f\u0445": [[107, "\u0417\u0430\u043c\u0435\u0442\u043a\u0430-\u043e\u0431-\u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044f\u0445"]], "\u0420\u0443\u0447\u043d\u043e\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u0432\u0435\u0439\u0435\u0440\u0430": [[107, "\u0420\u0443\u0447\u043d\u043e\u0435-\u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435-\u043a\u043e\u043d\u0432\u0435\u0439\u0435\u0440\u0430"]], "\u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 bosk": [[108, "\u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e-\u043f\u043e-\u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e-\u043c\u043e\u0434\u0435\u043b\u0435\u0439-\u0432-bosk"]], "\u0426\u0435\u043d\u0437\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0445\u043e\u0440\u043e\u0448\u043e \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 (Confidence screening)": [[109, "\u0426\u0435\u043d\u0437\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435-\u0445\u043e\u0440\u043e\u0448\u043e-\u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445-\u0434\u0430\u043d\u043d\u044b\u0445-(Confidence-screening)"]], "\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044e \u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u0435\u0439": [[110, "\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f-\u043f\u043e-\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044e-\u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u0435\u0439"]], "\u041f\u0440\u0438\u043c\u0435\u0440 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u0437\u0435\u0440\u043d\u0438\u0441\u0442\u043e\u0433\u043e \u0441\u043a\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f": [[111, "\u041f\u0440\u0438\u043c\u0435\u0440-\u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f-\u043c\u043d\u043e\u0433\u043e\u0437\u0435\u0440\u043d\u0438\u0441\u0442\u043e\u0433\u043e-\u0441\u043a\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]], "\u041a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u043e\u0440\u043e\u0432": [[112, "\u041a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044f-\u0440\u0435\u0433\u0440\u0435\u0441\u0441\u043e\u0440\u043e\u0432"]], "\u0418\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f \u043f\u043e \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438": [[113, "\u0418\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f-\u043f\u043e-\u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438"]], "\u0417\u0430\u043c\u0435\u0442\u043a\u0430 \u043e\u0431 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u0445 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438": [[113, "\u0417\u0430\u043c\u0435\u0442\u043a\u0430-\u043e\u0431-\u0443\u0441\u043b\u043e\u0432\u0438\u044f\u0445-\u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438"]], "\u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f sklearn \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 \u043f\u043e\u0432\u0435\u0440\u0445 \u043a\u043e\u043d\u0432\u0435\u0439\u0435\u0440\u0430 bosk": [[114, "\u041f\u0440\u0438\u043c\u0435\u0440-\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f-sklearn-\u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430-\u043f\u043e\u0432\u0435\u0440\u0445-\u043a\u043e\u043d\u0432\u0435\u0439\u0435\u0440\u0430-bosk"]], "Serialization user guide": [[115, "Serialization-user-guide"]], "A note about serialization requirements": [[115, "A-note-about-serialization-requirements"]], "Example of the sklearn interface usage over the bosk pipeline": [[116, "Example-of-the-sklearn-interface-usage-over-the-bosk-pipeline"]], "\u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f bosk": [[117, "bosk"]], "\u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f bosk:": [[117, null]], "\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440 \u043c\u043e\u0434\u0435\u043b\u0438 \u0413\u043b\u0443\u0431\u043e\u043a\u043e\u0433\u043e \u043b\u0435\u0441\u0430": [[118, "id1"]], "\u0421\u0441\u044b\u043b\u043a\u0438 \u043d\u0430 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f": [[118, "id2"]], "\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440": [[118, "id3"]], "\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430": [[119, "id1"]], "\u0411\u0430\u0437\u043e\u0432\u0430\u044f \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f \u043f\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044e bosk": [[120, "bosk"]], "\u0411\u0430\u0437\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b:": [[120, null]], "\u041a\u0430\u043a \u0441\u0442\u0430\u0442\u044c \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0430": [[121, "id1"]], "\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438": [[121, "id2"]], "\u0412\u043d\u0435\u0441\u0435\u043d\u0438\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0432 \u043a\u043e\u0434": [[121, "id3"]], "\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 Pull Request": [[121, "pull-request"]], "\u0421\u0431\u043e\u0440\u043a\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438": [[121, "id7"]], "\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f bosk": [[122, "bosk"]], "\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f bosk:": [[122, null]], "\u041f\u0440\u0438\u0441\u0442\u0443\u043f\u0430\u044f \u043a \u0440\u0430\u0431\u043e\u0442\u0435": [[123, "id1"]], "\u0411\u0430\u0437\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u044b": [[123, "id3"]], "\u0411\u043b\u043e\u043a": [[123, "block"]], "\u041a\u043e\u043d\u0432\u0435\u0439\u0435\u0440": [[123, "pipeline"]], "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u0432\u0435\u0439\u0435\u0440\u0430 \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u043c \u0441\u0442\u0438\u043b\u0435": [[123, "functional-pipeline-builder"]], "\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u0432\u0435\u0439\u0435\u0440\u0430 \u0441\u043b\u043e\u0439 \u0437\u0430 \u0441\u043b\u043e\u0435\u043c": [[123, "automatic-pipeline"]], "\u0418\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c": [[123, "executor"]], "\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 bosk": [[124, "bosk"]], "\u041f\u0435\u0440\u0435\u0434 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u043e\u0439": [[124, "id1"]], "\u041e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435": [[124, "id2"]], "\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 JAX": [[124, "jax"]], "\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043f\u0430\u043a\u0435\u0442\u0430": [[124, "install-package"]], "\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0432 \u0440\u0435\u0436\u0438\u043c\u0435 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430": [[124, "dev-install"]]}, "indexentries": {"sequentialpipelinebuilder (class in bosk.auto.builders)": [[2, "bosk.auto.builders.SequentialPipelineBuilder"]], "_log_metrics() (bosk.auto.builders.sequentialpipelinebuilder method)": [[2, "bosk.auto.builders.SequentialPipelineBuilder._log_metrics"]], "append() (bosk.auto.builders.sequentialpipelinebuilder method)": [[2, "bosk.auto.builders.SequentialPipelineBuilder.append"]], "base_input_names (bosk.auto.builders.sequentialpipelinebuilder attribute)": [[2, "bosk.auto.builders.SequentialPipelineBuilder.base_input_names"]], "bosk.auto.builders": [[2, "module-bosk.auto.builders"]], "build() (bosk.auto.builders.sequentialpipelinebuilder method)": [[2, "bosk.auto.builders.SequentialPipelineBuilder.build"]], "history (bosk.auto.builders.sequentialpipelinebuilder attribute)": [[2, "bosk.auto.builders.SequentialPipelineBuilder.history"]], "module": [[2, "module-bosk.auto.builders"], [3, "module-bosk.auto.deep_forest"], [4, "module-bosk.auto.growing_strategies"], [5, "module-bosk.auto"], [6, "module-bosk.auto.layers"], [7, "module-bosk.auto.metrics"], [8, "module-bosk.auto.validation"], [9, "module-bosk.block.auto"], [10, "module-bosk.block.base"], [11, "module-bosk.block.functional"], [12, "module-bosk.block"], [13, "module-bosk.block.meta"], [14, "module-bosk.block.repo.base"], [15, "module-bosk.block.repo"], [16, "module-bosk.block.repo.scope"], [17, "module-bosk.block.repo.zoo"], [18, "module-bosk.block.zoo.data_conversion"], [19, "module-bosk.block.zoo.data_weighting"], [20, "module-bosk.block.zoo.debugging"], [21, "module-bosk.block.zoo.gpu_blocks"], [22, "module-bosk.block.zoo"], [23, "module-bosk.block.zoo.input_plugs"], [24, "module-bosk.block.zoo.metrics"], [25, "module-bosk.block.zoo.models.classification._jax_util"], [26, "module-bosk.block.zoo.models.classification.ferns"], [27, "module-bosk.block.zoo.models.classification"], [28, "module-bosk.block.zoo.models.classification.jax"], [29, "module-bosk.block.zoo.models.classification.mgs_ferns"], [30, "module-bosk.block.zoo.models"], [31, "module-bosk.block.zoo.models.regression"], [32, "module-bosk.block.zoo.multi_grained_scanning._convolution_helpers"], [33, "module-bosk.block.zoo.multi_grained_scanning._pooling_impl"], [34, "module-bosk.block.zoo.multi_grained_scanning.base"], [35, "module-bosk.block.zoo.multi_grained_scanning"], [36, "module-bosk.block.zoo.multi_grained_scanning.mil"], [37, "module-bosk.block.zoo.multi_grained_scanning.multi_grained_scanning_1d"], [38, "module-bosk.block.zoo.multi_grained_scanning.multi_grained_scanning_2d"], [39, "module-bosk.block.zoo.multi_grained_scanning.multi_grained_scanning_nd"], [40, "module-bosk.block.zoo.multi_grained_scanning.pooling"], [41, "module-bosk.block.zoo.output_plugs"], [42, "module-bosk.block.zoo.preprocessing"], [43, "module-bosk.block.zoo.routing.cs"], [44, "module-bosk.block.zoo.routing.cv"], [45, "module-bosk.block.zoo.routing"], [46, "module-bosk.comparison.base"], [47, "module-bosk.comparison.cross_val"], [48, "module-bosk.comparison"], [49, "module-bosk.comparison.metric"], [50, "module-bosk.data"], [51, "module-bosk.exceptions"], [52, "module-bosk.executor.base"], [53, "module-bosk.executor.block"], [54, "module-bosk.executor"], [55, "module-bosk.executor.parallel.dask"], [56, "module-bosk.executor.parallel.greedy"], [57, "module-bosk.executor.parallel"], [58, "module-bosk.executor.parallel.networkx"], [59, "module-bosk.executor.parallel.topsort"], [60, "module-bosk.executor.recursive"], [61, "module-bosk.executor.sklearn_interface"], [62, "module-bosk.executor.timer"], [63, "module-bosk.executor.topological"], [64, "module-bosk.executor.utility"], [65, "module-bosk"], [66, "module-bosk.painter.base"], [67, "module-bosk.painter.graphviz"], [68, "module-bosk.painter"], [69, "module-bosk.painter.topological"], [70, "module-bosk.pipeline.base"], [71, "module-bosk.pipeline.builder.base"], [72, "module-bosk.pipeline.builder.functional"], [73, "module-bosk.pipeline.builder"], [74, "module-bosk.pipeline.connection"], [75, "module-bosk.pipeline.converter.dask"], [76, "module-bosk.pipeline.converter"], [77, "module-bosk.pipeline.converter.nx"], [78, "module-bosk.pipeline.dynamic"], [79, "module-bosk.pipeline"], [80, "module-bosk.pipeline.serializer.base"], [81, "module-bosk.pipeline.serializer"], [82, "module-bosk.pipeline.serializer.joblib"], [83, "module-bosk.pipeline.serializer.onnx"], [84, "module-bosk.pipeline.serializer.skops"], [85, "module-bosk.pipeline.serializer.zip"], [86, "module-bosk.stages"], [87, "module-bosk.utility"], [88, "module-bosk.visitor.base"], [89, "module-bosk.visitor.group"], [90, "module-bosk.visitor"]], "pipelines (bosk.auto.builders.sequentialpipelinebuilder attribute)": [[2, "bosk.auto.builders.SequentialPipelineBuilder.pipelines"]], "baseautodeepforestconstructor (class in bosk.auto.deep_forest)": [[3, "bosk.auto.deep_forest.BaseAutoDeepForestConstructor"]], "classicaldeepforestconstructor (class in bosk.auto.deep_forest)": [[3, "bosk.auto.deep_forest.ClassicalDeepForestConstructor"]], "default_executor_cls (in module bosk.auto.deep_forest)": [[3, "bosk.auto.deep_forest.DEFAULT_EXECUTOR_CLS"]], "default_make_metrics() (in module bosk.auto.deep_forest)": [[3, "bosk.auto.deep_forest.DEFAULT_MAKE_METRICS"]], "hyperparamsearchdeepforestconstructor (class in bosk.auto.deep_forest)": [[3, "bosk.auto.deep_forest.HyperparamSearchDeepForestConstructor"]], "layer_cls (bosk.auto.deep_forest.classicaldeepforestconstructor attribute)": [[3, "bosk.auto.deep_forest.ClassicalDeepForestConstructor.LAYER_CLS"]], "layer_cls (bosk.auto.deep_forest.hyperparamsearchdeepforestconstructor attribute)": [[3, "bosk.auto.deep_forest.HyperparamSearchDeepForestConstructor.LAYER_CLS"]], "mgsdeepforestconstructor (class in bosk.auto.deep_forest)": [[3, "bosk.auto.deep_forest.MGSDeepForestConstructor"]], "mgs_layer_cls (bosk.auto.deep_forest.mgsdeepforestconstructor attribute)": [[3, "bosk.auto.deep_forest.MGSDeepForestConstructor.MGS_LAYER_CLS"]], "stacking_layer_cls (bosk.auto.deep_forest.mgsdeepforestconstructor attribute)": [[3, "bosk.auto.deep_forest.MGSDeepForestConstructor.STACKING_LAYER_CLS"]], "_make_base_df_blocks() (in module bosk.auto.deep_forest)": [[3, "bosk.auto.deep_forest._make_base_df_blocks"]], "bosk.auto.deep_forest": [[3, "module-bosk.auto.deep_forest"]], "construct() (bosk.auto.deep_forest.baseautodeepforestconstructor method)": [[3, "bosk.auto.deep_forest.BaseAutoDeepForestConstructor.construct"]], "make_step_layer() (bosk.auto.deep_forest.baseautodeepforestconstructor method)": [[3, "bosk.auto.deep_forest.BaseAutoDeepForestConstructor.make_step_layer"]], "make_step_layer() (bosk.auto.deep_forest.classicaldeepforestconstructor method)": [[3, "bosk.auto.deep_forest.ClassicalDeepForestConstructor.make_step_layer"]], "make_step_layer() (bosk.auto.deep_forest.hyperparamsearchdeepforestconstructor method)": [[3, "bosk.auto.deep_forest.HyperparamSearchDeepForestConstructor.make_step_layer"]], "make_step_layer() (bosk.auto.deep_forest.mgsdeepforestconstructor method)": [[3, "bosk.auto.deep_forest.MGSDeepForestConstructor.make_step_layer"]], "n_steps (bosk.auto.deep_forest.baseautodeepforestconstructor property)": [[3, "bosk.auto.deep_forest.BaseAutoDeepForestConstructor.n_steps"]], "n_steps (bosk.auto.deep_forest.classicaldeepforestconstructor attribute)": [[3, "bosk.auto.deep_forest.ClassicalDeepForestConstructor.n_steps"]], "n_steps (bosk.auto.deep_forest.hyperparamsearchdeepforestconstructor attribute)": [[3, "bosk.auto.deep_forest.HyperparamSearchDeepForestConstructor.n_steps"]], "n_steps (bosk.auto.deep_forest.mgsdeepforestconstructor attribute)": [[3, "bosk.auto.deep_forest.MGSDeepForestConstructor.n_steps"]], "rf_param_grid (bosk.auto.deep_forest.hyperparamsearchdeepforestconstructor attribute)": [[3, "bosk.auto.deep_forest.HyperparamSearchDeepForestConstructor.rf_param_grid"]], "rf_params (bosk.auto.deep_forest.classicaldeepforestconstructor attribute)": [[3, "bosk.auto.deep_forest.ClassicalDeepForestConstructor.rf_params"]], "rf_params (bosk.auto.deep_forest.mgsdeepforestconstructor attribute)": [[3, "bosk.auto.deep_forest.MGSDeepForestConstructor.rf_params"]], "defaultgrowingstrategy (class in bosk.auto.growing_strategies)": [[4, "bosk.auto.growing_strategies.DefaultGrowingStrategy"]], "earlystoppingcv (class in bosk.auto.growing_strategies)": [[4, "bosk.auto.growing_strategies.EarlyStoppingCV"]], "earlystoppingval (class in bosk.auto.growing_strategies)": [[4, "bosk.auto.growing_strategies.EarlyStoppingVal"]], "growingstrategy (class in bosk.auto.growing_strategies)": [[4, "bosk.auto.growing_strategies.GrowingStrategy"]], "bosk.auto.growing_strategies": [[4, "module-bosk.auto.growing_strategies"]], "need_grow() (bosk.auto.growing_strategies.defaultgrowingstrategy method)": [[4, "bosk.auto.growing_strategies.DefaultGrowingStrategy.need_grow"]], "need_grow() (bosk.auto.growing_strategies.earlystoppingcv method)": [[4, "bosk.auto.growing_strategies.EarlyStoppingCV.need_grow"]], "need_grow() (bosk.auto.growing_strategies.earlystoppingval method)": [[4, "bosk.auto.growing_strategies.EarlyStoppingVal.need_grow"]], "need_grow() (bosk.auto.growing_strategies.growingstrategy method)": [[4, "bosk.auto.growing_strategies.GrowingStrategy.need_grow"]], "trim() (bosk.auto.growing_strategies.earlystoppingcv method)": [[4, "bosk.auto.growing_strategies.EarlyStoppingCV.trim"]], "trim() (bosk.auto.growing_strategies.earlystoppingval method)": [[4, "bosk.auto.growing_strategies.EarlyStoppingVal.trim"]], "trim() (bosk.auto.growing_strategies.growingstrategy method)": [[4, "bosk.auto.growing_strategies.GrowingStrategy.trim"]], "baseautodeepforestconstructor (class in bosk.auto)": [[5, "bosk.auto.BaseAutoDeepForestConstructor"]], "classicaldeepforestconstructor (class in bosk.auto)": [[5, "bosk.auto.ClassicalDeepForestConstructor"]], "earlystoppingcv (class in bosk.auto)": [[5, "bosk.auto.EarlyStoppingCV"]], "earlystoppingval (class in bosk.auto)": [[5, "bosk.auto.EarlyStoppingVal"]], "hyperparamsearchdeepforestconstructor (class in bosk.auto)": [[5, "bosk.auto.HyperparamSearchDeepForestConstructor"]], "layer_cls (bosk.auto.classicaldeepforestconstructor attribute)": [[5, "bosk.auto.ClassicalDeepForestConstructor.LAYER_CLS"]], "layer_cls (bosk.auto.hyperparamsearchdeepforestconstructor attribute)": [[5, "bosk.auto.HyperparamSearchDeepForestConstructor.LAYER_CLS"]], "mgsdeepforestconstructor (class in bosk.auto)": [[5, "bosk.auto.MGSDeepForestConstructor"]], "mgs_layer_cls (bosk.auto.mgsdeepforestconstructor attribute)": [[5, "bosk.auto.MGSDeepForestConstructor.MGS_LAYER_CLS"]], "metricsevaluator (class in bosk.auto)": [[5, "bosk.auto.MetricsEvaluator"]], "stacking_layer_cls (bosk.auto.mgsdeepforestconstructor attribute)": [[5, "bosk.auto.MGSDeepForestConstructor.STACKING_LAYER_CLS"]], "append_eval() (bosk.auto.metricsevaluator method)": [[5, "bosk.auto.MetricsEvaluator.append_eval"]], "average() (bosk.auto.metricsevaluator method)": [[5, "bosk.auto.MetricsEvaluator.average"]], "bosk.auto": [[5, "module-bosk.auto"]], "construct() (bosk.auto.baseautodeepforestconstructor method)": [[5, "bosk.auto.BaseAutoDeepForestConstructor.construct"]], "make_step_layer() (bosk.auto.baseautodeepforestconstructor method)": [[5, "bosk.auto.BaseAutoDeepForestConstructor.make_step_layer"]], "make_step_layer() (bosk.auto.classicaldeepforestconstructor method)": [[5, "bosk.auto.ClassicalDeepForestConstructor.make_step_layer"]], "make_step_layer() (bosk.auto.hyperparamsearchdeepforestconstructor method)": [[5, "bosk.auto.HyperparamSearchDeepForestConstructor.make_step_layer"]], "make_step_layer() (bosk.auto.mgsdeepforestconstructor method)": [[5, "bosk.auto.MGSDeepForestConstructor.make_step_layer"]], "n_steps (bosk.auto.baseautodeepforestconstructor property)": [[5, "bosk.auto.BaseAutoDeepForestConstructor.n_steps"]], "n_steps (bosk.auto.classicaldeepforestconstructor attribute)": [[5, "bosk.auto.ClassicalDeepForestConstructor.n_steps"]], "n_steps (bosk.auto.hyperparamsearchdeepforestconstructor attribute)": [[5, "bosk.auto.HyperparamSearchDeepForestConstructor.n_steps"]], "n_steps (bosk.auto.mgsdeepforestconstructor attribute)": [[5, "bosk.auto.MGSDeepForestConstructor.n_steps"]], "names (bosk.auto.metricsevaluator attribute)": [[5, "bosk.auto.MetricsEvaluator.names"]], "need_grow() (bosk.auto.earlystoppingcv method)": [[5, "bosk.auto.EarlyStoppingCV.need_grow"]], "need_grow() (bosk.auto.earlystoppingval method)": [[5, "bosk.auto.EarlyStoppingVal.need_grow"]], "results (bosk.auto.metricsevaluator attribute)": [[5, "bosk.auto.MetricsEvaluator.results"]], "rf_param_grid (bosk.auto.hyperparamsearchdeepforestconstructor attribute)": [[5, "bosk.auto.HyperparamSearchDeepForestConstructor.rf_param_grid"]], "rf_params (bosk.auto.classicaldeepforestconstructor attribute)": [[5, "bosk.auto.ClassicalDeepForestConstructor.rf_params"]], "rf_params (bosk.auto.mgsdeepforestconstructor attribute)": [[5, "bosk.auto.MGSDeepForestConstructor.rf_params"]], "trim() (bosk.auto.earlystoppingcv method)": [[5, "bosk.auto.EarlyStoppingCV.trim"]], "trim() (bosk.auto.earlystoppingval method)": [[5, "bosk.auto.EarlyStoppingVal.trim"]], "forestslayer (class in bosk.auto.layers)": [[6, "bosk.auto.layers.ForestsLayer"]], "layer (class in bosk.auto.layers)": [[6, "bosk.auto.layers.Layer"]], "mgslayer (class in bosk.auto.layers)": [[6, "bosk.auto.layers.MGSLayer"]], "mgsrflayer (class in bosk.auto.layers)": [[6, "bosk.auto.layers.MGSRFLayer"]], "nativestackinglayer (class in bosk.auto.layers)": [[6, "bosk.auto.layers.NativeStackingLayer"]], "stackinglayer (class in bosk.auto.layers)": [[6, "bosk.auto.layers.StackingLayer"]], "__custom_cross_validate() (bosk.auto.layers.stackinglayer method)": [[6, "bosk.auto.layers.StackingLayer.__custom_cross_validate"]], "_make_fitter() (bosk.auto.layers.stackinglayer method)": [[6, "bosk.auto.layers.StackingLayer._make_fitter"]], "bosk.auto.layers": [[6, "module-bosk.auto.layers"]], "calc_metrics() (bosk.auto.layers.layer method)": [[6, "bosk.auto.layers.Layer.calc_metrics"]], "fit() (bosk.auto.layers.forestslayer method)": [[6, "bosk.auto.layers.ForestsLayer.fit"]], "fit() (bosk.auto.layers.layer method)": [[6, "bosk.auto.layers.Layer.fit"]], "fit() (bosk.auto.layers.mgslayer method)": [[6, "bosk.auto.layers.MGSLayer.fit"]], "fit() (bosk.auto.layers.mgsrflayer method)": [[6, "bosk.auto.layers.MGSRFLayer.fit"]], "fit() (bosk.auto.layers.nativestackinglayer method)": [[6, "bosk.auto.layers.NativeStackingLayer.fit"]], "fit() (bosk.auto.layers.stackinglayer method)": [[6, "bosk.auto.layers.StackingLayer.fit"]], "inputs (bosk.auto.layers.forestslayer attribute)": [[6, "bosk.auto.layers.ForestsLayer.inputs"]], "inputs (bosk.auto.layers.layer property)": [[6, "bosk.auto.layers.Layer.inputs"]], "inputs (bosk.auto.layers.mgslayer attribute)": [[6, "bosk.auto.layers.MGSLayer.inputs"]], "inputs (bosk.auto.layers.mgsrflayer attribute)": [[6, "bosk.auto.layers.MGSRFLayer.inputs"]], "inputs (bosk.auto.layers.nativestackinglayer attribute)": [[6, "bosk.auto.layers.NativeStackingLayer.inputs"]], "inputs (bosk.auto.layers.stackinglayer attribute)": [[6, "bosk.auto.layers.StackingLayer.inputs"]], "metricsevaluator (class in bosk.auto.metrics)": [[7, "bosk.auto.metrics.MetricsEvaluator"]], "metricsresults (in module bosk.auto.metrics)": [[7, "bosk.auto.metrics.MetricsResults"]], "append_eval() (bosk.auto.metrics.metricsevaluator method)": [[7, "bosk.auto.metrics.MetricsEvaluator.append_eval"]], "average() (bosk.auto.metrics.metricsevaluator method)": [[7, "bosk.auto.metrics.MetricsEvaluator.average"]], "bosk.auto.metrics": [[7, "module-bosk.auto.metrics"]], "names (bosk.auto.metrics.metricsevaluator attribute)": [[7, "bosk.auto.metrics.MetricsEvaluator.names"]], "results (bosk.auto.metrics.metricsevaluator attribute)": [[7, "bosk.auto.metrics.MetricsEvaluator.results"]], "basepipelinemodelvalidator (class in bosk.auto.validation)": [[8, "bosk.auto.validation.BasePipelineModelValidator"]], "cvpipelinemodelvalidator (class in bosk.auto.validation)": [[8, "bosk.auto.validation.CVPipelineModelValidator"]], "dumbpipelinemodelvalidator (class in bosk.auto.validation)": [[8, "bosk.auto.validation.DumbPipelineModelValidator"]], "trainsetpipelinemodelvalidator (class in bosk.auto.validation)": [[8, "bosk.auto.validation.TrainSetPipelineModelValidator"]], "bosk.auto.validation": [[8, "module-bosk.auto.validation"]], "calc_metrics() (bosk.auto.validation.basepipelinemodelvalidator method)": [[8, "bosk.auto.validation.BasePipelineModelValidator.calc_metrics"]], "calc_metrics() (bosk.auto.validation.cvpipelinemodelvalidator method)": [[8, "bosk.auto.validation.CVPipelineModelValidator.calc_metrics"]], "calc_metrics() (bosk.auto.validation.dumbpipelinemodelvalidator method)": [[8, "bosk.auto.validation.DumbPipelineModelValidator.calc_metrics"]], "calc_metrics() (bosk.auto.validation.trainsetpipelinemodelvalidator method)": [[8, "bosk.auto.validation.TrainSetPipelineModelValidator.calc_metrics"]], "need_refit (bosk.auto.validation.basepipelinemodelvalidator property)": [[8, "bosk.auto.validation.BasePipelineModelValidator.need_refit"]], "need_refit (bosk.auto.validation.cvpipelinemodelvalidator attribute)": [[8, "bosk.auto.validation.CVPipelineModelValidator.need_refit"]], "need_refit (bosk.auto.validation.dumbpipelinemodelvalidator attribute)": [[8, "bosk.auto.validation.DumbPipelineModelValidator.need_refit"]], "need_refit (bosk.auto.validation.trainsetpipelinemodelvalidator attribute)": [[8, "bosk.auto.validation.TrainSetPipelineModelValidator.need_refit"]], "fittransformclass (class in bosk.block.auto)": [[9, "bosk.block.auto.FitTransformClass"]], "auto_block() (in module bosk.block.auto)": [[9, "bosk.block.auto.auto_block"]], "bosk.block.auto": [[9, "module-bosk.block.auto"]], "fit() (bosk.block.auto.fittransformclass method)": [[9, "bosk.block.auto.FitTransformClass.fit"]], "transform() (bosk.block.auto.fittransformclass method)": [[9, "bosk.block.auto.FitTransformClass.transform"]], "baseblock (class in bosk.block.base)": [[10, "bosk.block.base.BaseBlock"]], "baseinputblock (class in bosk.block.base)": [[10, "bosk.block.base.BaseInputBlock"]], "baseoutputblock (class in bosk.block.base)": [[10, "bosk.block.base.BaseOutputBlock"]], "baseslot (class in bosk.block.base)": [[10, "bosk.block.base.BaseSlot"]], "blockgroup (class in bosk.block.base)": [[10, "bosk.block.base.BlockGroup"]], "blockinputdata (in module bosk.block.base)": [[10, "bosk.block.base.BlockInputData"]], "blockinputslot (class in bosk.block.base)": [[10, "bosk.block.base.BlockInputSlot"]], "blockoutputdata (in module bosk.block.base)": [[10, "bosk.block.base.BlockOutputData"]], "blockoutputslot (class in bosk.block.base)": [[10, "bosk.block.base.BlockOutputSlot"]], "blockslots (class in bosk.block.base)": [[10, "bosk.block.base.BlockSlots"]], "blockt (in module bosk.block.base)": [[10, "bosk.block.base.BlockT"]], "slotmetat (in module bosk.block.base)": [[10, "bosk.block.base.SlotMetaT"]], "slott (in module bosk.block.base)": [[10, "bosk.block.base.SlotT"]], "transformoutputdata (in module bosk.block.base)": [[10, "bosk.block.base.TransformOutputData"]], "__hash__() (bosk.block.base.baseslot method)": [[10, "bosk.block.base.BaseSlot.__hash__"]], "__repr__() (bosk.block.base.baseblock method)": [[10, "bosk.block.base.BaseBlock.__repr__"]], "__repr__() (bosk.block.base.baseslot method)": [[10, "bosk.block.base.BaseSlot.__repr__"]], "__repr__() (bosk.block.base.blockgroup method)": [[10, "bosk.block.base.BlockGroup.__repr__"]], "_make_slots() (bosk.block.base.baseblock method)": [[10, "bosk.block.base.BaseBlock._make_slots"]], "_make_slots() (bosk.block.base.baseinputblock method)": [[10, "bosk.block.base.BaseInputBlock._make_slots"]], "_make_slots() (bosk.block.base.baseoutputblock method)": [[10, "bosk.block.base.BaseOutputBlock._make_slots"]], "accept() (bosk.block.base.baseblock method)": [[10, "bosk.block.base.BaseBlock.accept"]], "add() (bosk.block.base.blockgroup method)": [[10, "bosk.block.base.BlockGroup.add"]], "bosk.block.base": [[10, "module-bosk.block.base"]], "debug_info (bosk.block.base.baseslot attribute)": [[10, "bosk.block.base.BaseSlot.debug_info"], [10, "id0"]], "default_output (bosk.block.base.baseblock property)": [[10, "bosk.block.base.BaseBlock.default_output"]], "fit() (bosk.block.base.baseblock method)": [[10, "bosk.block.base.BaseBlock.fit"]], "get_default_output() (bosk.block.base.baseblock method)": [[10, "bosk.block.base.BaseBlock.get_default_output"]], "get_single_input() (bosk.block.base.baseinputblock method)": [[10, "bosk.block.base.BaseInputBlock.get_single_input"]], "get_single_output() (bosk.block.base.baseoutputblock method)": [[10, "bosk.block.base.BaseOutputBlock.get_single_output"]], "groups (bosk.block.base.blockslots attribute)": [[10, "bosk.block.base.BlockSlots.groups"], [10, "id3"]], "inputs (bosk.block.base.blockslots attribute)": [[10, "bosk.block.base.BlockSlots.inputs"], [10, "id1"]], "meta (bosk.block.base.baseblock attribute)": [[10, "bosk.block.base.BaseBlock.meta"]], "meta (bosk.block.base.baseblock property)": [[10, "id4"]], "meta (bosk.block.base.baseslot attribute)": [[10, "bosk.block.base.BaseSlot.meta"]], "meta (bosk.block.base.blockinputslot attribute)": [[10, "bosk.block.base.BlockInputSlot.meta"]], "meta (bosk.block.base.blockoutputslot attribute)": [[10, "bosk.block.base.BlockOutputSlot.meta"]], "name (bosk.block.base.baseinputblock property)": [[10, "bosk.block.base.BaseInputBlock.name"]], "name (bosk.block.base.baseoutputblock property)": [[10, "bosk.block.base.BaseOutputBlock.name"]], "name (bosk.block.base.baseslot attribute)": [[10, "bosk.block.base.BaseSlot.name"]], "name (bosk.block.base.blockgroup attribute)": [[10, "bosk.block.base.BlockGroup.name"]], "outputs (bosk.block.base.blockslots attribute)": [[10, "bosk.block.base.BlockSlots.outputs"], [10, "id2"]], "parent_block (bosk.block.base.baseslot attribute)": [[10, "bosk.block.base.BaseSlot.parent_block"]], "remove() (bosk.block.base.blockgroup method)": [[10, "bosk.block.base.BlockGroup.remove"]], "set_random_state() (bosk.block.base.baseblock method)": [[10, "bosk.block.base.BaseBlock.set_random_state"]], "slots (bosk.block.base.baseblock attribute)": [[10, "bosk.block.base.BaseBlock.slots"]], "stages (bosk.block.base.baseslot attribute)": [[10, "bosk.block.base.BaseSlot.stages"]], "transform() (bosk.block.base.baseblock method)": [[10, "bosk.block.base.BaseBlock.transform"]], "wrap() (bosk.block.base.baseblock method)": [[10, "bosk.block.base.BaseBlock.wrap"]], "functionalblockwrapper (class in bosk.block.functional)": [[11, "bosk.block.functional.FunctionalBlockWrapper"]], "__getitem__() (bosk.block.functional.functionalblockwrapper method)": [[11, "bosk.block.functional.FunctionalBlockWrapper.__getitem__"]], "bosk.block.functional": [[11, "module-bosk.block.functional"]], "get_input_slot() (bosk.block.functional.functionalblockwrapper method)": [[11, "bosk.block.functional.FunctionalBlockWrapper.get_input_slot"]], "get_output_slot() (bosk.block.functional.functionalblockwrapper method)": [[11, "bosk.block.functional.FunctionalBlockWrapper.get_output_slot"]], "baseblock (class in bosk.block)": [[12, "bosk.block.BaseBlock"]], "baseinputblock (class in bosk.block)": [[12, "bosk.block.BaseInputBlock"]], "baseoutputblock (class in bosk.block)": [[12, "bosk.block.BaseOutputBlock"]], "baseslot (class in bosk.block)": [[12, "bosk.block.BaseSlot"]], "baseslotmeta (class in bosk.block)": [[12, "bosk.block.BaseSlotMeta"]], "blockgroup (class in bosk.block)": [[12, "bosk.block.BlockGroup"]], "blockinputdata (in module bosk.block)": [[12, "bosk.block.BlockInputData"]], "blockinputslot (class in bosk.block)": [[12, "bosk.block.BlockInputSlot"]], "blockmeta (class in bosk.block)": [[12, "bosk.block.BlockMeta"]], "blockoutputdata (in module bosk.block)": [[12, "bosk.block.BlockOutputData"]], "blockoutputslot (class in bosk.block)": [[12, "bosk.block.BlockOutputSlot"]], "inputslotmeta (class in bosk.block)": [[12, "bosk.block.InputSlotMeta"]], "outputslotmeta (class in bosk.block)": [[12, "bosk.block.OutputSlotMeta"]], "slott (in module bosk.block)": [[12, "bosk.block.SlotT"]], "transformoutputdata (in module bosk.block)": [[12, "bosk.block.TransformOutputData"]], "__hash__() (bosk.block.baseslot method)": [[12, "bosk.block.BaseSlot.__hash__"]], "__repr__() (bosk.block.baseblock method)": [[12, "bosk.block.BaseBlock.__repr__"]], "__repr__() (bosk.block.baseslot method)": [[12, "bosk.block.BaseSlot.__repr__"]], "__repr__() (bosk.block.blockgroup method)": [[12, "bosk.block.BlockGroup.__repr__"]], "_make_slots() (bosk.block.baseblock method)": [[12, "bosk.block.BaseBlock._make_slots"]], "_make_slots() (bosk.block.baseinputblock method)": [[12, "bosk.block.BaseInputBlock._make_slots"]], "_make_slots() (bosk.block.baseoutputblock method)": [[12, "bosk.block.BaseOutputBlock._make_slots"]], "accept() (bosk.block.baseblock method)": [[12, "bosk.block.BaseBlock.accept"]], "add() (bosk.block.blockgroup method)": [[12, "bosk.block.BlockGroup.add"]], "auto_block() (in module bosk.block)": [[12, "bosk.block.auto_block"]], "bosk.block": [[12, "module-bosk.block"]], "debug_info (bosk.block.baseslot attribute)": [[12, "bosk.block.BaseSlot.debug_info"], [12, "id1"]], "default_output (bosk.block.baseblock property)": [[12, "bosk.block.BaseBlock.default_output"]], "execution_props (bosk.block.blockmeta attribute)": [[12, "bosk.block.BlockMeta.execution_props"]], "fit() (bosk.block.baseblock method)": [[12, "bosk.block.BaseBlock.fit"]], "get_default_output() (bosk.block.baseblock method)": [[12, "bosk.block.BaseBlock.get_default_output"]], "get_single_input() (bosk.block.baseinputblock method)": [[12, "bosk.block.BaseInputBlock.get_single_input"]], "get_single_output() (bosk.block.baseoutputblock method)": [[12, "bosk.block.BaseOutputBlock.get_single_output"]], "inputs (bosk.block.blockmeta attribute)": [[12, "bosk.block.BlockMeta.inputs"]], "list_of_slots_meta_to_mapping() (bosk.block.blockmeta static method)": [[12, "bosk.block.BlockMeta.list_of_slots_meta_to_mapping"]], "meta (bosk.block.baseblock attribute)": [[12, "bosk.block.BaseBlock.meta"]], "meta (bosk.block.baseblock property)": [[12, "id0"]], "meta (bosk.block.baseslot attribute)": [[12, "bosk.block.BaseSlot.meta"]], "meta (bosk.block.blockinputslot attribute)": [[12, "bosk.block.BlockInputSlot.meta"]], "meta (bosk.block.blockoutputslot attribute)": [[12, "bosk.block.BlockOutputSlot.meta"]], "name (bosk.block.baseinputblock property)": [[12, "bosk.block.BaseInputBlock.name"]], "name (bosk.block.baseoutputblock property)": [[12, "bosk.block.BaseOutputBlock.name"]], "name (bosk.block.baseslot attribute)": [[12, "bosk.block.BaseSlot.name"]], "name (bosk.block.baseslotmeta attribute)": [[12, "bosk.block.BaseSlotMeta.name"]], "name (bosk.block.blockgroup attribute)": [[12, "bosk.block.BlockGroup.name"]], "outputs (bosk.block.blockmeta attribute)": [[12, "bosk.block.BlockMeta.outputs"]], "parent_block (bosk.block.baseslot attribute)": [[12, "bosk.block.BaseSlot.parent_block"]], "remove() (bosk.block.blockgroup method)": [[12, "bosk.block.BlockGroup.remove"]], "set_random_state() (bosk.block.baseblock method)": [[12, "bosk.block.BaseBlock.set_random_state"]], "slots (bosk.block.baseblock attribute)": [[12, "bosk.block.BaseBlock.slots"]], "stages (bosk.block.baseslot attribute)": [[12, "bosk.block.BaseSlot.stages"]], "stages (bosk.block.inputslotmeta attribute)": [[12, "bosk.block.InputSlotMeta.stages"]], "transform() (bosk.block.baseblock method)": [[12, "bosk.block.BaseBlock.transform"]], "wrap() (bosk.block.baseblock method)": [[12, "bosk.block.BaseBlock.wrap"]], "baseslotmeta (class in bosk.block.meta)": [[13, "bosk.block.meta.BaseSlotMeta"]], "blockexecutionproperties (class in bosk.block.meta)": [[13, "bosk.block.meta.BlockExecutionProperties"]], "blockmeta (class in bosk.block.meta)": [[13, "bosk.block.meta.BlockMeta"]], "dynamicblockmetastub (class in bosk.block.meta)": [[13, "bosk.block.meta.DynamicBlockMetaStub"]], "inputslotmeta (class in bosk.block.meta)": [[13, "bosk.block.meta.InputSlotMeta"]], "outputslotmeta (class in bosk.block.meta)": [[13, "bosk.block.meta.OutputSlotMeta"]], "bosk.block.meta": [[13, "module-bosk.block.meta"]], "cpu (bosk.block.meta.blockexecutionproperties attribute)": [[13, "bosk.block.meta.BlockExecutionProperties.cpu"]], "execution_props (bosk.block.meta.blockmeta attribute)": [[13, "bosk.block.meta.BlockMeta.execution_props"]], "gpu (bosk.block.meta.blockexecutionproperties attribute)": [[13, "bosk.block.meta.BlockExecutionProperties.gpu"]], "inputs (bosk.block.meta.blockmeta attribute)": [[13, "bosk.block.meta.BlockMeta.inputs"]], "list_of_slots_meta_to_mapping() (bosk.block.meta.blockmeta static method)": [[13, "bosk.block.meta.BlockMeta.list_of_slots_meta_to_mapping"]], "make_simple_meta() (in module bosk.block.meta)": [[13, "bosk.block.meta.make_simple_meta"]], "name (bosk.block.meta.baseslotmeta attribute)": [[13, "bosk.block.meta.BaseSlotMeta.name"]], "outputs (bosk.block.meta.blockmeta attribute)": [[13, "bosk.block.meta.BlockMeta.outputs"]], "plain (bosk.block.meta.blockexecutionproperties attribute)": [[13, "bosk.block.meta.BlockExecutionProperties.plain"]], "stages (bosk.block.meta.inputslotmeta attribute)": [[13, "bosk.block.meta.InputSlotMeta.stages"]], "threadsafe (bosk.block.meta.blockexecutionproperties attribute)": [[13, "bosk.block.meta.BlockExecutionProperties.threadsafe"]], "baseblockclassrepository (class in bosk.block.repo.base)": [[14, "bosk.block.repo.base.BaseBlockClassRepository"]], "bosk.block.repo.base": [[14, "module-bosk.block.repo.base"]], "get() (bosk.block.repo.base.baseblockclassrepository method)": [[14, "bosk.block.repo.base.BaseBlockClassRepository.get"]], "baseblockclassrepository (class in bosk.block.repo)": [[15, "bosk.block.repo.BaseBlockClassRepository"]], "default_block_class_repository (in module bosk.block.repo)": [[15, "bosk.block.repo.DEFAULT_BLOCK_CLASS_REPOSITORY"]], "scopeblockclassrepository (class in bosk.block.repo)": [[15, "bosk.block.repo.ScopeBlockClassRepository"]], "zooblockclassrepository (class in bosk.block.repo)": [[15, "bosk.block.repo.ZooBlockClassRepository"]], "bosk.block.repo": [[15, "module-bosk.block.repo"]], "get() (bosk.block.repo.baseblockclassrepository method)": [[15, "bosk.block.repo.BaseBlockClassRepository.get"]], "get() (bosk.block.repo.scopeblockclassrepository method)": [[15, "bosk.block.repo.ScopeBlockClassRepository.get"]], "scopeblockclassrepository (class in bosk.block.repo.scope)": [[16, "bosk.block.repo.scope.ScopeBlockClassRepository"]], "bosk.block.repo.scope": [[16, "module-bosk.block.repo.scope"]], "get() (bosk.block.repo.scope.scopeblockclassrepository method)": [[16, "bosk.block.repo.scope.ScopeBlockClassRepository.get"]], "ignore_import_error_packages (in module bosk.block.repo.zoo)": [[17, "bosk.block.repo.zoo.IGNORE_IMPORT_ERROR_PACKAGES"]], "zooblockclassrepository (class in bosk.block.repo.zoo)": [[17, "bosk.block.repo.zoo.ZooBlockClassRepository"]], "bosk.block.repo.zoo": [[17, "module-bosk.block.repo.zoo"]], "import_submodules_contents() (in module bosk.block.repo.zoo)": [[17, "bosk.block.repo.zoo.import_submodules_contents"]], "argmaxblock (class in bosk.block.zoo.data_conversion)": [[18, "bosk.block.zoo.data_conversion.ArgmaxBlock"]], "averageblock (class in bosk.block.zoo.data_conversion)": [[18, "bosk.block.zoo.data_conversion.AverageBlock"]], "concatblock (class in bosk.block.zoo.data_conversion)": [[18, "bosk.block.zoo.data_conversion.ConcatBlock"]], "flattenblock (class in bosk.block.zoo.data_conversion)": [[18, "bosk.block.zoo.data_conversion.FlattenBlock"]], "reshapeblock (class in bosk.block.zoo.data_conversion)": [[18, "bosk.block.zoo.data_conversion.ReshapeBlock"]], "stackblock (class in bosk.block.zoo.data_conversion)": [[18, "bosk.block.zoo.data_conversion.StackBlock"]], "bosk.block.zoo.data_conversion": [[18, "module-bosk.block.zoo.data_conversion"]], "fit() (bosk.block.zoo.data_conversion.argmaxblock method)": [[18, "bosk.block.zoo.data_conversion.ArgmaxBlock.fit"]], "fit() (bosk.block.zoo.data_conversion.averageblock method)": [[18, "bosk.block.zoo.data_conversion.AverageBlock.fit"]], "fit() (bosk.block.zoo.data_conversion.concatblock method)": [[18, "bosk.block.zoo.data_conversion.ConcatBlock.fit"]], "fit() (bosk.block.zoo.data_conversion.flattenblock method)": [[18, "bosk.block.zoo.data_conversion.FlattenBlock.fit"]], "fit() (bosk.block.zoo.data_conversion.reshapeblock method)": [[18, "bosk.block.zoo.data_conversion.ReshapeBlock.fit"]], "fit() (bosk.block.zoo.data_conversion.stackblock method)": [[18, "bosk.block.zoo.data_conversion.StackBlock.fit"]], "meta (bosk.block.zoo.data_conversion.argmaxblock attribute)": [[18, "bosk.block.zoo.data_conversion.ArgmaxBlock.meta"]], "meta (bosk.block.zoo.data_conversion.averageblock attribute)": [[18, "bosk.block.zoo.data_conversion.AverageBlock.meta"]], "meta (bosk.block.zoo.data_conversion.concatblock attribute)": [[18, "bosk.block.zoo.data_conversion.ConcatBlock.meta"]], "meta (bosk.block.zoo.data_conversion.flattenblock attribute)": [[18, "bosk.block.zoo.data_conversion.FlattenBlock.meta"]], "meta (bosk.block.zoo.data_conversion.reshapeblock attribute)": [[18, "bosk.block.zoo.data_conversion.ReshapeBlock.meta"]], "meta (bosk.block.zoo.data_conversion.stackblock attribute)": [[18, "bosk.block.zoo.data_conversion.StackBlock.meta"]], "transform() (bosk.block.zoo.data_conversion.argmaxblock method)": [[18, "bosk.block.zoo.data_conversion.ArgmaxBlock.transform"]], "transform() (bosk.block.zoo.data_conversion.averageblock method)": [[18, "bosk.block.zoo.data_conversion.AverageBlock.transform"]], "transform() (bosk.block.zoo.data_conversion.concatblock method)": [[18, "bosk.block.zoo.data_conversion.ConcatBlock.transform"]], "transform() (bosk.block.zoo.data_conversion.flattenblock method)": [[18, "bosk.block.zoo.data_conversion.FlattenBlock.transform"]], "transform() (bosk.block.zoo.data_conversion.reshapeblock method)": [[18, "bosk.block.zoo.data_conversion.ReshapeBlock.transform"]], "transform() (bosk.block.zoo.data_conversion.stackblock method)": [[18, "bosk.block.zoo.data_conversion.StackBlock.transform"]], "weightsblock (class in bosk.block.zoo.data_weighting)": [[19, "bosk.block.zoo.data_weighting.WeightsBlock"]], "_weights (bosk.block.zoo.data_weighting.weightsblock attribute)": [[19, "bosk.block.zoo.data_weighting.WeightsBlock._weights"]], "bosk.block.zoo.data_weighting": [[19, "module-bosk.block.zoo.data_weighting"]], "fit() (bosk.block.zoo.data_weighting.weightsblock method)": [[19, "bosk.block.zoo.data_weighting.WeightsBlock.fit"]], "transform() (bosk.block.zoo.data_weighting.weightsblock method)": [[19, "bosk.block.zoo.data_weighting.WeightsBlock.transform"]], "fitlambdablock (class in bosk.block.zoo.debugging)": [[20, "bosk.block.zoo.debugging.FitLambdaBlock"]], "transformlambdablock (class in bosk.block.zoo.debugging)": [[20, "bosk.block.zoo.debugging.TransformLambdaBlock"]], "bosk.block.zoo.debugging": [[20, "module-bosk.block.zoo.debugging"]], "fit() (bosk.block.zoo.debugging.fitlambdablock method)": [[20, "bosk.block.zoo.debugging.FitLambdaBlock.fit"]], "fit() (bosk.block.zoo.debugging.transformlambdablock method)": [[20, "bosk.block.zoo.debugging.TransformLambdaBlock.fit"]], "meta (bosk.block.zoo.debugging.fitlambdablock attribute)": [[20, "bosk.block.zoo.debugging.FitLambdaBlock.meta"], [20, "id0"]], "meta (bosk.block.zoo.debugging.transformlambdablock attribute)": [[20, "bosk.block.zoo.debugging.TransformLambdaBlock.meta"]], "slots (bosk.block.zoo.debugging.fitlambdablock attribute)": [[20, "bosk.block.zoo.debugging.FitLambdaBlock.slots"]], "transform() (bosk.block.zoo.debugging.fitlambdablock method)": [[20, "bosk.block.zoo.debugging.FitLambdaBlock.transform"]], "transform() (bosk.block.zoo.debugging.transformlambdablock method)": [[20, "bosk.block.zoo.debugging.TransformLambdaBlock.transform"]], "baseblock (class in bosk.block.zoo.gpu_blocks)": [[21, "bosk.block.zoo.gpu_blocks.BaseBlock"]], "basedata (class in bosk.block.zoo.gpu_blocks)": [[21, "bosk.block.zoo.gpu_blocks.BaseData"]], "blockexecutionproperties (class in bosk.block.zoo.gpu_blocks)": [[21, "bosk.block.zoo.gpu_blocks.BlockExecutionProperties"]], "blockinputdata (in module bosk.block.zoo.gpu_blocks)": [[21, "bosk.block.zoo.gpu_blocks.BlockInputData"]], "cpudata (class in bosk.block.zoo.gpu_blocks)": [[21, "bosk.block.zoo.gpu_blocks.CPUData"]], "gpudata (class in bosk.block.zoo.gpu_blocks)": [[21, "bosk.block.zoo.gpu_blocks.GPUData"]], "movetoblock (class in bosk.block.zoo.gpu_blocks)": [[21, "bosk.block.zoo.gpu_blocks.MoveToBlock"]], "transformoutputdata (in module bosk.block.zoo.gpu_blocks)": [[21, "bosk.block.zoo.gpu_blocks.TransformOutputData"]], "__repr__() (bosk.block.zoo.gpu_blocks.baseblock method)": [[21, "bosk.block.zoo.gpu_blocks.BaseBlock.__repr__"]], "__repr__() (bosk.block.zoo.gpu_blocks.basedata method)": [[21, "bosk.block.zoo.gpu_blocks.BaseData.__repr__"]], "_make_slots() (bosk.block.zoo.gpu_blocks.baseblock method)": [[21, "bosk.block.zoo.gpu_blocks.BaseBlock._make_slots"]], "accept() (bosk.block.zoo.gpu_blocks.baseblock method)": [[21, "bosk.block.zoo.gpu_blocks.BaseBlock.accept"]], "bosk.block.zoo.gpu_blocks": [[21, "module-bosk.block.zoo.gpu_blocks"]], "cpu (bosk.block.zoo.gpu_blocks.blockexecutionproperties attribute)": [[21, "bosk.block.zoo.gpu_blocks.BlockExecutionProperties.cpu"]], "data (bosk.block.zoo.gpu_blocks.basedata attribute)": [[21, "bosk.block.zoo.gpu_blocks.BaseData.data"]], "data (bosk.block.zoo.gpu_blocks.cpudata attribute)": [[21, "bosk.block.zoo.gpu_blocks.CPUData.data"]], "data (bosk.block.zoo.gpu_blocks.gpudata attribute)": [[21, "bosk.block.zoo.gpu_blocks.GPUData.data"]], "default_output (bosk.block.zoo.gpu_blocks.baseblock property)": [[21, "bosk.block.zoo.gpu_blocks.BaseBlock.default_output"]], "fit() (bosk.block.zoo.gpu_blocks.baseblock method)": [[21, "bosk.block.zoo.gpu_blocks.BaseBlock.fit"]], "fit() (bosk.block.zoo.gpu_blocks.movetoblock method)": [[21, "bosk.block.zoo.gpu_blocks.MoveToBlock.fit"]], "get_default_output() (bosk.block.zoo.gpu_blocks.baseblock method)": [[21, "bosk.block.zoo.gpu_blocks.BaseBlock.get_default_output"]], "gpu (bosk.block.zoo.gpu_blocks.blockexecutionproperties attribute)": [[21, "bosk.block.zoo.gpu_blocks.BlockExecutionProperties.gpu"]], "make_simple_meta() (in module bosk.block.zoo.gpu_blocks)": [[21, "bosk.block.zoo.gpu_blocks.make_simple_meta"]], "meta (bosk.block.zoo.gpu_blocks.baseblock attribute)": [[21, "bosk.block.zoo.gpu_blocks.BaseBlock.meta"]], "meta (bosk.block.zoo.gpu_blocks.baseblock property)": [[21, "id0"]], "meta (bosk.block.zoo.gpu_blocks.movetoblock attribute)": [[21, "bosk.block.zoo.gpu_blocks.MoveToBlock.meta"]], "plain (bosk.block.zoo.gpu_blocks.blockexecutionproperties attribute)": [[21, "bosk.block.zoo.gpu_blocks.BlockExecutionProperties.plain"]], "set_random_state() (bosk.block.zoo.gpu_blocks.baseblock method)": [[21, "bosk.block.zoo.gpu_blocks.BaseBlock.set_random_state"]], "slots (bosk.block.zoo.gpu_blocks.baseblock attribute)": [[21, "bosk.block.zoo.gpu_blocks.BaseBlock.slots"]], "threadsafe (bosk.block.zoo.gpu_blocks.blockexecutionproperties attribute)": [[21, "bosk.block.zoo.gpu_blocks.BlockExecutionProperties.threadsafe"]], "to_cpu() (bosk.block.zoo.gpu_blocks.basedata method)": [[21, "bosk.block.zoo.gpu_blocks.BaseData.to_cpu"]], "to_cpu() (bosk.block.zoo.gpu_blocks.gpudata method)": [[21, "bosk.block.zoo.gpu_blocks.GPUData.to_cpu"]], "to_gpu() (bosk.block.zoo.gpu_blocks.basedata method)": [[21, "bosk.block.zoo.gpu_blocks.BaseData.to_gpu"]], "transform() (bosk.block.zoo.gpu_blocks.baseblock method)": [[21, "bosk.block.zoo.gpu_blocks.BaseBlock.transform"]], "transform() (bosk.block.zoo.gpu_blocks.movetoblock method)": [[21, "bosk.block.zoo.gpu_blocks.MoveToBlock.transform"]], "wrap() (bosk.block.zoo.gpu_blocks.baseblock method)": [[21, "bosk.block.zoo.gpu_blocks.BaseBlock.wrap"]], "bosk.block.zoo": [[22, "module-bosk.block.zoo"]], "baseinputblock (class in bosk.block.zoo.input_plugs)": [[23, "bosk.block.zoo.input_plugs.BaseInputBlock"]], "blockexecutionproperties (class in bosk.block.zoo.input_plugs)": [[23, "bosk.block.zoo.input_plugs.BlockExecutionProperties"]], "blockinputdata (in module bosk.block.zoo.input_plugs)": [[23, "bosk.block.zoo.input_plugs.BlockInputData"]], "blockmeta (class in bosk.block.zoo.input_plugs)": [[23, "bosk.block.zoo.input_plugs.BlockMeta"]], "default_input_name (bosk.block.zoo.input_plugs.inputblock attribute)": [[23, "bosk.block.zoo.input_plugs.InputBlock.DEFAULT_INPUT_NAME"]], "default_target_name (bosk.block.zoo.input_plugs.targetinputblock attribute)": [[23, "bosk.block.zoo.input_plugs.TargetInputBlock.DEFAULT_TARGET_NAME"]], "dynamicblockmetastub (class in bosk.block.zoo.input_plugs)": [[23, "bosk.block.zoo.input_plugs.DynamicBlockMetaStub"]], "inputblock (class in bosk.block.zoo.input_plugs)": [[23, "bosk.block.zoo.input_plugs.InputBlock"]], "stages (class in bosk.block.zoo.input_plugs)": [[23, "bosk.block.zoo.input_plugs.Stages"]], "targetinputblock (class in bosk.block.zoo.input_plugs)": [[23, "bosk.block.zoo.input_plugs.TargetInputBlock"]], "transformoutputdata (in module bosk.block.zoo.input_plugs)": [[23, "bosk.block.zoo.input_plugs.TransformOutputData"]], "_make_slots() (bosk.block.zoo.input_plugs.baseinputblock method)": [[23, "bosk.block.zoo.input_plugs.BaseInputBlock._make_slots"]], "bosk.block.zoo.input_plugs": [[23, "module-bosk.block.zoo.input_plugs"]], "cpu (bosk.block.zoo.input_plugs.blockexecutionproperties attribute)": [[23, "bosk.block.zoo.input_plugs.BlockExecutionProperties.cpu"]], "execution_props (bosk.block.zoo.input_plugs.blockmeta attribute)": [[23, "bosk.block.zoo.input_plugs.BlockMeta.execution_props"]], "fit (bosk.block.zoo.input_plugs.stages attribute)": [[23, "bosk.block.zoo.input_plugs.Stages.fit"], [23, "id0"]], "fit() (bosk.block.zoo.input_plugs.inputblock method)": [[23, "bosk.block.zoo.input_plugs.InputBlock.fit"]], "fit() (bosk.block.zoo.input_plugs.targetinputblock method)": [[23, "bosk.block.zoo.input_plugs.TargetInputBlock.fit"]], "get_single_input() (bosk.block.zoo.input_plugs.baseinputblock method)": [[23, "bosk.block.zoo.input_plugs.BaseInputBlock.get_single_input"]], "gpu (bosk.block.zoo.input_plugs.blockexecutionproperties attribute)": [[23, "bosk.block.zoo.input_plugs.BlockExecutionProperties.gpu"]], "inputs (bosk.block.zoo.input_plugs.blockmeta attribute)": [[23, "bosk.block.zoo.input_plugs.BlockMeta.inputs"]], "list_of_slots_meta_to_mapping() (bosk.block.zoo.input_plugs.blockmeta static method)": [[23, "bosk.block.zoo.input_plugs.BlockMeta.list_of_slots_meta_to_mapping"]], "make_simple_meta() (in module bosk.block.zoo.input_plugs)": [[23, "bosk.block.zoo.input_plugs.make_simple_meta"]], "meta (bosk.block.zoo.input_plugs.inputblock attribute)": [[23, "bosk.block.zoo.input_plugs.InputBlock.meta"]], "meta (bosk.block.zoo.input_plugs.targetinputblock attribute)": [[23, "bosk.block.zoo.input_plugs.TargetInputBlock.meta"]], "name (bosk.block.zoo.input_plugs.baseinputblock property)": [[23, "bosk.block.zoo.input_plugs.BaseInputBlock.name"]], "name (bosk.block.zoo.input_plugs.inputblock attribute)": [[23, "bosk.block.zoo.input_plugs.InputBlock.name"]], "name (bosk.block.zoo.input_plugs.targetinputblock attribute)": [[23, "bosk.block.zoo.input_plugs.TargetInputBlock.name"]], "outputs (bosk.block.zoo.input_plugs.blockmeta attribute)": [[23, "bosk.block.zoo.input_plugs.BlockMeta.outputs"]], "plain (bosk.block.zoo.input_plugs.blockexecutionproperties attribute)": [[23, "bosk.block.zoo.input_plugs.BlockExecutionProperties.plain"]], "threadsafe (bosk.block.zoo.input_plugs.blockexecutionproperties attribute)": [[23, "bosk.block.zoo.input_plugs.BlockExecutionProperties.threadsafe"]], "transform (bosk.block.zoo.input_plugs.stages attribute)": [[23, "bosk.block.zoo.input_plugs.Stages.transform"], [23, "id1"]], "transform() (bosk.block.zoo.input_plugs.inputblock method)": [[23, "bosk.block.zoo.input_plugs.InputBlock.transform"]], "transform() (bosk.block.zoo.input_plugs.targetinputblock method)": [[23, "bosk.block.zoo.input_plugs.TargetInputBlock.transform"]], "transform_on_fit (bosk.block.zoo.input_plugs.stages attribute)": [[23, "bosk.block.zoo.input_plugs.Stages.transform_on_fit"], [23, "id2"]], "accuracyblock (class in bosk.block.zoo.metrics)": [[24, "bosk.block.zoo.metrics.AccuracyBlock"]], "f1scoreblock (class in bosk.block.zoo.metrics)": [[24, "bosk.block.zoo.metrics.F1ScoreBlock"]], "r2scoreblock (class in bosk.block.zoo.metrics)": [[24, "bosk.block.zoo.metrics.R2ScoreBlock"]], "rocaucblock (class in bosk.block.zoo.metrics)": [[24, "bosk.block.zoo.metrics.RocAucBlock"]], "rocaucmultilabelblock (class in bosk.block.zoo.metrics)": [[24, "bosk.block.zoo.metrics.RocAucMultiLabelBlock"]], "bosk.block.zoo.metrics": [[24, "module-bosk.block.zoo.metrics"]], "fit() (bosk.block.zoo.metrics.accuracyblock method)": [[24, "bosk.block.zoo.metrics.AccuracyBlock.fit"]], "fit() (bosk.block.zoo.metrics.f1scoreblock method)": [[24, "bosk.block.zoo.metrics.F1ScoreBlock.fit"]], "fit() (bosk.block.zoo.metrics.r2scoreblock method)": [[24, "bosk.block.zoo.metrics.R2ScoreBlock.fit"]], "fit() (bosk.block.zoo.metrics.rocaucblock method)": [[24, "bosk.block.zoo.metrics.RocAucBlock.fit"]], "fit() (bosk.block.zoo.metrics.rocaucmultilabelblock method)": [[24, "bosk.block.zoo.metrics.RocAucMultiLabelBlock.fit"]], "meta (bosk.block.zoo.metrics.accuracyblock attribute)": [[24, "bosk.block.zoo.metrics.AccuracyBlock.meta"]], "meta (bosk.block.zoo.metrics.f1scoreblock attribute)": [[24, "bosk.block.zoo.metrics.F1ScoreBlock.meta"]], "meta (bosk.block.zoo.metrics.r2scoreblock attribute)": [[24, "bosk.block.zoo.metrics.R2ScoreBlock.meta"]], "meta (bosk.block.zoo.metrics.rocaucblock attribute)": [[24, "bosk.block.zoo.metrics.RocAucBlock.meta"]], "meta (bosk.block.zoo.metrics.rocaucmultilabelblock attribute)": [[24, "bosk.block.zoo.metrics.RocAucMultiLabelBlock.meta"]], "transform() (bosk.block.zoo.metrics.accuracyblock method)": [[24, "bosk.block.zoo.metrics.AccuracyBlock.transform"]], "transform() (bosk.block.zoo.metrics.f1scoreblock method)": [[24, "bosk.block.zoo.metrics.F1ScoreBlock.transform"]], "transform() (bosk.block.zoo.metrics.r2scoreblock method)": [[24, "bosk.block.zoo.metrics.R2ScoreBlock.transform"]], "transform() (bosk.block.zoo.metrics.rocaucblock method)": [[24, "bosk.block.zoo.metrics.RocAucBlock.transform"]], "transform() (bosk.block.zoo.metrics.rocaucmultilabelblock method)": [[24, "bosk.block.zoo.metrics.RocAucMultiLabelBlock.transform"]], "decisiontree (class in bosk.block.zoo.models.classification._jax_util)": [[25, "bosk.block.zoo.models.classification._jax_util.DecisionTree"]], "decisiontreeclassifier (class in bosk.block.zoo.models.classification._jax_util)": [[25, "bosk.block.zoo.models.classification._jax_util.DecisionTreeClassifier"]], "extratree (class in bosk.block.zoo.models.classification._jax_util)": [[25, "bosk.block.zoo.models.classification._jax_util.ExtraTree"]], "extratreeclassifier (class in bosk.block.zoo.models.classification._jax_util)": [[25, "bosk.block.zoo.models.classification._jax_util.ExtraTreeClassifier"]], "treenode (class in bosk.block.zoo.models.classification._jax_util)": [[25, "bosk.block.zoo.models.classification._jax_util.TreeNode"]], "accuracy() (in module bosk.block.zoo.models.classification._jax_util)": [[25, "bosk.block.zoo.models.classification._jax_util.accuracy"]], "bosk.block.zoo.models.classification._jax_util": [[25, "module-bosk.block.zoo.models.classification._jax_util"]], "compute_score_generic() (in module bosk.block.zoo.models.classification._jax_util)": [[25, "bosk.block.zoo.models.classification._jax_util.compute_score_generic"]], "entropy() (in module bosk.block.zoo.models.classification._jax_util)": [[25, "bosk.block.zoo.models.classification._jax_util.entropy"]], "fit() (bosk.block.zoo.models.classification._jax_util.decisiontree method)": [[25, "bosk.block.zoo.models.classification._jax_util.DecisionTree.fit"]], "make_scoring_function() (in module bosk.block.zoo.models.classification._jax_util)": [[25, "bosk.block.zoo.models.classification._jax_util.make_scoring_function"]], "make_split_node_function() (in module bosk.block.zoo.models.classification._jax_util)": [[25, "bosk.block.zoo.models.classification._jax_util.make_split_node_function"]], "most_frequent() (in module bosk.block.zoo.models.classification._jax_util)": [[25, "bosk.block.zoo.models.classification._jax_util.most_frequent"]], "predict() (bosk.block.zoo.models.classification._jax_util.decisiontree method)": [[25, "bosk.block.zoo.models.classification._jax_util.DecisionTree.predict"]], "predict_proba() (in module bosk.block.zoo.models.classification._jax_util)": [[25, "bosk.block.zoo.models.classification._jax_util.predict_proba"]], "row_to_nan() (in module bosk.block.zoo.models.classification._jax_util)": [[25, "bosk.block.zoo.models.classification._jax_util.row_to_nan"]], "split_mask() (in module bosk.block.zoo.models.classification._jax_util)": [[25, "bosk.block.zoo.models.classification._jax_util.split_mask"]], "split_node_generic() (in module bosk.block.zoo.models.classification._jax_util)": [[25, "bosk.block.zoo.models.classification._jax_util.split_node_generic"]], "split_node_generic_random() (in module bosk.block.zoo.models.classification._jax_util)": [[25, "bosk.block.zoo.models.classification._jax_util.split_node_generic_random"]], "split_points() (in module bosk.block.zoo.models.classification._jax_util)": [[25, "bosk.block.zoo.models.classification._jax_util.split_points"]], "tree_flatten() (bosk.block.zoo.models.classification._jax_util.decisiontree method)": [[25, "bosk.block.zoo.models.classification._jax_util.DecisionTree.tree_flatten"]], "tree_flatten() (bosk.block.zoo.models.classification._jax_util.decisiontreeclassifier method)": [[25, "bosk.block.zoo.models.classification._jax_util.DecisionTreeClassifier.tree_flatten"]], "tree_flatten() (bosk.block.zoo.models.classification._jax_util.extratreeclassifier method)": [[25, "bosk.block.zoo.models.classification._jax_util.ExtraTreeClassifier.tree_flatten"]], "tree_flatten() (bosk.block.zoo.models.classification._jax_util.treenode method)": [[25, "bosk.block.zoo.models.classification._jax_util.TreeNode.tree_flatten"]], "tree_unflatten() (bosk.block.zoo.models.classification._jax_util.decisiontree class method)": [[25, "bosk.block.zoo.models.classification._jax_util.DecisionTree.tree_unflatten"]], "tree_unflatten() (bosk.block.zoo.models.classification._jax_util.treenode class method)": [[25, "bosk.block.zoo.models.classification._jax_util.TreeNode.tree_unflatten"]], "randomfernsblock (class in bosk.block.zoo.models.classification.ferns)": [[26, "bosk.block.zoo.models.classification.ferns.RandomFernsBlock"]], "__getstate__() (bosk.block.zoo.models.classification.ferns.randomfernsblock method)": [[26, "bosk.block.zoo.models.classification.ferns.RandomFernsBlock.__getstate__"]], "__setstate__() (bosk.block.zoo.models.classification.ferns.randomfernsblock method)": [[26, "bosk.block.zoo.models.classification.ferns.RandomFernsBlock.__setstate__"]], "_apply_ferns() (bosk.block.zoo.models.classification.ferns.randomfernsblock method)": [[26, "bosk.block.zoo.models.classification.ferns.RandomFernsBlock._apply_ferns"]], "_classifier_init() (bosk.block.zoo.models.classification.ferns.randomfernsblock method)": [[26, "bosk.block.zoo.models.classification.ferns.RandomFernsBlock._classifier_init"]], "_make_ferns() (bosk.block.zoo.models.classification.ferns.randomfernsblock method)": [[26, "bosk.block.zoo.models.classification.ferns.RandomFernsBlock._make_ferns"]], "_parallel_calc_bucket_stats() (bosk.block.zoo.models.classification.ferns.randomfernsblock method)": [[26, "bosk.block.zoo.models.classification.ferns.RandomFernsBlock._parallel_calc_bucket_stats"]], "_predict_proba() (bosk.block.zoo.models.classification.ferns.randomfernsblock method)": [[26, "bosk.block.zoo.models.classification.ferns.RandomFernsBlock._predict_proba"]], "bosk.block.zoo.models.classification.ferns": [[26, "module-bosk.block.zoo.models.classification.ferns"]], "fit() (bosk.block.zoo.models.classification.ferns.randomfernsblock method)": [[26, "bosk.block.zoo.models.classification.ferns.RandomFernsBlock.fit"]], "meta (bosk.block.zoo.models.classification.ferns.randomfernsblock attribute)": [[26, "bosk.block.zoo.models.classification.ferns.RandomFernsBlock.meta"]], "transform() (bosk.block.zoo.models.classification.ferns.randomfernsblock method)": [[26, "bosk.block.zoo.models.classification.ferns.RandomFernsBlock.transform"]], "catboostclassifierblock (class in bosk.block.zoo.models.classification)": [[27, "bosk.block.zoo.models.classification.CatBoostClassifierBlock"]], "etcblock (class in bosk.block.zoo.models.classification)": [[27, "bosk.block.zoo.models.classification.ETCBlock"]], "rfcblock (class in bosk.block.zoo.models.classification)": [[27, "bosk.block.zoo.models.classification.RFCBlock"]], "xgbclassifierblock (class in bosk.block.zoo.models.classification)": [[27, "bosk.block.zoo.models.classification.XGBClassifierBlock"]], "bosk.block.zoo.models.classification": [[27, "module-bosk.block.zoo.models.classification"]], "fit() (bosk.block.zoo.models.classification.xgbclassifierblock method)": [[27, "bosk.block.zoo.models.classification.XGBClassifierBlock.fit"]], "transform() (bosk.block.zoo.models.classification.catboostclassifierblock method)": [[27, "bosk.block.zoo.models.classification.CatBoostClassifierBlock.transform"]], "transform() (bosk.block.zoo.models.classification.etcblock method)": [[27, "bosk.block.zoo.models.classification.ETCBlock.transform"]], "transform() (bosk.block.zoo.models.classification.rfcblock method)": [[27, "bosk.block.zoo.models.classification.RFCBlock.transform"]], "transform() (bosk.block.zoo.models.classification.xgbclassifierblock method)": [[27, "bosk.block.zoo.models.classification.XGBClassifierBlock.transform"]], "etcgblock (class in bosk.block.zoo.models.classification.jax)": [[28, "bosk.block.zoo.models.classification.jax.ETCGBlock"]], "rfcgblock (class in bosk.block.zoo.models.classification.jax)": [[28, "bosk.block.zoo.models.classification.jax.RFCGBlock"]], "bosk.block.zoo.models.classification.jax": [[28, "module-bosk.block.zoo.models.classification.jax"]], "fit() (bosk.block.zoo.models.classification.jax.etcgblock method)": [[28, "bosk.block.zoo.models.classification.jax.ETCGBlock.fit"]], "fit() (bosk.block.zoo.models.classification.jax.rfcgblock method)": [[28, "bosk.block.zoo.models.classification.jax.RFCGBlock.fit"]], "meta (bosk.block.zoo.models.classification.jax.etcgblock attribute)": [[28, "bosk.block.zoo.models.classification.jax.ETCGBlock.meta"]], "meta (bosk.block.zoo.models.classification.jax.rfcgblock attribute)": [[28, "bosk.block.zoo.models.classification.jax.RFCGBlock.meta"]], "predict() (bosk.block.zoo.models.classification.jax.etcgblock method)": [[28, "bosk.block.zoo.models.classification.jax.ETCGBlock.predict"]], "predict() (bosk.block.zoo.models.classification.jax.rfcgblock method)": [[28, "bosk.block.zoo.models.classification.jax.RFCGBlock.predict"]], "transform() (bosk.block.zoo.models.classification.jax.etcgblock method)": [[28, "bosk.block.zoo.models.classification.jax.ETCGBlock.transform"]], "transform() (bosk.block.zoo.models.classification.jax.rfcgblock method)": [[28, "bosk.block.zoo.models.classification.jax.RFCGBlock.transform"]], "tree_flatten() (bosk.block.zoo.models.classification.jax.etcgblock method)": [[28, "bosk.block.zoo.models.classification.jax.ETCGBlock.tree_flatten"]], "tree_flatten() (bosk.block.zoo.models.classification.jax.rfcgblock method)": [[28, "bosk.block.zoo.models.classification.jax.RFCGBlock.tree_flatten"]], "tree_unflatten() (bosk.block.zoo.models.classification.jax.etcgblock class method)": [[28, "bosk.block.zoo.models.classification.jax.ETCGBlock.tree_unflatten"]], "tree_unflatten() (bosk.block.zoo.models.classification.jax.rfcgblock class method)": [[28, "bosk.block.zoo.models.classification.jax.RFCGBlock.tree_unflatten"]], "mgsrandomfernsblock (class in bosk.block.zoo.models.classification.mgs_ferns)": [[29, "bosk.block.zoo.models.classification.mgs_ferns.MGSRandomFernsBlock"]], "__getstate__() (bosk.block.zoo.models.classification.mgs_ferns.mgsrandomfernsblock method)": [[29, "bosk.block.zoo.models.classification.mgs_ferns.MGSRandomFernsBlock.__getstate__"]], "__prepare_pooling_indices() (bosk.block.zoo.models.classification.mgs_ferns.mgsrandomfernsblock method)": [[29, "bosk.block.zoo.models.classification.mgs_ferns.MGSRandomFernsBlock.__prepare_pooling_indices"]], "__setstate__() (bosk.block.zoo.models.classification.mgs_ferns.mgsrandomfernsblock method)": [[29, "bosk.block.zoo.models.classification.mgs_ferns.MGSRandomFernsBlock.__setstate__"]], "_apply_ferns() (bosk.block.zoo.models.classification.mgs_ferns.mgsrandomfernsblock method)": [[29, "bosk.block.zoo.models.classification.mgs_ferns.MGSRandomFernsBlock._apply_ferns"]], "_classifier_init() (bosk.block.zoo.models.classification.mgs_ferns.mgsrandomfernsblock method)": [[29, "bosk.block.zoo.models.classification.mgs_ferns.MGSRandomFernsBlock._classifier_init"]], "_get_flattened_window_size() (bosk.block.zoo.models.classification.mgs_ferns.mgsrandomfernsblock method)": [[29, "bosk.block.zoo.models.classification.mgs_ferns.MGSRandomFernsBlock._get_flattened_window_size"]], "_make_ferns() (bosk.block.zoo.models.classification.mgs_ferns.mgsrandomfernsblock method)": [[29, "bosk.block.zoo.models.classification.mgs_ferns.MGSRandomFernsBlock._make_ferns"]], "_parallel_calc_bucket_stats() (bosk.block.zoo.models.classification.mgs_ferns.mgsrandomfernsblock method)": [[29, "bosk.block.zoo.models.classification.mgs_ferns.MGSRandomFernsBlock._parallel_calc_bucket_stats"]], "_predict_proba() (bosk.block.zoo.models.classification.mgs_ferns.mgsrandomfernsblock method)": [[29, "bosk.block.zoo.models.classification.mgs_ferns.MGSRandomFernsBlock._predict_proba"]], "bosk.block.zoo.models.classification.mgs_ferns": [[29, "module-bosk.block.zoo.models.classification.mgs_ferns"]], "fit() (bosk.block.zoo.models.classification.mgs_ferns.mgsrandomfernsblock method)": [[29, "bosk.block.zoo.models.classification.mgs_ferns.MGSRandomFernsBlock.fit"]], "meta (bosk.block.zoo.models.classification.mgs_ferns.mgsrandomfernsblock attribute)": [[29, "bosk.block.zoo.models.classification.mgs_ferns.MGSRandomFernsBlock.meta"]], "pooling_indices_ (bosk.block.zoo.models.classification.mgs_ferns.mgsrandomfernsblock attribute)": [[29, "bosk.block.zoo.models.classification.mgs_ferns.MGSRandomFernsBlock.pooling_indices_"]], "transform() (bosk.block.zoo.models.classification.mgs_ferns.mgsrandomfernsblock method)": [[29, "bosk.block.zoo.models.classification.mgs_ferns.MGSRandomFernsBlock.transform"]], "bosk.block.zoo.models": [[30, "module-bosk.block.zoo.models"]], "catboostregressorblock (class in bosk.block.zoo.models.regression)": [[31, "bosk.block.zoo.models.regression.CatBoostRegressorBlock"]], "etrblock (class in bosk.block.zoo.models.regression)": [[31, "bosk.block.zoo.models.regression.ETRBlock"]], "rfrblock (class in bosk.block.zoo.models.regression)": [[31, "bosk.block.zoo.models.regression.RFRBlock"]], "xgbcregressorblock (class in bosk.block.zoo.models.regression)": [[31, "bosk.block.zoo.models.regression.XGBCRegressorBlock"]], "base_estimator_ (bosk.block.zoo.models.regression.etrblock attribute)": [[31, "bosk.block.zoo.models.regression.ETRBlock.base_estimator_"]], "base_estimator_ (bosk.block.zoo.models.regression.rfrblock attribute)": [[31, "bosk.block.zoo.models.regression.RFRBlock.base_estimator_"]], "bosk.block.zoo.models.regression": [[31, "module-bosk.block.zoo.models.regression"]], "estimators_ (bosk.block.zoo.models.regression.etrblock attribute)": [[31, "bosk.block.zoo.models.regression.ETRBlock.estimators_"]], "estimators_ (bosk.block.zoo.models.regression.rfrblock attribute)": [[31, "bosk.block.zoo.models.regression.RFRBlock.estimators_"]], "feature_importances_ (bosk.block.zoo.models.regression.etrblock attribute)": [[31, "bosk.block.zoo.models.regression.ETRBlock.feature_importances_"]], "feature_importances_ (bosk.block.zoo.models.regression.rfrblock attribute)": [[31, "bosk.block.zoo.models.regression.RFRBlock.feature_importances_"]], "feature_names_in_ (bosk.block.zoo.models.regression.etrblock attribute)": [[31, "bosk.block.zoo.models.regression.ETRBlock.feature_names_in_"]], "feature_names_in_ (bosk.block.zoo.models.regression.rfrblock attribute)": [[31, "bosk.block.zoo.models.regression.RFRBlock.feature_names_in_"]], "fit() (bosk.block.zoo.models.regression.xgbcregressorblock method)": [[31, "bosk.block.zoo.models.regression.XGBCRegressorBlock.fit"]], "n_features_ (bosk.block.zoo.models.regression.etrblock attribute)": [[31, "bosk.block.zoo.models.regression.ETRBlock.n_features_"]], "n_features_ (bosk.block.zoo.models.regression.rfrblock attribute)": [[31, "bosk.block.zoo.models.regression.RFRBlock.n_features_"]], "n_features_in_ (bosk.block.zoo.models.regression.etrblock attribute)": [[31, "bosk.block.zoo.models.regression.ETRBlock.n_features_in_"]], "n_features_in_ (bosk.block.zoo.models.regression.rfrblock attribute)": [[31, "bosk.block.zoo.models.regression.RFRBlock.n_features_in_"]], "n_outputs_ (bosk.block.zoo.models.regression.etrblock attribute)": [[31, "bosk.block.zoo.models.regression.ETRBlock.n_outputs_"]], "n_outputs_ (bosk.block.zoo.models.regression.rfrblock attribute)": [[31, "bosk.block.zoo.models.regression.RFRBlock.n_outputs_"]], "oob_prediction_ (bosk.block.zoo.models.regression.etrblock attribute)": [[31, "bosk.block.zoo.models.regression.ETRBlock.oob_prediction_"]], "oob_prediction_ (bosk.block.zoo.models.regression.rfrblock attribute)": [[31, "bosk.block.zoo.models.regression.RFRBlock.oob_prediction_"]], "oob_score_ (bosk.block.zoo.models.regression.etrblock attribute)": [[31, "bosk.block.zoo.models.regression.ETRBlock.oob_score_"]], "oob_score_ (bosk.block.zoo.models.regression.rfrblock attribute)": [[31, "bosk.block.zoo.models.regression.RFRBlock.oob_score_"]], "transform() (bosk.block.zoo.models.regression.catboostregressorblock method)": [[31, "bosk.block.zoo.models.regression.CatBoostRegressorBlock.transform"]], "transform() (bosk.block.zoo.models.regression.etrblock method)": [[31, "bosk.block.zoo.models.regression.ETRBlock.transform"]], "transform() (bosk.block.zoo.models.regression.rfrblock method)": [[31, "bosk.block.zoo.models.regression.RFRBlock.transform"]], "transform() (bosk.block.zoo.models.regression.xgbcregressorblock method)": [[31, "bosk.block.zoo.models.regression.XGBCRegressorBlock.transform"]], "_convolutionhelper (class in bosk.block.zoo.multi_grained_scanning._convolution_helpers)": [[32, "bosk.block.zoo.multi_grained_scanning._convolution_helpers._ConvolutionHelper"]], "_convolutionparams (class in bosk.block.zoo.multi_grained_scanning._convolution_helpers)": [[32, "bosk.block.zoo.multi_grained_scanning._convolution_helpers._ConvolutionParams"]], "_poolingindices (class in bosk.block.zoo.multi_grained_scanning._convolution_helpers)": [[32, "bosk.block.zoo.multi_grained_scanning._convolution_helpers._PoolingIndices"]], "bosk.block.zoo.multi_grained_scanning._convolution_helpers": [[32, "module-bosk.block.zoo.multi_grained_scanning._convolution_helpers"]], "check_kernel_size() (bosk.block.zoo.multi_grained_scanning._convolution_helpers._convolutionhelper method)": [[32, "bosk.block.zoo.multi_grained_scanning._convolution_helpers._ConvolutionHelper.check_kernel_size"]], "check_stride() (bosk.block.zoo.multi_grained_scanning._convolution_helpers._convolutionhelper method)": [[32, "bosk.block.zoo.multi_grained_scanning._convolution_helpers._ConvolutionHelper.check_stride"]], "chunk_size (bosk.block.zoo.multi_grained_scanning._convolution_helpers._convolutionparams attribute)": [[32, "bosk.block.zoo.multi_grained_scanning._convolution_helpers._ConvolutionParams.chunk_size"]], "dilation (bosk.block.zoo.multi_grained_scanning._convolution_helpers._convolutionparams attribute)": [[32, "bosk.block.zoo.multi_grained_scanning._convolution_helpers._ConvolutionParams.dilation"]], "full_index_tuple (bosk.block.zoo.multi_grained_scanning._convolution_helpers._poolingindices attribute)": [[32, "bosk.block.zoo.multi_grained_scanning._convolution_helpers._PoolingIndices.full_index_tuple"], [32, "id1"]], "get_pooled_shape() (bosk.block.zoo.multi_grained_scanning._convolution_helpers._convolutionhelper method)": [[32, "bosk.block.zoo.multi_grained_scanning._convolution_helpers._ConvolutionHelper.get_pooled_shape"]], "kernel_size (bosk.block.zoo.multi_grained_scanning._convolution_helpers._convolutionparams attribute)": [[32, "bosk.block.zoo.multi_grained_scanning._convolution_helpers._ConvolutionParams.kernel_size"]], "n_corners (bosk.block.zoo.multi_grained_scanning._convolution_helpers._poolingindices attribute)": [[32, "bosk.block.zoo.multi_grained_scanning._convolution_helpers._PoolingIndices.n_corners"], [32, "id2"]], "n_kernel_points (bosk.block.zoo.multi_grained_scanning._convolution_helpers._poolingindices attribute)": [[32, "bosk.block.zoo.multi_grained_scanning._convolution_helpers._PoolingIndices.n_kernel_points"], [32, "id3"]], "pad() (bosk.block.zoo.multi_grained_scanning._convolution_helpers._convolutionhelper method)": [[32, "bosk.block.zoo.multi_grained_scanning._convolution_helpers._ConvolutionHelper.pad"]], "padding (bosk.block.zoo.multi_grained_scanning._convolution_helpers._convolutionparams attribute)": [[32, "bosk.block.zoo.multi_grained_scanning._convolution_helpers._ConvolutionParams.padding"]], "pooled_shape (bosk.block.zoo.multi_grained_scanning._convolution_helpers._poolingindices attribute)": [[32, "bosk.block.zoo.multi_grained_scanning._convolution_helpers._PoolingIndices.pooled_shape"], [32, "id4"]], "prepare_corner() (bosk.block.zoo.multi_grained_scanning._convolution_helpers._convolutionhelper method)": [[32, "bosk.block.zoo.multi_grained_scanning._convolution_helpers._ConvolutionHelper.prepare_corner"]], "prepare_kernel() (bosk.block.zoo.multi_grained_scanning._convolution_helpers._convolutionhelper method)": [[32, "bosk.block.zoo.multi_grained_scanning._convolution_helpers._ConvolutionHelper.prepare_kernel"]], "prepare_pooling_indices() (bosk.block.zoo.multi_grained_scanning._convolution_helpers._convolutionhelper method)": [[32, "bosk.block.zoo.multi_grained_scanning._convolution_helpers._ConvolutionHelper.prepare_pooling_indices"]], "slice() (bosk.block.zoo.multi_grained_scanning._convolution_helpers._convolutionhelper method)": [[32, "bosk.block.zoo.multi_grained_scanning._convolution_helpers._ConvolutionHelper.slice"]], "stride (bosk.block.zoo.multi_grained_scanning._convolution_helpers._convolutionparams attribute)": [[32, "bosk.block.zoo.multi_grained_scanning._convolution_helpers._ConvolutionParams.stride"]], "xs_shape (bosk.block.zoo.multi_grained_scanning._convolution_helpers._poolingindices attribute)": [[32, "bosk.block.zoo.multi_grained_scanning._convolution_helpers._PoolingIndices.xs_shape"], [32, "id0"]], "xs_shape (in module bosk.block.zoo.multi_grained_scanning._convolution_helpers)": [[32, "bosk.block.zoo.multi_grained_scanning._convolution_helpers.xs_shape"]], "_njit_max_pooling_1d() (in module bosk.block.zoo.multi_grained_scanning._pooling_impl)": [[33, "bosk.block.zoo.multi_grained_scanning._pooling_impl._njit_max_pooling_1d"]], "_njit_max_pooling_2d() (in module bosk.block.zoo.multi_grained_scanning._pooling_impl)": [[33, "bosk.block.zoo.multi_grained_scanning._pooling_impl._njit_max_pooling_2d"]], "_njit_mean_pooling_1d() (in module bosk.block.zoo.multi_grained_scanning._pooling_impl)": [[33, "bosk.block.zoo.multi_grained_scanning._pooling_impl._njit_mean_pooling_1d"]], "_njit_mean_pooling_2d() (in module bosk.block.zoo.multi_grained_scanning._pooling_impl)": [[33, "bosk.block.zoo.multi_grained_scanning._pooling_impl._njit_mean_pooling_2d"]], "bosk.block.zoo.multi_grained_scanning._pooling_impl": [[33, "module-bosk.block.zoo.multi_grained_scanning._pooling_impl"]], "multigrainedscanningblock (class in bosk.block.zoo.multi_grained_scanning.base)": [[34, "bosk.block.zoo.multi_grained_scanning.base.MultiGrainedScanningBlock"]], "_window_slicing_data() (bosk.block.zoo.multi_grained_scanning.base.multigrainedscanningblock method)": [[34, "bosk.block.zoo.multi_grained_scanning.base.MultiGrainedScanningBlock._window_slicing_data"]], "_window_slicing_fit() (bosk.block.zoo.multi_grained_scanning.base.multigrainedscanningblock method)": [[34, "bosk.block.zoo.multi_grained_scanning.base.MultiGrainedScanningBlock._window_slicing_fit"]], "_window_slicing_predict() (bosk.block.zoo.multi_grained_scanning.base.multigrainedscanningblock method)": [[34, "bosk.block.zoo.multi_grained_scanning.base.MultiGrainedScanningBlock._window_slicing_predict"]], "bosk.block.zoo.multi_grained_scanning.base": [[34, "module-bosk.block.zoo.multi_grained_scanning.base"]], "fit() (bosk.block.zoo.multi_grained_scanning.base.multigrainedscanningblock method)": [[34, "bosk.block.zoo.multi_grained_scanning.base.MultiGrainedScanningBlock.fit"]], "set_random_state() (bosk.block.zoo.multi_grained_scanning.base.multigrainedscanningblock method)": [[34, "bosk.block.zoo.multi_grained_scanning.base.MultiGrainedScanningBlock.set_random_state"]], "transform() (bosk.block.zoo.multi_grained_scanning.base.multigrainedscanningblock method)": [[34, "bosk.block.zoo.multi_grained_scanning.base.MultiGrainedScanningBlock.transform"]], "multigrainedscanning1dblock (class in bosk.block.zoo.multi_grained_scanning)": [[35, "bosk.block.zoo.multi_grained_scanning.MultiGrainedScanning1DBlock"]], "multigrainedscanning2dblock (class in bosk.block.zoo.multi_grained_scanning)": [[35, "bosk.block.zoo.multi_grained_scanning.MultiGrainedScanning2DBlock"]], "multigrainedscanningndblock (class in bosk.block.zoo.multi_grained_scanning)": [[35, "bosk.block.zoo.multi_grained_scanning.MultiGrainedScanningNDBlock"]], "poolingblock (class in bosk.block.zoo.multi_grained_scanning)": [[35, "bosk.block.zoo.multi_grained_scanning.PoolingBlock"]], "__aggregate() (bosk.block.zoo.multi_grained_scanning.poolingblock method)": [[35, "bosk.block.zoo.multi_grained_scanning.PoolingBlock.__aggregate"]], "__chunk_pooling() (bosk.block.zoo.multi_grained_scanning.poolingblock method)": [[35, "bosk.block.zoo.multi_grained_scanning.PoolingBlock.__chunk_pooling"]], "__index_based_chunk_pooling() (bosk.block.zoo.multi_grained_scanning.poolingblock method)": [[35, "bosk.block.zoo.multi_grained_scanning.PoolingBlock.__index_based_chunk_pooling"]], "__jax_based_pooling() (bosk.block.zoo.multi_grained_scanning.poolingblock method)": [[35, "bosk.block.zoo.multi_grained_scanning.PoolingBlock.__jax_based_pooling"]], "__njit_based_chunk_pooling() (bosk.block.zoo.multi_grained_scanning.poolingblock method)": [[35, "bosk.block.zoo.multi_grained_scanning.PoolingBlock.__njit_based_chunk_pooling"]], "__prepare_pooling_indices() (bosk.block.zoo.multi_grained_scanning.multigrainedscanningndblock method)": [[35, "bosk.block.zoo.multi_grained_scanning.MultiGrainedScanningNDBlock.__prepare_pooling_indices"]], "__prepare_pooling_indices() (bosk.block.zoo.multi_grained_scanning.poolingblock method)": [[35, "bosk.block.zoo.multi_grained_scanning.PoolingBlock.__prepare_pooling_indices"]], "_model_transform() (bosk.block.zoo.multi_grained_scanning.multigrainedscanningndblock method)": [[35, "bosk.block.zoo.multi_grained_scanning.MultiGrainedScanningNDBlock._model_transform"]], "_window_slicing_data() (bosk.block.zoo.multi_grained_scanning.multigrainedscanning1dblock method)": [[35, "bosk.block.zoo.multi_grained_scanning.MultiGrainedScanning1DBlock._window_slicing_data"]], "_window_slicing_data() (bosk.block.zoo.multi_grained_scanning.multigrainedscanning2dblock method)": [[35, "bosk.block.zoo.multi_grained_scanning.MultiGrainedScanning2DBlock._window_slicing_data"]], "bosk.block.zoo.multi_grained_scanning": [[35, "module-bosk.block.zoo.multi_grained_scanning"]], "fit() (bosk.block.zoo.multi_grained_scanning.multigrainedscanningndblock method)": [[35, "bosk.block.zoo.multi_grained_scanning.MultiGrainedScanningNDBlock.fit"]], "fit() (bosk.block.zoo.multi_grained_scanning.poolingblock method)": [[35, "bosk.block.zoo.multi_grained_scanning.PoolingBlock.fit"]], "meta (bosk.block.zoo.multi_grained_scanning.multigrainedscanningndblock attribute)": [[35, "bosk.block.zoo.multi_grained_scanning.MultiGrainedScanningNDBlock.meta"]], "meta (bosk.block.zoo.multi_grained_scanning.poolingblock attribute)": [[35, "bosk.block.zoo.multi_grained_scanning.PoolingBlock.meta"]], "transform() (bosk.block.zoo.multi_grained_scanning.multigrainedscanningndblock method)": [[35, "bosk.block.zoo.multi_grained_scanning.MultiGrainedScanningNDBlock.transform"]], "transform() (bosk.block.zoo.multi_grained_scanning.poolingblock method)": [[35, "bosk.block.zoo.multi_grained_scanning.PoolingBlock.transform"]], "bosk.block.zoo.multi_grained_scanning.mil": [[36, "module-bosk.block.zoo.multi_grained_scanning.mil"]], "multigrainedscanning1dblock (class in bosk.block.zoo.multi_grained_scanning.multi_grained_scanning_1d)": [[37, "bosk.block.zoo.multi_grained_scanning.multi_grained_scanning_1d.MultiGrainedScanning1DBlock"]], "_window_slicing_data() (bosk.block.zoo.multi_grained_scanning.multi_grained_scanning_1d.multigrainedscanning1dblock method)": [[37, "bosk.block.zoo.multi_grained_scanning.multi_grained_scanning_1d.MultiGrainedScanning1DBlock._window_slicing_data"]], "bosk.block.zoo.multi_grained_scanning.multi_grained_scanning_1d": [[37, "module-bosk.block.zoo.multi_grained_scanning.multi_grained_scanning_1d"]], "multigrainedscanning2dblock (class in bosk.block.zoo.multi_grained_scanning.multi_grained_scanning_2d)": [[38, "bosk.block.zoo.multi_grained_scanning.multi_grained_scanning_2d.MultiGrainedScanning2DBlock"]], "_window_slicing_data() (bosk.block.zoo.multi_grained_scanning.multi_grained_scanning_2d.multigrainedscanning2dblock method)": [[38, "bosk.block.zoo.multi_grained_scanning.multi_grained_scanning_2d.MultiGrainedScanning2DBlock._window_slicing_data"]], "bosk.block.zoo.multi_grained_scanning.multi_grained_scanning_2d": [[38, "module-bosk.block.zoo.multi_grained_scanning.multi_grained_scanning_2d"]], "multigrainedscanningndblock (class in bosk.block.zoo.multi_grained_scanning.multi_grained_scanning_nd)": [[39, "bosk.block.zoo.multi_grained_scanning.multi_grained_scanning_nd.MultiGrainedScanningNDBlock"]], "__prepare_pooling_indices() (bosk.block.zoo.multi_grained_scanning.multi_grained_scanning_nd.multigrainedscanningndblock method)": [[39, "bosk.block.zoo.multi_grained_scanning.multi_grained_scanning_nd.MultiGrainedScanningNDBlock.__prepare_pooling_indices"]], "_model_transform() (bosk.block.zoo.multi_grained_scanning.multi_grained_scanning_nd.multigrainedscanningndblock method)": [[39, "bosk.block.zoo.multi_grained_scanning.multi_grained_scanning_nd.MultiGrainedScanningNDBlock._model_transform"]], "bosk.block.zoo.multi_grained_scanning.multi_grained_scanning_nd": [[39, "module-bosk.block.zoo.multi_grained_scanning.multi_grained_scanning_nd"]], "fit() (bosk.block.zoo.multi_grained_scanning.multi_grained_scanning_nd.multigrainedscanningndblock method)": [[39, "bosk.block.zoo.multi_grained_scanning.multi_grained_scanning_nd.MultiGrainedScanningNDBlock.fit"]], "meta (bosk.block.zoo.multi_grained_scanning.multi_grained_scanning_nd.multigrainedscanningndblock attribute)": [[39, "bosk.block.zoo.multi_grained_scanning.multi_grained_scanning_nd.MultiGrainedScanningNDBlock.meta"]], "transform() (bosk.block.zoo.multi_grained_scanning.multi_grained_scanning_nd.multigrainedscanningndblock method)": [[39, "bosk.block.zoo.multi_grained_scanning.multi_grained_scanning_nd.MultiGrainedScanningNDBlock.transform"]], "aggregation_functions (in module bosk.block.zoo.multi_grained_scanning.pooling)": [[40, "bosk.block.zoo.multi_grained_scanning.pooling.AGGREGATION_FUNCTIONS"]], "globalaveragepoolingblock (class in bosk.block.zoo.multi_grained_scanning.pooling)": [[40, "bosk.block.zoo.multi_grained_scanning.pooling.GlobalAveragePoolingBlock"]], "poolingblock (class in bosk.block.zoo.multi_grained_scanning.pooling)": [[40, "bosk.block.zoo.multi_grained_scanning.pooling.PoolingBlock"]], "__aggregate() (bosk.block.zoo.multi_grained_scanning.pooling.poolingblock method)": [[40, "bosk.block.zoo.multi_grained_scanning.pooling.PoolingBlock.__aggregate"]], "__chunk_pooling() (bosk.block.zoo.multi_grained_scanning.pooling.poolingblock method)": [[40, "bosk.block.zoo.multi_grained_scanning.pooling.PoolingBlock.__chunk_pooling"]], "__index_based_chunk_pooling() (bosk.block.zoo.multi_grained_scanning.pooling.poolingblock method)": [[40, "bosk.block.zoo.multi_grained_scanning.pooling.PoolingBlock.__index_based_chunk_pooling"]], "__jax_based_pooling() (bosk.block.zoo.multi_grained_scanning.pooling.poolingblock method)": [[40, "bosk.block.zoo.multi_grained_scanning.pooling.PoolingBlock.__jax_based_pooling"]], "__njit_based_chunk_pooling() (bosk.block.zoo.multi_grained_scanning.pooling.poolingblock method)": [[40, "bosk.block.zoo.multi_grained_scanning.pooling.PoolingBlock.__njit_based_chunk_pooling"]], "__prepare_pooling_indices() (bosk.block.zoo.multi_grained_scanning.pooling.poolingblock method)": [[40, "bosk.block.zoo.multi_grained_scanning.pooling.PoolingBlock.__prepare_pooling_indices"]], "_check_dims() (bosk.block.zoo.multi_grained_scanning.pooling.globalaveragepoolingblock method)": [[40, "bosk.block.zoo.multi_grained_scanning.pooling.GlobalAveragePoolingBlock._check_dims"]], "bosk.block.zoo.multi_grained_scanning.pooling": [[40, "module-bosk.block.zoo.multi_grained_scanning.pooling"]], "fit() (bosk.block.zoo.multi_grained_scanning.pooling.globalaveragepoolingblock method)": [[40, "bosk.block.zoo.multi_grained_scanning.pooling.GlobalAveragePoolingBlock.fit"]], "fit() (bosk.block.zoo.multi_grained_scanning.pooling.poolingblock method)": [[40, "bosk.block.zoo.multi_grained_scanning.pooling.PoolingBlock.fit"]], "meta (bosk.block.zoo.multi_grained_scanning.pooling.globalaveragepoolingblock attribute)": [[40, "bosk.block.zoo.multi_grained_scanning.pooling.GlobalAveragePoolingBlock.meta"], [40, "id0"]], "meta (bosk.block.zoo.multi_grained_scanning.pooling.poolingblock attribute)": [[40, "bosk.block.zoo.multi_grained_scanning.pooling.PoolingBlock.meta"]], "slots (bosk.block.zoo.multi_grained_scanning.pooling.globalaveragepoolingblock attribute)": [[40, "bosk.block.zoo.multi_grained_scanning.pooling.GlobalAveragePoolingBlock.slots"]], "transform() (bosk.block.zoo.multi_grained_scanning.pooling.globalaveragepoolingblock method)": [[40, "bosk.block.zoo.multi_grained_scanning.pooling.GlobalAveragePoolingBlock.transform"]], "transform() (bosk.block.zoo.multi_grained_scanning.pooling.poolingblock method)": [[40, "bosk.block.zoo.multi_grained_scanning.pooling.PoolingBlock.transform"]], "baseoutputblock (class in bosk.block.zoo.output_plugs)": [[41, "bosk.block.zoo.output_plugs.BaseOutputBlock"]], "blockexecutionproperties (class in bosk.block.zoo.output_plugs)": [[41, "bosk.block.zoo.output_plugs.BlockExecutionProperties"]], "blockinputdata (in module bosk.block.zoo.output_plugs)": [[41, "bosk.block.zoo.output_plugs.BlockInputData"]], "blockmeta (class in bosk.block.zoo.output_plugs)": [[41, "bosk.block.zoo.output_plugs.BlockMeta"]], "default_output_name (bosk.block.zoo.output_plugs.outputblock attribute)": [[41, "bosk.block.zoo.output_plugs.OutputBlock.DEFAULT_OUTPUT_NAME"]], "dynamicblockmetastub (class in bosk.block.zoo.output_plugs)": [[41, "bosk.block.zoo.output_plugs.DynamicBlockMetaStub"]], "outputblock (class in bosk.block.zoo.output_plugs)": [[41, "bosk.block.zoo.output_plugs.OutputBlock"]], "transformoutputdata (in module bosk.block.zoo.output_plugs)": [[41, "bosk.block.zoo.output_plugs.TransformOutputData"]], "_make_slots() (bosk.block.zoo.output_plugs.baseoutputblock method)": [[41, "bosk.block.zoo.output_plugs.BaseOutputBlock._make_slots"]], "bosk.block.zoo.output_plugs": [[41, "module-bosk.block.zoo.output_plugs"]], "cpu (bosk.block.zoo.output_plugs.blockexecutionproperties attribute)": [[41, "bosk.block.zoo.output_plugs.BlockExecutionProperties.cpu"]], "execution_props (bosk.block.zoo.output_plugs.blockmeta attribute)": [[41, "bosk.block.zoo.output_plugs.BlockMeta.execution_props"]], "fit() (bosk.block.zoo.output_plugs.outputblock method)": [[41, "bosk.block.zoo.output_plugs.OutputBlock.fit"]], "get_single_output() (bosk.block.zoo.output_plugs.baseoutputblock method)": [[41, "bosk.block.zoo.output_plugs.BaseOutputBlock.get_single_output"]], "gpu (bosk.block.zoo.output_plugs.blockexecutionproperties attribute)": [[41, "bosk.block.zoo.output_plugs.BlockExecutionProperties.gpu"]], "inputs (bosk.block.zoo.output_plugs.blockmeta attribute)": [[41, "bosk.block.zoo.output_plugs.BlockMeta.inputs"]], "list_of_slots_meta_to_mapping() (bosk.block.zoo.output_plugs.blockmeta static method)": [[41, "bosk.block.zoo.output_plugs.BlockMeta.list_of_slots_meta_to_mapping"]], "make_simple_meta() (in module bosk.block.zoo.output_plugs)": [[41, "bosk.block.zoo.output_plugs.make_simple_meta"]], "meta (bosk.block.zoo.output_plugs.outputblock attribute)": [[41, "bosk.block.zoo.output_plugs.OutputBlock.meta"]], "name (bosk.block.zoo.output_plugs.baseoutputblock property)": [[41, "bosk.block.zoo.output_plugs.BaseOutputBlock.name"]], "name (bosk.block.zoo.output_plugs.outputblock attribute)": [[41, "bosk.block.zoo.output_plugs.OutputBlock.name"]], "outputs (bosk.block.zoo.output_plugs.blockmeta attribute)": [[41, "bosk.block.zoo.output_plugs.BlockMeta.outputs"]], "plain (bosk.block.zoo.output_plugs.blockexecutionproperties attribute)": [[41, "bosk.block.zoo.output_plugs.BlockExecutionProperties.plain"]], "threadsafe (bosk.block.zoo.output_plugs.blockexecutionproperties attribute)": [[41, "bosk.block.zoo.output_plugs.BlockExecutionProperties.threadsafe"]], "transform() (bosk.block.zoo.output_plugs.outputblock method)": [[41, "bosk.block.zoo.output_plugs.OutputBlock.transform"]], "bosk.block.zoo.preprocessing": [[42, "module-bosk.block.zoo.preprocessing"]], "csblock (class in bosk.block.zoo.routing.cs)": [[43, "bosk.block.zoo.routing.cs.CSBlock"]], "csfilterblock (class in bosk.block.zoo.routing.cs)": [[43, "bosk.block.zoo.routing.cs.CSFilterBlock"]], "csjoinblock (class in bosk.block.zoo.routing.cs)": [[43, "bosk.block.zoo.routing.cs.CSJoinBlock"]], "bosk.block.zoo.routing.cs": [[43, "module-bosk.block.zoo.routing.cs"]], "eps (bosk.block.zoo.routing.cs.csblock attribute)": [[43, "bosk.block.zoo.routing.cs.CSBlock.eps"]], "fit() (bosk.block.zoo.routing.cs.csblock method)": [[43, "bosk.block.zoo.routing.cs.CSBlock.fit"]], "fit() (bosk.block.zoo.routing.cs.csfilterblock method)": [[43, "bosk.block.zoo.routing.cs.CSFilterBlock.fit"]], "fit() (bosk.block.zoo.routing.cs.csjoinblock method)": [[43, "bosk.block.zoo.routing.cs.CSJoinBlock.fit"]], "input_names (bosk.block.zoo.routing.cs.csfilterblock attribute)": [[43, "bosk.block.zoo.routing.cs.CSFilterBlock.input_names"]], "meta (bosk.block.zoo.routing.cs.csblock attribute)": [[43, "bosk.block.zoo.routing.cs.CSBlock.meta"]], "meta (bosk.block.zoo.routing.cs.csfilterblock attribute)": [[43, "bosk.block.zoo.routing.cs.CSFilterBlock.meta"]], "meta (bosk.block.zoo.routing.cs.csjoinblock attribute)": [[43, "bosk.block.zoo.routing.cs.CSJoinBlock.meta"]], "transform() (bosk.block.zoo.routing.cs.csblock method)": [[43, "bosk.block.zoo.routing.cs.CSBlock.transform"]], "transform() (bosk.block.zoo.routing.cs.csfilterblock method)": [[43, "bosk.block.zoo.routing.cs.CSFilterBlock.transform"]], "transform() (bosk.block.zoo.routing.cs.csjoinblock method)": [[43, "bosk.block.zoo.routing.cs.CSJoinBlock.transform"]], "cvtrainindicesblock (class in bosk.block.zoo.routing.cv)": [[44, "bosk.block.zoo.routing.cv.CVTrainIndicesBlock"]], "subsettrainwrapperblock (class in bosk.block.zoo.routing.cv)": [[44, "bosk.block.zoo.routing.cv.SubsetTrainWrapperBlock"]], "training_indices_name (bosk.block.zoo.routing.cv.subsettrainwrapperblock attribute)": [[44, "bosk.block.zoo.routing.cv.SubsetTrainWrapperBlock.TRAINING_INDICES_NAME"]], "_exclude_training_indices() (bosk.block.zoo.routing.cv.subsettrainwrapperblock method)": [[44, "bosk.block.zoo.routing.cv.SubsetTrainWrapperBlock._exclude_training_indices"]], "block (bosk.block.zoo.routing.cv.subsettrainwrapperblock attribute)": [[44, "bosk.block.zoo.routing.cv.SubsetTrainWrapperBlock.block"]], "bosk.block.zoo.routing.cv": [[44, "module-bosk.block.zoo.routing.cv"]], "fit() (bosk.block.zoo.routing.cv.cvtrainindicesblock method)": [[44, "bosk.block.zoo.routing.cv.CVTrainIndicesBlock.fit"]], "fit() (bosk.block.zoo.routing.cv.subsettrainwrapperblock method)": [[44, "bosk.block.zoo.routing.cv.SubsetTrainWrapperBlock.fit"]], "meta (bosk.block.zoo.routing.cv.cvtrainindicesblock attribute)": [[44, "bosk.block.zoo.routing.cv.CVTrainIndicesBlock.meta"]], "meta (bosk.block.zoo.routing.cv.subsettrainwrapperblock attribute)": [[44, "bosk.block.zoo.routing.cv.SubsetTrainWrapperBlock.meta"]], "random_state (bosk.block.zoo.routing.cv.cvtrainindicesblock attribute)": [[44, "bosk.block.zoo.routing.cv.CVTrainIndicesBlock.random_state"]], "set_random_state() (bosk.block.zoo.routing.cv.subsettrainwrapperblock method)": [[44, "bosk.block.zoo.routing.cv.SubsetTrainWrapperBlock.set_random_state"]], "size (bosk.block.zoo.routing.cv.cvtrainindicesblock attribute)": [[44, "bosk.block.zoo.routing.cv.CVTrainIndicesBlock.size"]], "transform() (bosk.block.zoo.routing.cv.cvtrainindicesblock method)": [[44, "bosk.block.zoo.routing.cv.CVTrainIndicesBlock.transform"]], "transform() (bosk.block.zoo.routing.cv.subsettrainwrapperblock method)": [[44, "bosk.block.zoo.routing.cv.SubsetTrainWrapperBlock.transform"]], "csblock (class in bosk.block.zoo.routing)": [[45, "bosk.block.zoo.routing.CSBlock"]], "csfilterblock (class in bosk.block.zoo.routing)": [[45, "bosk.block.zoo.routing.CSFilterBlock"]], "csjoinblock (class in bosk.block.zoo.routing)": [[45, "bosk.block.zoo.routing.CSJoinBlock"]], "cvtrainindicesblock (class in bosk.block.zoo.routing)": [[45, "bosk.block.zoo.routing.CVTrainIndicesBlock"]], "subsettrainwrapperblock (class in bosk.block.zoo.routing)": [[45, "bosk.block.zoo.routing.SubsetTrainWrapperBlock"]], "training_indices_name (bosk.block.zoo.routing.subsettrainwrapperblock attribute)": [[45, "bosk.block.zoo.routing.SubsetTrainWrapperBlock.TRAINING_INDICES_NAME"]], "_exclude_training_indices() (bosk.block.zoo.routing.subsettrainwrapperblock method)": [[45, "bosk.block.zoo.routing.SubsetTrainWrapperBlock._exclude_training_indices"]], "block (bosk.block.zoo.routing.subsettrainwrapperblock attribute)": [[45, "bosk.block.zoo.routing.SubsetTrainWrapperBlock.block"]], "bosk.block.zoo.routing": [[45, "module-bosk.block.zoo.routing"]], "eps (bosk.block.zoo.routing.csblock attribute)": [[45, "bosk.block.zoo.routing.CSBlock.eps"]], "fit() (bosk.block.zoo.routing.csblock method)": [[45, "bosk.block.zoo.routing.CSBlock.fit"]], "fit() (bosk.block.zoo.routing.csfilterblock method)": [[45, "bosk.block.zoo.routing.CSFilterBlock.fit"]], "fit() (bosk.block.zoo.routing.csjoinblock method)": [[45, "bosk.block.zoo.routing.CSJoinBlock.fit"]], "fit() (bosk.block.zoo.routing.cvtrainindicesblock method)": [[45, "bosk.block.zoo.routing.CVTrainIndicesBlock.fit"]], "fit() (bosk.block.zoo.routing.subsettrainwrapperblock method)": [[45, "bosk.block.zoo.routing.SubsetTrainWrapperBlock.fit"]], "input_names (bosk.block.zoo.routing.csfilterblock attribute)": [[45, "bosk.block.zoo.routing.CSFilterBlock.input_names"]], "meta (bosk.block.zoo.routing.csblock attribute)": [[45, "bosk.block.zoo.routing.CSBlock.meta"]], "meta (bosk.block.zoo.routing.csfilterblock attribute)": [[45, "bosk.block.zoo.routing.CSFilterBlock.meta"]], "meta (bosk.block.zoo.routing.csjoinblock attribute)": [[45, "bosk.block.zoo.routing.CSJoinBlock.meta"]], "meta (bosk.block.zoo.routing.cvtrainindicesblock attribute)": [[45, "bosk.block.zoo.routing.CVTrainIndicesBlock.meta"]], "meta (bosk.block.zoo.routing.subsettrainwrapperblock attribute)": [[45, "bosk.block.zoo.routing.SubsetTrainWrapperBlock.meta"]], "random_state (bosk.block.zoo.routing.cvtrainindicesblock attribute)": [[45, "bosk.block.zoo.routing.CVTrainIndicesBlock.random_state"]], "set_random_state() (bosk.block.zoo.routing.subsettrainwrapperblock method)": [[45, "bosk.block.zoo.routing.SubsetTrainWrapperBlock.set_random_state"]], "size (bosk.block.zoo.routing.cvtrainindicesblock attribute)": [[45, "bosk.block.zoo.routing.CVTrainIndicesBlock.size"]], "transform() (bosk.block.zoo.routing.csblock method)": [[45, "bosk.block.zoo.routing.CSBlock.transform"]], "transform() (bosk.block.zoo.routing.csfilterblock method)": [[45, "bosk.block.zoo.routing.CSFilterBlock.transform"]], "transform() (bosk.block.zoo.routing.csjoinblock method)": [[45, "bosk.block.zoo.routing.CSJoinBlock.transform"]], "transform() (bosk.block.zoo.routing.cvtrainindicesblock method)": [[45, "bosk.block.zoo.routing.CVTrainIndicesBlock.transform"]], "transform() (bosk.block.zoo.routing.subsettrainwrapperblock method)": [[45, "bosk.block.zoo.routing.SubsetTrainWrapperBlock.transform"]], "basecomparator (class in bosk.comparison.base)": [[46, "bosk.comparison.base.BaseComparator"]], "baseforeignmodel (class in bosk.comparison.base)": [[46, "bosk.comparison.base.BaseForeignModel"]], "_add_common_block() (bosk.comparison.base.basecomparator method)": [[46, "bosk.comparison.base.BaseComparator._add_common_block"]], "_compare_blocks_conns() (bosk.comparison.base.basecomparator method)": [[46, "bosk.comparison.base.BaseComparator._compare_blocks_conns"]], "_continue_bfs() (bosk.comparison.base.basecomparator method)": [[46, "bosk.comparison.base.BaseComparator._continue_bfs"]], "_find_next_block() (bosk.comparison.base.basecomparator method)": [[46, "bosk.comparison.base.BaseComparator._find_next_block"]], "_get_aj_lists() (bosk.comparison.base.basecomparator method)": [[46, "bosk.comparison.base.BaseComparator._get_aj_lists"]], "_get_common_input_dict() (bosk.comparison.base.basecomparator method)": [[46, "bosk.comparison.base.BaseComparator._get_common_input_dict"]], "_get_common_inputs() (bosk.comparison.base.basecomparator method)": [[46, "bosk.comparison.base.BaseComparator._get_common_inputs"]], "_get_input_plug() (bosk.comparison.base.basecomparator method)": [[46, "bosk.comparison.base.BaseComparator._get_input_plug"]], "_set_manual_state() (bosk.comparison.base.basecomparator method)": [[46, "bosk.comparison.base.BaseComparator._set_manual_state"]], "_set_random_state() (bosk.comparison.base.basecomparator method)": [[46, "bosk.comparison.base.BaseComparator._set_random_state"]], "_splice_pipelines() (bosk.comparison.base.basecomparator method)": [[46, "bosk.comparison.base.BaseComparator._splice_pipelines"]], "bosk.comparison.base": [[46, "module-bosk.comparison.base"]], "fit() (bosk.comparison.base.baseforeignmodel method)": [[46, "bosk.comparison.base.BaseForeignModel.fit"]], "get_block_md5_hash() (in module bosk.comparison.base)": [[46, "bosk.comparison.base.get_block_md5_hash"]], "get_score() (bosk.comparison.base.basecomparator method)": [[46, "bosk.comparison.base.BaseComparator.get_score"]], "predict() (bosk.comparison.base.baseforeignmodel method)": [[46, "bosk.comparison.base.BaseForeignModel.predict"]], "random_state (bosk.comparison.base.basecomparator attribute)": [[46, "bosk.comparison.base.BaseComparator.random_state"]], "set_random_state() (bosk.comparison.base.baseforeignmodel method)": [[46, "bosk.comparison.base.BaseForeignModel.set_random_state"]], "cvcomparator (class in bosk.comparison.cross_val)": [[47, "bosk.comparison.cross_val.CVComparator"]], "_get_copy_pipeline() (bosk.comparison.cross_val.cvcomparator method)": [[47, "bosk.comparison.cross_val.CVComparator._get_copy_pipeline"]], "_get_metrics_names() (bosk.comparison.cross_val.cvcomparator method)": [[47, "bosk.comparison.cross_val.CVComparator._get_metrics_names"]], "_get_pers_inp_dict() (bosk.comparison.cross_val.cvcomparator method)": [[47, "bosk.comparison.cross_val.CVComparator._get_pers_inp_dict"]], "_get_times_dict() (bosk.comparison.cross_val.cvcomparator method)": [[47, "bosk.comparison.cross_val.CVComparator._get_times_dict"]], "_write_metrics_info_to_dict() (bosk.comparison.cross_val.cvcomparator method)": [[47, "bosk.comparison.cross_val.CVComparator._write_metrics_info_to_dict"]], "_write_preamble() (bosk.comparison.cross_val.cvcomparator method)": [[47, "bosk.comparison.cross_val.CVComparator._write_preamble"]], "bosk.comparison.cross_val": [[47, "module-bosk.comparison.cross_val"]], "get_score() (bosk.comparison.cross_val.cvcomparator method)": [[47, "bosk.comparison.cross_val.CVComparator.get_score"]], "basecomparator (class in bosk.comparison)": [[48, "bosk.comparison.BaseComparator"]], "baseforeignmodel (class in bosk.comparison)": [[48, "bosk.comparison.BaseForeignModel"]], "basemetric (class in bosk.comparison)": [[48, "bosk.comparison.BaseMetric"]], "cvcomparator (class in bosk.comparison)": [[48, "bosk.comparison.CVComparator"]], "metricwrapper (class in bosk.comparison)": [[48, "bosk.comparison.MetricWrapper"]], "_add_common_block() (bosk.comparison.basecomparator method)": [[48, "bosk.comparison.BaseComparator._add_common_block"]], "_compare_blocks_conns() (bosk.comparison.basecomparator method)": [[48, "bosk.comparison.BaseComparator._compare_blocks_conns"]], "_continue_bfs() (bosk.comparison.basecomparator method)": [[48, "bosk.comparison.BaseComparator._continue_bfs"]], "_find_next_block() (bosk.comparison.basecomparator method)": [[48, "bosk.comparison.BaseComparator._find_next_block"]], "_get_aj_lists() (bosk.comparison.basecomparator method)": [[48, "bosk.comparison.BaseComparator._get_aj_lists"]], "_get_common_input_dict() (bosk.comparison.basecomparator method)": [[48, "bosk.comparison.BaseComparator._get_common_input_dict"]], "_get_common_inputs() (bosk.comparison.basecomparator method)": [[48, "bosk.comparison.BaseComparator._get_common_inputs"]], "_get_copy_pipeline() (bosk.comparison.cvcomparator method)": [[48, "bosk.comparison.CVComparator._get_copy_pipeline"]], "_get_input_plug() (bosk.comparison.basecomparator method)": [[48, "bosk.comparison.BaseComparator._get_input_plug"]], "_get_metrics_names() (bosk.comparison.cvcomparator method)": [[48, "bosk.comparison.CVComparator._get_metrics_names"]], "_get_pers_inp_dict() (bosk.comparison.cvcomparator method)": [[48, "bosk.comparison.CVComparator._get_pers_inp_dict"]], "_get_times_dict() (bosk.comparison.cvcomparator method)": [[48, "bosk.comparison.CVComparator._get_times_dict"]], "_set_manual_state() (bosk.comparison.basecomparator method)": [[48, "bosk.comparison.BaseComparator._set_manual_state"]], "_set_random_state() (bosk.comparison.basecomparator method)": [[48, "bosk.comparison.BaseComparator._set_random_state"]], "_splice_pipelines() (bosk.comparison.basecomparator method)": [[48, "bosk.comparison.BaseComparator._splice_pipelines"]], "_write_metrics_info_to_dict() (bosk.comparison.cvcomparator method)": [[48, "bosk.comparison.CVComparator._write_metrics_info_to_dict"]], "_write_preamble() (bosk.comparison.cvcomparator method)": [[48, "bosk.comparison.CVComparator._write_preamble"]], "bosk.comparison": [[48, "module-bosk.comparison"]], "fit() (bosk.comparison.baseforeignmodel method)": [[48, "bosk.comparison.BaseForeignModel.fit"]], "get_score() (bosk.comparison.basecomparator method)": [[48, "bosk.comparison.BaseComparator.get_score"]], "get_score() (bosk.comparison.basemetric method)": [[48, "bosk.comparison.BaseMetric.get_score"]], "get_score() (bosk.comparison.cvcomparator method)": [[48, "bosk.comparison.CVComparator.get_score"]], "get_score() (bosk.comparison.metricwrapper method)": [[48, "bosk.comparison.MetricWrapper.get_score"]], "predict() (bosk.comparison.baseforeignmodel method)": [[48, "bosk.comparison.BaseForeignModel.predict"]], "random_state (bosk.comparison.basecomparator attribute)": [[48, "bosk.comparison.BaseComparator.random_state"]], "set_random_state() (bosk.comparison.baseforeignmodel method)": [[48, "bosk.comparison.BaseForeignModel.set_random_state"]], "basemetric (class in bosk.comparison.metric)": [[49, "bosk.comparison.metric.BaseMetric"]], "metricwrapper (class in bosk.comparison.metric)": [[49, "bosk.comparison.metric.MetricWrapper"]], "bosk.comparison.metric": [[49, "module-bosk.comparison.metric"]], "get_score() (bosk.comparison.metric.basemetric method)": [[49, "bosk.comparison.metric.BaseMetric.get_score"]], "get_score() (bosk.comparison.metric.metricwrapper method)": [[49, "bosk.comparison.metric.MetricWrapper.get_score"]], "basedata (class in bosk.data)": [[50, "bosk.data.BaseData"]], "cpudata (class in bosk.data)": [[50, "bosk.data.CPUData"]], "gpudata (class in bosk.data)": [[50, "bosk.data.GPUData"]], "__repr__() (bosk.data.basedata method)": [[50, "bosk.data.BaseData.__repr__"]], "bosk.data": [[50, "module-bosk.data"]], "data (bosk.data.basedata attribute)": [[50, "bosk.data.BaseData.data"]], "data (bosk.data.cpudata attribute)": [[50, "bosk.data.CPUData.data"]], "data (bosk.data.gpudata attribute)": [[50, "bosk.data.GPUData.data"]], "jnp (in module bosk.data)": [[50, "bosk.data.jnp"]], "to_cpu() (bosk.data.basedata method)": [[50, "bosk.data.BaseData.to_cpu"]], "to_cpu() (bosk.data.gpudata method)": [[50, "bosk.data.GPUData.to_cpu"]], "to_gpu() (bosk.data.basedata method)": [[50, "bosk.data.BaseData.to_gpu"]], "multipleblockinputserror": [[51, "bosk.exceptions.MultipleBlockInputsError"]], "multipleblockoutputserror": [[51, "bosk.exceptions.MultipleBlockOutputsError"]], "multipleblockslotserror": [[51, "bosk.exceptions.MultipleBlockSlotsError"]], "nodefaultblockoutputerror": [[51, "bosk.exceptions.NoDefaultBlockOutputError"]], "bosk.exceptions": [[51, "module-bosk.exceptions"]], "baseexecutor (class in bosk.executor.base)": [[52, "bosk.executor.base.BaseExecutor"]], "baseslothandler (class in bosk.executor.base)": [[52, "bosk.executor.base.BaseSlotHandler"]], "defaultslothandler (class in bosk.executor.base)": [[52, "bosk.executor.base.DefaultSlotHandler"]], "executionresult (class in bosk.executor.base)": [[52, "bosk.executor.base.ExecutionResult"]], "__block_executor (bosk.executor.base.baseexecutor attribute)": [[52, "bosk.executor.base.BaseExecutor.__block_executor"]], "__call__() (bosk.executor.base.baseexecutor method)": [[52, "bosk.executor.base.BaseExecutor.__call__"]], "__inputs (bosk.executor.base.baseexecutor attribute)": [[52, "bosk.executor.base.BaseExecutor.__inputs"]], "__outputs (bosk.executor.base.baseexecutor attribute)": [[52, "bosk.executor.base.BaseExecutor.__outputs"]], "__pipeline (bosk.executor.base.baseexecutor attribute)": [[52, "bosk.executor.base.BaseExecutor.__pipeline"]], "__process_inputs_outputs() (bosk.executor.base.baseexecutor method)": [[52, "bosk.executor.base.BaseExecutor.__process_inputs_outputs"]], "__slot_handler (bosk.executor.base.baseexecutor attribute)": [[52, "bosk.executor.base.BaseExecutor.__slot_handler"]], "__stage (bosk.executor.base.baseexecutor attribute)": [[52, "bosk.executor.base.BaseExecutor.__stage"]], "_check_input_values() (bosk.executor.base.baseexecutor method)": [[52, "bosk.executor.base.BaseExecutor._check_input_values"]], "_execute_block() (bosk.executor.base.baseexecutor method)": [[52, "bosk.executor.base.BaseExecutor._execute_block"]], "_is_slot_required() (bosk.executor.base.baseexecutor method)": [[52, "bosk.executor.base.BaseExecutor._is_slot_required"]], "_map_input_names_to_slots() (bosk.executor.base.baseexecutor method)": [[52, "bosk.executor.base.BaseExecutor._map_input_names_to_slots"]], "_prepare_block_executor() (bosk.executor.base.baseexecutor method)": [[52, "bosk.executor.base.BaseExecutor._prepare_block_executor"]], "_prepare_slot_handler() (bosk.executor.base.baseexecutor method)": [[52, "bosk.executor.base.BaseExecutor._prepare_slot_handler"]], "block_executor (bosk.executor.base.baseexecutor attribute)": [[52, "bosk.executor.base.BaseExecutor.block_executor"]], "block_executor (bosk.executor.base.baseexecutor property)": [[52, "id4"]], "bosk.executor.base": [[52, "module-bosk.executor.base"]], "execute() (bosk.executor.base.baseexecutor method)": [[52, "bosk.executor.base.BaseExecutor.execute"]], "inputs (bosk.executor.base.baseexecutor attribute)": [[52, "bosk.executor.base.BaseExecutor.inputs"]], "inputs (bosk.executor.base.baseexecutor property)": [[52, "id1"]], "is_slot_required() (bosk.executor.base.baseslothandler method)": [[52, "bosk.executor.base.BaseSlotHandler.is_slot_required"]], "is_slot_required() (bosk.executor.base.defaultslothandler method)": [[52, "bosk.executor.base.DefaultSlotHandler.is_slot_required"]], "numpy() (bosk.executor.base.executionresult method)": [[52, "bosk.executor.base.ExecutionResult.numpy"]], "outputs (bosk.executor.base.baseexecutor attribute)": [[52, "bosk.executor.base.BaseExecutor.outputs"]], "outputs (bosk.executor.base.baseexecutor property)": [[52, "id2"]], "pipeline (bosk.executor.base.baseexecutor attribute)": [[52, "bosk.executor.base.BaseExecutor.pipeline"]], "pipeline (bosk.executor.base.baseexecutor property)": [[52, "id0"]], "slot_handler (bosk.executor.base.baseexecutor attribute)": [[52, "bosk.executor.base.BaseExecutor.slot_handler"]], "slot_handler (bosk.executor.base.baseexecutor property)": [[52, "id3"]], "stage (bosk.executor.base.baseexecutor attribute)": [[52, "bosk.executor.base.BaseExecutor.stage"]], "stage (bosk.executor.base.baseexecutor property)": [[52, "id5"]], "baseblockexecutor (class in bosk.executor.block)": [[53, "bosk.executor.block.BaseBlockExecutor"]], "cpublockexecutor (class in bosk.executor.block)": [[53, "bosk.executor.block.CPUBlockExecutor"]], "defaultblockexecutor (class in bosk.executor.block)": [[53, "bosk.executor.block.DefaultBlockExecutor"]], "fitblacklistblockexecutor (class in bosk.executor.block)": [[53, "bosk.executor.block.FitBlacklistBlockExecutor"]], "gpublockexecutor (class in bosk.executor.block)": [[53, "bosk.executor.block.GPUBlockExecutor"]], "bosk.executor.block": [[53, "module-bosk.executor.block"]], "execute_block() (bosk.executor.block.baseblockexecutor method)": [[53, "bosk.executor.block.BaseBlockExecutor.execute_block"]], "execute_block() (bosk.executor.block.cpublockexecutor method)": [[53, "bosk.executor.block.CPUBlockExecutor.execute_block"]], "execute_block() (bosk.executor.block.defaultblockexecutor method)": [[53, "bosk.executor.block.DefaultBlockExecutor.execute_block"]], "execute_block() (bosk.executor.block.fitblacklistblockexecutor method)": [[53, "bosk.executor.block.FitBlacklistBlockExecutor.execute_block"]], "execute_block() (bosk.executor.block.gpublockexecutor method)": [[53, "bosk.executor.block.GPUBlockExecutor.execute_block"]], "baseblockexecutor (class in bosk.executor)": [[54, "bosk.executor.BaseBlockExecutor"]], "baseboskpipelinewrapper (class in bosk.executor)": [[54, "bosk.executor.BaseBoskPipelineWrapper"]], "baseslothandler (class in bosk.executor)": [[54, "bosk.executor.BaseSlotHandler"]], "boskpipelineclassifier (class in bosk.executor)": [[54, "bosk.executor.BoskPipelineClassifier"]], "boskpipelineregressor (class in bosk.executor)": [[54, "bosk.executor.BoskPipelineRegressor"]], "boskpipelinetransformer (class in bosk.executor)": [[54, "bosk.executor.BoskPipelineTransformer"]], "defaultblockexecutor (class in bosk.executor)": [[54, "bosk.executor.DefaultBlockExecutor"]], "defaultslothandler (class in bosk.executor)": [[54, "bosk.executor.DefaultSlotHandler"]], "fitblacklistblockexecutor (class in bosk.executor)": [[54, "bosk.executor.FitBlacklistBlockExecutor"]], "greedyparallelexecutor (class in bosk.executor)": [[54, "bosk.executor.GreedyParallelExecutor"]], "recursiveexecutor (class in bosk.executor)": [[54, "bosk.executor.RecursiveExecutor"]], "timerblockexecutor (class in bosk.executor)": [[54, "bosk.executor.TimerBlockExecutor"]], "topologicalexecutor (class in bosk.executor)": [[54, "bosk.executor.TopologicalExecutor"]], "__append_outputs() (bosk.executor.greedyparallelexecutor method)": [[54, "bosk.executor.GreedyParallelExecutor.__append_outputs"]], "__execute_with_parallel() (bosk.executor.greedyparallelexecutor method)": [[54, "bosk.executor.GreedyParallelExecutor.__execute_with_parallel"]], "__map_vars() (bosk.executor.baseboskpipelinewrapper method)": [[54, "bosk.executor.BaseBoskPipelineWrapper.__map_vars"]], "_classifier_init() (bosk.executor.boskpipelineclassifier method)": [[54, "bosk.executor.BoskPipelineClassifier._classifier_init"]], "_clean_unnecessary_data() (bosk.executor.greedyparallelexecutor method)": [[54, "bosk.executor.GreedyParallelExecutor._clean_unnecessary_data"]], "_compute_all_non_threadsafe() (bosk.executor.greedyparallelexecutor method)": [[54, "bosk.executor.GreedyParallelExecutor._compute_all_non_threadsafe"]], "_compute_all_parallel() (bosk.executor.greedyparallelexecutor method)": [[54, "bosk.executor.GreedyParallelExecutor._compute_all_parallel"]], "_compute_all_plain() (bosk.executor.greedyparallelexecutor method)": [[54, "bosk.executor.GreedyParallelExecutor._compute_all_plain"]], "_conn_dict (bosk.executor.topologicalexecutor attribute)": [[54, "bosk.executor.TopologicalExecutor._conn_dict"], [54, "id1"]], "_conn_map (bosk.executor.greedyparallelexecutor attribute)": [[54, "bosk.executor.GreedyParallelExecutor._conn_map"], [54, "id2"]], "_conn_map (bosk.executor.recursiveexecutor attribute)": [[54, "bosk.executor.RecursiveExecutor._conn_map"], [54, "id0"]], "_dfs() (bosk.executor.topologicalexecutor method)": [[54, "bosk.executor.TopologicalExecutor._dfs"]], "_extract() (bosk.executor.baseboskpipelinewrapper method)": [[54, "bosk.executor.BaseBoskPipelineWrapper._extract"]], "_find_ready_blocks() (bosk.executor.greedyparallelexecutor method)": [[54, "bosk.executor.GreedyParallelExecutor._find_ready_blocks"]], "_get_backward_aj_list() (bosk.executor.topologicalexecutor method)": [[54, "bosk.executor.TopologicalExecutor._get_backward_aj_list"]], "_get_blocks() (bosk.executor.greedyparallelexecutor method)": [[54, "bosk.executor.GreedyParallelExecutor._get_blocks"]], "_get_forward_aj_list() (bosk.executor.topologicalexecutor method)": [[54, "bosk.executor.TopologicalExecutor._get_forward_aj_list"]], "_predict_all() (bosk.executor.baseboskpipelinewrapper method)": [[54, "bosk.executor.BaseBoskPipelineWrapper._predict_all"]], "_prepare_executors() (bosk.executor.baseboskpipelinewrapper method)": [[54, "bosk.executor.BaseBoskPipelineWrapper._prepare_executors"]], "_prepare_inputs() (bosk.executor.greedyparallelexecutor method)": [[54, "bosk.executor.GreedyParallelExecutor._prepare_inputs"]], "_prepare_inputs_by_block() (bosk.executor.greedyparallelexecutor method)": [[54, "bosk.executor.GreedyParallelExecutor._prepare_inputs_by_block"]], "_prepare_out_to_in_edges() (bosk.executor.greedyparallelexecutor method)": [[54, "bosk.executor.GreedyParallelExecutor._prepare_out_to_in_edges"]], "_topological_sort() (bosk.executor.topologicalexecutor method)": [[54, "bosk.executor.TopologicalExecutor._topological_sort"]], "block_time (bosk.executor.timerblockexecutor attribute)": [[54, "bosk.executor.TimerBlockExecutor.block_time"]], "blocks_time (bosk.executor.timerblockexecutor property)": [[54, "bosk.executor.TimerBlockExecutor.blocks_time"]], "bosk.executor": [[54, "module-bosk.executor"]], "execute() (bosk.executor.greedyparallelexecutor method)": [[54, "bosk.executor.GreedyParallelExecutor.execute"]], "execute() (bosk.executor.recursiveexecutor method)": [[54, "bosk.executor.RecursiveExecutor.execute"]], "execute() (bosk.executor.topologicalexecutor method)": [[54, "bosk.executor.TopologicalExecutor.execute"]], "execute_block() (bosk.executor.baseblockexecutor method)": [[54, "bosk.executor.BaseBlockExecutor.execute_block"]], "execute_block() (bosk.executor.defaultblockexecutor method)": [[54, "bosk.executor.DefaultBlockExecutor.execute_block"]], "execute_block() (bosk.executor.fitblacklistblockexecutor method)": [[54, "bosk.executor.FitBlacklistBlockExecutor.execute_block"]], "execute_block() (bosk.executor.timerblockexecutor method)": [[54, "bosk.executor.TimerBlockExecutor.execute_block"]], "fit() (bosk.executor.baseboskpipelinewrapper method)": [[54, "bosk.executor.BaseBoskPipelineWrapper.fit"]], "fit() (bosk.executor.boskpipelineclassifier method)": [[54, "bosk.executor.BoskPipelineClassifier.fit"]], "fit_transform() (bosk.executor.boskpipelinetransformer method)": [[54, "bosk.executor.BoskPipelineTransformer.fit_transform"]], "is_slot_required() (bosk.executor.baseslothandler method)": [[54, "bosk.executor.BaseSlotHandler.is_slot_required"]], "is_slot_required() (bosk.executor.defaultslothandler method)": [[54, "bosk.executor.DefaultSlotHandler.is_slot_required"]], "outputs (bosk.executor.greedyparallelexecutor property)": [[54, "bosk.executor.GreedyParallelExecutor.outputs"]], "predict() (bosk.executor.boskpipelineclassifier method)": [[54, "bosk.executor.BoskPipelineClassifier.predict"]], "predict() (bosk.executor.boskpipelineregressor method)": [[54, "bosk.executor.BoskPipelineRegressor.predict"]], "predict_proba() (bosk.executor.boskpipelineclassifier method)": [[54, "bosk.executor.BoskPipelineClassifier.predict_proba"]], "transform() (bosk.executor.boskpipelinetransformer method)": [[54, "bosk.executor.BoskPipelineTransformer.transform"]], "bosk.executor.parallel.dask": [[55, "module-bosk.executor.parallel.dask"]], "greedyparallelexecutor (class in bosk.executor.parallel.greedy)": [[56, "bosk.executor.parallel.greedy.GreedyParallelExecutor"]], "joblibparallelengine (class in bosk.executor.parallel.greedy)": [[56, "bosk.executor.parallel.greedy.JoblibParallelEngine"]], "joblibparallelengine.joblibinstance (class in bosk.executor.parallel.greedy)": [[56, "bosk.executor.parallel.greedy.JoblibParallelEngine.JoblibInstance"]], "multiprocessingparallelengine (class in bosk.executor.parallel.greedy)": [[56, "bosk.executor.parallel.greedy.MultiprocessingParallelEngine"]], "multiprocessingparallelengine.mpinstance (class in bosk.executor.parallel.greedy)": [[56, "bosk.executor.parallel.greedy.MultiprocessingParallelEngine.MPInstance"]], "outslottodata (in module bosk.executor.parallel.greedy)": [[56, "bosk.executor.parallel.greedy.OutSlotToData"]], "parallelengine (class in bosk.executor.parallel.greedy)": [[56, "bosk.executor.parallel.greedy.ParallelEngine"]], "parallelengine.instance (class in bosk.executor.parallel.greedy)": [[56, "bosk.executor.parallel.greedy.ParallelEngine.Instance"]], "resultt (in module bosk.executor.parallel.greedy)": [[56, "bosk.executor.parallel.greedy.ResultT"]], "__append_outputs() (bosk.executor.parallel.greedy.greedyparallelexecutor method)": [[56, "bosk.executor.parallel.greedy.GreedyParallelExecutor.__append_outputs"]], "__enter__() (bosk.executor.parallel.greedy.joblibparallelengine method)": [[56, "bosk.executor.parallel.greedy.JoblibParallelEngine.__enter__"]], "__enter__() (bosk.executor.parallel.greedy.multiprocessingparallelengine method)": [[56, "bosk.executor.parallel.greedy.MultiprocessingParallelEngine.__enter__"]], "__enter__() (bosk.executor.parallel.greedy.parallelengine method)": [[56, "bosk.executor.parallel.greedy.ParallelEngine.__enter__"]], "__execute_with_parallel() (bosk.executor.parallel.greedy.greedyparallelexecutor method)": [[56, "bosk.executor.parallel.greedy.GreedyParallelExecutor.__execute_with_parallel"]], "__exit__() (bosk.executor.parallel.greedy.joblibparallelengine method)": [[56, "bosk.executor.parallel.greedy.JoblibParallelEngine.__exit__"]], "__exit__() (bosk.executor.parallel.greedy.multiprocessingparallelengine method)": [[56, "bosk.executor.parallel.greedy.MultiprocessingParallelEngine.__exit__"]], "__exit__() (bosk.executor.parallel.greedy.parallelengine method)": [[56, "bosk.executor.parallel.greedy.ParallelEngine.__exit__"]], "_clean_unnecessary_data() (bosk.executor.parallel.greedy.greedyparallelexecutor method)": [[56, "bosk.executor.parallel.greedy.GreedyParallelExecutor._clean_unnecessary_data"]], "_compute_all_non_threadsafe() (bosk.executor.parallel.greedy.greedyparallelexecutor method)": [[56, "bosk.executor.parallel.greedy.GreedyParallelExecutor._compute_all_non_threadsafe"]], "_compute_all_parallel() (bosk.executor.parallel.greedy.greedyparallelexecutor method)": [[56, "bosk.executor.parallel.greedy.GreedyParallelExecutor._compute_all_parallel"]], "_compute_all_plain() (bosk.executor.parallel.greedy.greedyparallelexecutor method)": [[56, "bosk.executor.parallel.greedy.GreedyParallelExecutor._compute_all_plain"]], "_conn_map (bosk.executor.parallel.greedy.greedyparallelexecutor attribute)": [[56, "bosk.executor.parallel.greedy.GreedyParallelExecutor._conn_map"], [56, "id0"]], "_find_ready_blocks() (bosk.executor.parallel.greedy.greedyparallelexecutor method)": [[56, "bosk.executor.parallel.greedy.GreedyParallelExecutor._find_ready_blocks"]], "_get_blocks() (bosk.executor.parallel.greedy.greedyparallelexecutor method)": [[56, "bosk.executor.parallel.greedy.GreedyParallelExecutor._get_blocks"]], "_prepare_inputs() (bosk.executor.parallel.greedy.greedyparallelexecutor method)": [[56, "bosk.executor.parallel.greedy.GreedyParallelExecutor._prepare_inputs"]], "_prepare_inputs_by_block() (bosk.executor.parallel.greedy.greedyparallelexecutor method)": [[56, "bosk.executor.parallel.greedy.GreedyParallelExecutor._prepare_inputs_by_block"]], "_prepare_out_to_in_edges() (bosk.executor.parallel.greedy.greedyparallelexecutor method)": [[56, "bosk.executor.parallel.greedy.GreedyParallelExecutor._prepare_out_to_in_edges"]], "bosk.executor.parallel.greedy": [[56, "module-bosk.executor.parallel.greedy"]], "execute() (bosk.executor.parallel.greedy.greedyparallelexecutor method)": [[56, "bosk.executor.parallel.greedy.GreedyParallelExecutor.execute"]], "outputs (bosk.executor.parallel.greedy.greedyparallelexecutor property)": [[56, "bosk.executor.parallel.greedy.GreedyParallelExecutor.outputs"]], "starmap() (bosk.executor.parallel.greedy.joblibparallelengine.joblibinstance method)": [[56, "bosk.executor.parallel.greedy.JoblibParallelEngine.JoblibInstance.starmap"]], "starmap() (bosk.executor.parallel.greedy.multiprocessingparallelengine.mpinstance method)": [[56, "bosk.executor.parallel.greedy.MultiprocessingParallelEngine.MPInstance.starmap"]], "starmap() (bosk.executor.parallel.greedy.parallelengine.instance method)": [[56, "bosk.executor.parallel.greedy.ParallelEngine.Instance.starmap"]], "greedyparallelexecutor (class in bosk.executor.parallel)": [[57, "bosk.executor.parallel.GreedyParallelExecutor"]], "joblibparallelengine (class in bosk.executor.parallel)": [[57, "bosk.executor.parallel.JoblibParallelEngine"]], "joblibparallelengine.joblibinstance (class in bosk.executor.parallel)": [[57, "bosk.executor.parallel.JoblibParallelEngine.JoblibInstance"]], "multiprocessingparallelengine (class in bosk.executor.parallel)": [[57, "bosk.executor.parallel.MultiprocessingParallelEngine"]], "multiprocessingparallelengine.mpinstance (class in bosk.executor.parallel)": [[57, "bosk.executor.parallel.MultiprocessingParallelEngine.MPInstance"]], "parallelengine (class in bosk.executor.parallel)": [[57, "bosk.executor.parallel.ParallelEngine"]], "parallelengine.instance (class in bosk.executor.parallel)": [[57, "bosk.executor.parallel.ParallelEngine.Instance"]], "__append_outputs() (bosk.executor.parallel.greedyparallelexecutor method)": [[57, "bosk.executor.parallel.GreedyParallelExecutor.__append_outputs"]], "__enter__() (bosk.executor.parallel.joblibparallelengine method)": [[57, "bosk.executor.parallel.JoblibParallelEngine.__enter__"]], "__enter__() (bosk.executor.parallel.multiprocessingparallelengine method)": [[57, "bosk.executor.parallel.MultiprocessingParallelEngine.__enter__"]], "__enter__() (bosk.executor.parallel.parallelengine method)": [[57, "bosk.executor.parallel.ParallelEngine.__enter__"]], "__execute_with_parallel() (bosk.executor.parallel.greedyparallelexecutor method)": [[57, "bosk.executor.parallel.GreedyParallelExecutor.__execute_with_parallel"]], "__exit__() (bosk.executor.parallel.joblibparallelengine method)": [[57, "bosk.executor.parallel.JoblibParallelEngine.__exit__"]], "__exit__() (bosk.executor.parallel.multiprocessingparallelengine method)": [[57, "bosk.executor.parallel.MultiprocessingParallelEngine.__exit__"]], "__exit__() (bosk.executor.parallel.parallelengine method)": [[57, "bosk.executor.parallel.ParallelEngine.__exit__"]], "_clean_unnecessary_data() (bosk.executor.parallel.greedyparallelexecutor method)": [[57, "bosk.executor.parallel.GreedyParallelExecutor._clean_unnecessary_data"]], "_compute_all_non_threadsafe() (bosk.executor.parallel.greedyparallelexecutor method)": [[57, "bosk.executor.parallel.GreedyParallelExecutor._compute_all_non_threadsafe"]], "_compute_all_parallel() (bosk.executor.parallel.greedyparallelexecutor method)": [[57, "bosk.executor.parallel.GreedyParallelExecutor._compute_all_parallel"]], "_compute_all_plain() (bosk.executor.parallel.greedyparallelexecutor method)": [[57, "bosk.executor.parallel.GreedyParallelExecutor._compute_all_plain"]], "_conn_map (bosk.executor.parallel.greedyparallelexecutor attribute)": [[57, "bosk.executor.parallel.GreedyParallelExecutor._conn_map"], [57, "id0"]], "_find_ready_blocks() (bosk.executor.parallel.greedyparallelexecutor method)": [[57, "bosk.executor.parallel.GreedyParallelExecutor._find_ready_blocks"]], "_get_blocks() (bosk.executor.parallel.greedyparallelexecutor method)": [[57, "bosk.executor.parallel.GreedyParallelExecutor._get_blocks"]], "_prepare_inputs() (bosk.executor.parallel.greedyparallelexecutor method)": [[57, "bosk.executor.parallel.GreedyParallelExecutor._prepare_inputs"]], "_prepare_inputs_by_block() (bosk.executor.parallel.greedyparallelexecutor method)": [[57, "bosk.executor.parallel.GreedyParallelExecutor._prepare_inputs_by_block"]], "_prepare_out_to_in_edges() (bosk.executor.parallel.greedyparallelexecutor method)": [[57, "bosk.executor.parallel.GreedyParallelExecutor._prepare_out_to_in_edges"]], "bosk.executor.parallel": [[57, "module-bosk.executor.parallel"]], "execute() (bosk.executor.parallel.greedyparallelexecutor method)": [[57, "bosk.executor.parallel.GreedyParallelExecutor.execute"]], "outputs (bosk.executor.parallel.greedyparallelexecutor property)": [[57, "bosk.executor.parallel.GreedyParallelExecutor.outputs"]], "starmap() (bosk.executor.parallel.joblibparallelengine.joblibinstance method)": [[57, "bosk.executor.parallel.JoblibParallelEngine.JoblibInstance.starmap"]], "starmap() (bosk.executor.parallel.multiprocessingparallelengine.mpinstance method)": [[57, "bosk.executor.parallel.MultiprocessingParallelEngine.MPInstance.starmap"]], "starmap() (bosk.executor.parallel.parallelengine.instance method)": [[57, "bosk.executor.parallel.ParallelEngine.Instance.starmap"]], "bosk.executor.parallel.networkx": [[58, "module-bosk.executor.parallel.networkx"]], "bosk.executor.parallel.topsort": [[59, "module-bosk.executor.parallel.topsort"]], "recursiveexecutor (class in bosk.executor.recursive)": [[60, "bosk.executor.recursive.RecursiveExecutor"]], "_conn_map (bosk.executor.recursive.recursiveexecutor attribute)": [[60, "bosk.executor.recursive.RecursiveExecutor._conn_map"], [60, "id0"]], "bosk.executor.recursive": [[60, "module-bosk.executor.recursive"]], "execute() (bosk.executor.recursive.recursiveexecutor method)": [[60, "bosk.executor.recursive.RecursiveExecutor.execute"]], "baseboskpipelinewrapper (class in bosk.executor.sklearn_interface)": [[61, "bosk.executor.sklearn_interface.BaseBoskPipelineWrapper"]], "boskpipelineclassifier (class in bosk.executor.sklearn_interface)": [[61, "bosk.executor.sklearn_interface.BoskPipelineClassifier"]], "boskpipelineregressor (class in bosk.executor.sklearn_interface)": [[61, "bosk.executor.sklearn_interface.BoskPipelineRegressor"]], "boskpipelinetransformer (class in bosk.executor.sklearn_interface)": [[61, "bosk.executor.sklearn_interface.BoskPipelineTransformer"]], "__map_vars() (bosk.executor.sklearn_interface.baseboskpipelinewrapper method)": [[61, "bosk.executor.sklearn_interface.BaseBoskPipelineWrapper.__map_vars"]], "_classifier_init() (bosk.executor.sklearn_interface.boskpipelineclassifier method)": [[61, "bosk.executor.sklearn_interface.BoskPipelineClassifier._classifier_init"]], "_extract() (bosk.executor.sklearn_interface.baseboskpipelinewrapper method)": [[61, "bosk.executor.sklearn_interface.BaseBoskPipelineWrapper._extract"]], "_predict_all() (bosk.executor.sklearn_interface.baseboskpipelinewrapper method)": [[61, "bosk.executor.sklearn_interface.BaseBoskPipelineWrapper._predict_all"]], "_prepare_executors() (bosk.executor.sklearn_interface.baseboskpipelinewrapper method)": [[61, "bosk.executor.sklearn_interface.BaseBoskPipelineWrapper._prepare_executors"]], "bosk.executor.sklearn_interface": [[61, "module-bosk.executor.sklearn_interface"]], "fit() (bosk.executor.sklearn_interface.baseboskpipelinewrapper method)": [[61, "bosk.executor.sklearn_interface.BaseBoskPipelineWrapper.fit"]], "fit() (bosk.executor.sklearn_interface.boskpipelineclassifier method)": [[61, "bosk.executor.sklearn_interface.BoskPipelineClassifier.fit"]], "fit_transform() (bosk.executor.sklearn_interface.boskpipelinetransformer method)": [[61, "bosk.executor.sklearn_interface.BoskPipelineTransformer.fit_transform"]], "predict() (bosk.executor.sklearn_interface.boskpipelineclassifier method)": [[61, "bosk.executor.sklearn_interface.BoskPipelineClassifier.predict"]], "predict() (bosk.executor.sklearn_interface.boskpipelineregressor method)": [[61, "bosk.executor.sklearn_interface.BoskPipelineRegressor.predict"]], "predict_proba() (bosk.executor.sklearn_interface.boskpipelineclassifier method)": [[61, "bosk.executor.sklearn_interface.BoskPipelineClassifier.predict_proba"]], "transform() (bosk.executor.sklearn_interface.boskpipelinetransformer method)": [[61, "bosk.executor.sklearn_interface.BoskPipelineTransformer.transform"]], "timerblockexecutor (class in bosk.executor.timer)": [[62, "bosk.executor.timer.TimerBlockExecutor"]], "block_time (bosk.executor.timer.timerblockexecutor attribute)": [[62, "bosk.executor.timer.TimerBlockExecutor.block_time"]], "blocks_time (bosk.executor.timer.timerblockexecutor property)": [[62, "bosk.executor.timer.TimerBlockExecutor.blocks_time"]], "bosk.executor.timer": [[62, "module-bosk.executor.timer"]], "execute_block() (bosk.executor.timer.timerblockexecutor method)": [[62, "bosk.executor.timer.TimerBlockExecutor.execute_block"]], "topologicalexecutor (class in bosk.executor.topological)": [[63, "bosk.executor.topological.TopologicalExecutor"]], "_conn_dict (bosk.executor.topological.topologicalexecutor attribute)": [[63, "bosk.executor.topological.TopologicalExecutor._conn_dict"], [63, "id0"]], "_dfs() (bosk.executor.topological.topologicalexecutor method)": [[63, "bosk.executor.topological.TopologicalExecutor._dfs"]], "_get_backward_aj_list() (bosk.executor.topological.topologicalexecutor method)": [[63, "bosk.executor.topological.TopologicalExecutor._get_backward_aj_list"]], "_get_forward_aj_list() (bosk.executor.topological.topologicalexecutor method)": [[63, "bosk.executor.topological.TopologicalExecutor._get_forward_aj_list"]], "_topological_sort() (bosk.executor.topological.topologicalexecutor method)": [[63, "bosk.executor.topological.TopologicalExecutor._topological_sort"]], "bosk.executor.topological": [[63, "module-bosk.executor.topological"]], "execute() (bosk.executor.topological.topologicalexecutor method)": [[63, "bosk.executor.topological.TopologicalExecutor.execute"]], "bosk.executor.utility": [[64, "module-bosk.executor.utility"]], "get_connection_map() (in module bosk.executor.utility)": [[64, "bosk.executor.utility.get_connection_map"]], "basedata (class in bosk)": [[65, "bosk.BaseData"]], "baseslot (class in bosk)": [[65, "bosk.BaseSlot"]], "cpudata (class in bosk)": [[65, "bosk.CPUData"]], "fit (bosk.stage attribute)": [[65, "bosk.Stage.FIT"]], "gpudata (class in bosk)": [[65, "bosk.GPUData"]], "stage (class in bosk)": [[65, "bosk.Stage"]], "stages (class in bosk)": [[65, "bosk.Stages"]], "transform (bosk.stage attribute)": [[65, "bosk.Stage.TRANSFORM"]], "__hash__() (bosk.baseslot method)": [[65, "bosk.BaseSlot.__hash__"]], "__repr__() (bosk.basedata method)": [[65, "bosk.BaseData.__repr__"]], "__repr__() (bosk.baseslot method)": [[65, "bosk.BaseSlot.__repr__"]], "bosk": [[65, "module-bosk"]], "data (bosk.basedata attribute)": [[65, "bosk.BaseData.data"]], "data (bosk.cpudata attribute)": [[65, "bosk.CPUData.data"]], "data (bosk.gpudata attribute)": [[65, "bosk.GPUData.data"]], "debug_info (bosk.baseslot attribute)": [[65, "bosk.BaseSlot.debug_info"], [65, "id0"]], "fit (bosk.stages attribute)": [[65, "bosk.Stages.fit"], [65, "id1"]], "get_rand_int() (in module bosk)": [[65, "bosk.get_rand_int"]], "get_random_generator() (in module bosk)": [[65, "bosk.get_random_generator"]], "meta (bosk.baseslot attribute)": [[65, "bosk.BaseSlot.meta"]], "name (bosk.baseslot attribute)": [[65, "bosk.BaseSlot.name"]], "parent_block (bosk.baseslot attribute)": [[65, "bosk.BaseSlot.parent_block"]], "stages (bosk.baseslot attribute)": [[65, "bosk.BaseSlot.stages"]], "timer_wrap() (in module bosk)": [[65, "bosk.timer_wrap"]], "to_cpu() (bosk.basedata method)": [[65, "bosk.BaseData.to_cpu"]], "to_cpu() (bosk.gpudata method)": [[65, "bosk.GPUData.to_cpu"]], "to_gpu() (bosk.basedata method)": [[65, "bosk.BaseData.to_gpu"]], "transform (bosk.stages attribute)": [[65, "bosk.Stages.transform"], [65, "id2"]], "transform_on_fit (bosk.stages attribute)": [[65, "bosk.Stages.transform_on_fit"], [65, "id3"]], "basepainter (class in bosk.painter.base)": [[66, "bosk.painter.base.BasePainter"]], "available_formats (bosk.painter.base.basepainter property)": [[66, "bosk.painter.base.BasePainter.available_formats"]], "bosk.painter.base": [[66, "module-bosk.painter.base"]], "from_executor() (bosk.painter.base.basepainter method)": [[66, "bosk.painter.base.BasePainter.from_executor"]], "from_pipeline() (bosk.painter.base.basepainter method)": [[66, "bosk.painter.base.BasePainter.from_pipeline"]], "render() (bosk.painter.base.basepainter method)": [[66, "bosk.painter.base.BasePainter.render"]], "graphvizpainter (class in bosk.painter.graphviz)": [[67, "bosk.painter.graphviz.GraphvizPainter"]], "_add_edge() (bosk.painter.graphviz.graphvizpainter method)": [[67, "bosk.painter.graphviz.GraphvizPainter._add_edge"]], "_add_input() (bosk.painter.graphviz.graphvizpainter method)": [[67, "bosk.painter.graphviz.GraphvizPainter._add_input"]], "_add_node() (bosk.painter.graphviz.graphvizpainter method)": [[67, "bosk.painter.graphviz.GraphvizPainter._add_node"]], "_add_output() (bosk.painter.graphviz.graphvizpainter method)": [[67, "bosk.painter.graphviz.GraphvizPainter._add_output"]], "available_formats() (bosk.painter.graphviz.graphvizpainter method)": [[67, "bosk.painter.graphviz.GraphvizPainter.available_formats"]], "bosk.painter.graphviz": [[67, "module-bosk.painter.graphviz"]], "dpi (bosk.painter.graphviz.graphvizpainter attribute)": [[67, "bosk.painter.graphviz.GraphvizPainter.dpi"]], "dpi (bosk.painter.graphviz.graphvizpainter property)": [[67, "id2"]], "from_executor() (bosk.painter.graphviz.graphvizpainter method)": [[67, "bosk.painter.graphviz.GraphvizPainter.from_executor"]], "from_pipeline() (bosk.painter.graphviz.graphvizpainter method)": [[67, "bosk.painter.graphviz.GraphvizPainter.from_pipeline"]], "levels_sep (bosk.painter.graphviz.graphvizpainter attribute)": [[67, "bosk.painter.graphviz.GraphvizPainter.levels_sep"]], "levels_sep (bosk.painter.graphviz.graphvizpainter property)": [[67, "id1"]], "rankdir (bosk.painter.graphviz.graphvizpainter attribute)": [[67, "bosk.painter.graphviz.GraphvizPainter.rankdir"]], "rankdir (bosk.painter.graphviz.graphvizpainter property)": [[67, "id0"]], "render() (bosk.painter.graphviz.graphvizpainter method)": [[67, "bosk.painter.graphviz.GraphvizPainter.render"]], "basepainter (class in bosk.painter)": [[68, "bosk.painter.BasePainter"]], "graphvizpainter (class in bosk.painter)": [[68, "bosk.painter.GraphvizPainter"]], "topologicalpainter (class in bosk.painter)": [[68, "bosk.painter.TopologicalPainter"]], "_add_edge() (bosk.painter.graphvizpainter method)": [[68, "bosk.painter.GraphvizPainter._add_edge"]], "_add_input() (bosk.painter.graphvizpainter method)": [[68, "bosk.painter.GraphvizPainter._add_input"]], "_add_node() (bosk.painter.graphvizpainter method)": [[68, "bosk.painter.GraphvizPainter._add_node"]], "_add_output() (bosk.painter.graphvizpainter method)": [[68, "bosk.painter.GraphvizPainter._add_output"]], "available_formats (bosk.painter.basepainter property)": [[68, "bosk.painter.BasePainter.available_formats"]], "available_formats() (bosk.painter.graphvizpainter method)": [[68, "bosk.painter.GraphvizPainter.available_formats"]], "bosk.painter": [[68, "module-bosk.painter"]], "dpi (bosk.painter.graphvizpainter attribute)": [[68, "bosk.painter.GraphvizPainter.dpi"]], "dpi (bosk.painter.graphvizpainter property)": [[68, "id2"]], "dpi (bosk.painter.topologicalpainter attribute)": [[68, "bosk.painter.TopologicalPainter.dpi"]], "from_executor() (bosk.painter.basepainter method)": [[68, "bosk.painter.BasePainter.from_executor"]], "from_executor() (bosk.painter.graphvizpainter method)": [[68, "bosk.painter.GraphvizPainter.from_executor"]], "from_executor() (bosk.painter.topologicalpainter method)": [[68, "bosk.painter.TopologicalPainter.from_executor"]], "from_pipeline() (bosk.painter.basepainter method)": [[68, "bosk.painter.BasePainter.from_pipeline"]], "from_pipeline() (bosk.painter.graphvizpainter method)": [[68, "bosk.painter.GraphvizPainter.from_pipeline"]], "levels_sep (bosk.painter.graphvizpainter attribute)": [[68, "bosk.painter.GraphvizPainter.levels_sep"]], "levels_sep (bosk.painter.graphvizpainter property)": [[68, "id1"]], "levels_sep (bosk.painter.topologicalpainter attribute)": [[68, "bosk.painter.TopologicalPainter.levels_sep"]], "rankdir (bosk.painter.graphvizpainter attribute)": [[68, "bosk.painter.GraphvizPainter.rankdir"]], "rankdir (bosk.painter.graphvizpainter property)": [[68, "id0"]], "rankdir (bosk.painter.topologicalpainter attribute)": [[68, "bosk.painter.TopologicalPainter.rankdir"]], "render() (bosk.painter.basepainter method)": [[68, "bosk.painter.BasePainter.render"]], "render() (bosk.painter.graphvizpainter method)": [[68, "bosk.painter.GraphvizPainter.render"]], "topologicalpainter (class in bosk.painter.topological)": [[69, "bosk.painter.topological.TopologicalPainter"]], "bosk.painter.topological": [[69, "module-bosk.painter.topological"]], "dpi (bosk.painter.topological.topologicalpainter attribute)": [[69, "bosk.painter.topological.TopologicalPainter.dpi"]], "from_executor() (bosk.painter.topological.topologicalpainter method)": [[69, "bosk.painter.topological.TopologicalPainter.from_executor"]], "levels_sep (bosk.painter.topological.topologicalpainter attribute)": [[69, "bosk.painter.topological.TopologicalPainter.levels_sep"]], "rankdir (bosk.painter.topological.topologicalpainter attribute)": [[69, "bosk.painter.topological.TopologicalPainter.rankdir"]], "basepipeline (class in bosk.pipeline.base)": [[70, "bosk.pipeline.base.BasePipeline"]], "accept() (bosk.pipeline.base.basepipeline method)": [[70, "bosk.pipeline.base.BasePipeline.accept"]], "bosk.pipeline.base": [[70, "module-bosk.pipeline.base"]], "connections (bosk.pipeline.base.basepipeline attribute)": [[70, "bosk.pipeline.base.BasePipeline.connections"], [70, "id1"]], "inputs (bosk.pipeline.base.basepipeline attribute)": [[70, "bosk.pipeline.base.BasePipeline.inputs"], [70, "id2"]], "nodes (bosk.pipeline.base.basepipeline attribute)": [[70, "bosk.pipeline.base.BasePipeline.nodes"], [70, "id0"]], "outputs (bosk.pipeline.base.basepipeline attribute)": [[70, "bosk.pipeline.base.BasePipeline.outputs"], [70, "id3"]], "set_random_state() (bosk.pipeline.base.basepipeline method)": [[70, "bosk.pipeline.base.BasePipeline.set_random_state"]], "basepipelinebuilder (class in bosk.pipeline.builder.base)": [[71, "bosk.pipeline.builder.base.BasePipelineBuilder"]], "bosk.pipeline.builder.base": [[71, "module-bosk.pipeline.builder.base"]], "build() (bosk.pipeline.builder.base.basepipelinebuilder method)": [[71, "bosk.pipeline.builder.base.BasePipelineBuilder.build"]], "functionalpipelinebuilder (class in bosk.pipeline.builder.functional)": [[72, "bosk.pipeline.builder.functional.FunctionalPipelineBuilder"]], "slotorblockwrapper (in module bosk.pipeline.builder.functional)": [[72, "bosk.pipeline.builder.functional.SlotOrBlockWrapper"]], "__getattr__() (bosk.pipeline.builder.functional.functionalpipelinebuilder method)": [[72, "bosk.pipeline.builder.functional.FunctionalPipelineBuilder.__getattr__"]], "_get_block_init() (bosk.pipeline.builder.functional.functionalpipelinebuilder method)": [[72, "bosk.pipeline.builder.functional.FunctionalPipelineBuilder._get_block_init"]], "_make_placeholder_fn() (bosk.pipeline.builder.functional.functionalpipelinebuilder method)": [[72, "bosk.pipeline.builder.functional.FunctionalPipelineBuilder._make_placeholder_fn"]], "_register_block() (bosk.pipeline.builder.functional.functionalpipelinebuilder method)": [[72, "bosk.pipeline.builder.functional.FunctionalPipelineBuilder._register_block"]], "bosk.pipeline.builder.functional": [[72, "module-bosk.pipeline.builder.functional"]], "build() (bosk.pipeline.builder.functional.functionalpipelinebuilder method)": [[72, "bosk.pipeline.builder.functional.FunctionalPipelineBuilder.build"]], "new() (bosk.pipeline.builder.functional.functionalpipelinebuilder method)": [[72, "bosk.pipeline.builder.functional.FunctionalPipelineBuilder.new"]], "wrap() (bosk.pipeline.builder.functional.functionalpipelinebuilder method)": [[72, "bosk.pipeline.builder.functional.FunctionalPipelineBuilder.wrap"]], "basepipelinebuilder (class in bosk.pipeline.builder)": [[73, "bosk.pipeline.builder.BasePipelineBuilder"]], "functionalblockwrapper (class in bosk.pipeline.builder)": [[73, "bosk.pipeline.builder.FunctionalBlockWrapper"]], "functionalpipelinebuilder (class in bosk.pipeline.builder)": [[73, "bosk.pipeline.builder.FunctionalPipelineBuilder"]], "__getattr__() (bosk.pipeline.builder.functionalpipelinebuilder method)": [[73, "bosk.pipeline.builder.FunctionalPipelineBuilder.__getattr__"]], "__getitem__() (bosk.pipeline.builder.functionalblockwrapper method)": [[73, "bosk.pipeline.builder.FunctionalBlockWrapper.__getitem__"]], "_get_block_init() (bosk.pipeline.builder.functionalpipelinebuilder method)": [[73, "bosk.pipeline.builder.FunctionalPipelineBuilder._get_block_init"]], "_make_placeholder_fn() (bosk.pipeline.builder.functionalpipelinebuilder method)": [[73, "bosk.pipeline.builder.FunctionalPipelineBuilder._make_placeholder_fn"]], "_register_block() (bosk.pipeline.builder.functionalpipelinebuilder method)": [[73, "bosk.pipeline.builder.FunctionalPipelineBuilder._register_block"]], "bosk.pipeline.builder": [[73, "module-bosk.pipeline.builder"]], "build() (bosk.pipeline.builder.basepipelinebuilder method)": [[73, "bosk.pipeline.builder.BasePipelineBuilder.build"]], "build() (bosk.pipeline.builder.functionalpipelinebuilder method)": [[73, "bosk.pipeline.builder.FunctionalPipelineBuilder.build"]], "get_input_slot() (bosk.pipeline.builder.functionalblockwrapper method)": [[73, "bosk.pipeline.builder.FunctionalBlockWrapper.get_input_slot"]], "get_output_slot() (bosk.pipeline.builder.functionalblockwrapper method)": [[73, "bosk.pipeline.builder.FunctionalBlockWrapper.get_output_slot"]], "new() (bosk.pipeline.builder.functionalpipelinebuilder method)": [[73, "bosk.pipeline.builder.FunctionalPipelineBuilder.new"]], "wrap() (bosk.pipeline.builder.functionalpipelinebuilder method)": [[73, "bosk.pipeline.builder.FunctionalPipelineBuilder.wrap"]], "connection (class in bosk.pipeline.connection)": [[74, "bosk.pipeline.connection.Connection"]], "accept() (bosk.pipeline.connection.connection method)": [[74, "bosk.pipeline.connection.Connection.accept"]], "bosk.pipeline.connection": [[74, "module-bosk.pipeline.connection"]], "dst (bosk.pipeline.connection.connection attribute)": [[74, "bosk.pipeline.connection.Connection.dst"]], "src (bosk.pipeline.connection.connection attribute)": [[74, "bosk.pipeline.connection.Connection.src"]], "daskconverter (class in bosk.pipeline.converter.dask)": [[75, "bosk.pipeline.converter.dask.DaskConverter"]], "daskconverter.visitor (class in bosk.pipeline.converter.dask)": [[75, "bosk.pipeline.converter.dask.DaskConverter.Visitor"]], "daskoperatorset (class in bosk.pipeline.converter.dask)": [[75, "bosk.pipeline.converter.dask.DaskOperatorSet"]], "fitdaskoperatorset (class in bosk.pipeline.converter.dask)": [[75, "bosk.pipeline.converter.dask.FitDaskOperatorSet"]], "transformdaskoperatorset (class in bosk.pipeline.converter.dask)": [[75, "bosk.pipeline.converter.dask.TransformDaskOperatorSet"]], "_() (bosk.pipeline.converter.dask.daskconverter.visitor method)": [[75, "bosk.pipeline.converter.dask.DaskConverter.Visitor._"], [75, "id0"], [75, "id1"]], "__call__() (bosk.pipeline.converter.dask.daskconverter method)": [[75, "bosk.pipeline.converter.dask.DaskConverter.__call__"]], "_mangle_block() (bosk.pipeline.converter.dask.daskconverter method)": [[75, "bosk.pipeline.converter.dask.DaskConverter._mangle_block"]], "_mangle_input_slot() (bosk.pipeline.converter.dask.daskconverter method)": [[75, "bosk.pipeline.converter.dask.DaskConverter._mangle_input_slot"]], "_mangle_output_slot() (bosk.pipeline.converter.dask.daskconverter method)": [[75, "bosk.pipeline.converter.dask.DaskConverter._mangle_output_slot"]], "bosk.pipeline.converter.dask": [[75, "module-bosk.pipeline.converter.dask"]], "bypass() (bosk.pipeline.converter.dask.daskoperatorset static method)": [[75, "bosk.pipeline.converter.dask.DaskOperatorSet.bypass"]], "bypass() (bosk.pipeline.converter.dask.fitdaskoperatorset static method)": [[75, "bosk.pipeline.converter.dask.FitDaskOperatorSet.bypass"]], "bypass() (bosk.pipeline.converter.dask.transformdaskoperatorset static method)": [[75, "bosk.pipeline.converter.dask.TransformDaskOperatorSet.bypass"]], "compute() (bosk.pipeline.converter.dask.daskoperatorset static method)": [[75, "bosk.pipeline.converter.dask.DaskOperatorSet.compute"]], "compute() (bosk.pipeline.converter.dask.fitdaskoperatorset static method)": [[75, "bosk.pipeline.converter.dask.FitDaskOperatorSet.compute"]], "compute() (bosk.pipeline.converter.dask.transformdaskoperatorset static method)": [[75, "bosk.pipeline.converter.dask.TransformDaskOperatorSet.compute"]], "extract() (bosk.pipeline.converter.dask.daskoperatorset static method)": [[75, "bosk.pipeline.converter.dask.DaskOperatorSet.extract"]], "extract() (bosk.pipeline.converter.dask.fitdaskoperatorset static method)": [[75, "bosk.pipeline.converter.dask.FitDaskOperatorSet.extract"]], "extract() (bosk.pipeline.converter.dask.transformdaskoperatorset static method)": [[75, "bosk.pipeline.converter.dask.TransformDaskOperatorSet.extract"]], "visit() (bosk.pipeline.converter.dask.daskconverter.visitor method)": [[75, "bosk.pipeline.converter.dask.DaskConverter.Visitor.visit"]], "daskconverter (class in bosk.pipeline.converter)": [[76, "bosk.pipeline.converter.DaskConverter"]], "daskconverter.visitor (class in bosk.pipeline.converter)": [[76, "bosk.pipeline.converter.DaskConverter.Visitor"]], "networkxconverter (class in bosk.pipeline.converter)": [[76, "bosk.pipeline.converter.NetworkXConverter"]], "networkxconverter.visitor (class in bosk.pipeline.converter)": [[76, "bosk.pipeline.converter.NetworkXConverter.Visitor"]], "_() (bosk.pipeline.converter.daskconverter.visitor method)": [[76, "bosk.pipeline.converter.DaskConverter.Visitor._"], [76, "id0"], [76, "id1"]], "_() (bosk.pipeline.converter.networkxconverter.visitor method)": [[76, "bosk.pipeline.converter.NetworkXConverter.Visitor._"], [76, "id2"]], "__call__() (bosk.pipeline.converter.daskconverter method)": [[76, "bosk.pipeline.converter.DaskConverter.__call__"]], "__call__() (bosk.pipeline.converter.networkxconverter method)": [[76, "bosk.pipeline.converter.NetworkXConverter.__call__"]], "_mangle_block() (bosk.pipeline.converter.daskconverter method)": [[76, "bosk.pipeline.converter.DaskConverter._mangle_block"]], "_mangle_input_slot() (bosk.pipeline.converter.daskconverter method)": [[76, "bosk.pipeline.converter.DaskConverter._mangle_input_slot"]], "_mangle_output_slot() (bosk.pipeline.converter.daskconverter method)": [[76, "bosk.pipeline.converter.DaskConverter._mangle_output_slot"]], "bosk.pipeline.converter": [[76, "module-bosk.pipeline.converter"]], "visit() (bosk.pipeline.converter.daskconverter.visitor method)": [[76, "bosk.pipeline.converter.DaskConverter.Visitor.visit"]], "visit() (bosk.pipeline.converter.networkxconverter.visitor method)": [[76, "bosk.pipeline.converter.NetworkXConverter.Visitor.visit"]], "networkxconverter (class in bosk.pipeline.converter.nx)": [[77, "bosk.pipeline.converter.nx.NetworkXConverter"]], "networkxconverter.visitor (class in bosk.pipeline.converter.nx)": [[77, "bosk.pipeline.converter.nx.NetworkXConverter.Visitor"]], "_() (bosk.pipeline.converter.nx.networkxconverter.visitor method)": [[77, "bosk.pipeline.converter.nx.NetworkXConverter.Visitor._"], [77, "id0"]], "__call__() (bosk.pipeline.converter.nx.networkxconverter method)": [[77, "bosk.pipeline.converter.nx.NetworkXConverter.__call__"]], "bosk.pipeline.converter.nx": [[77, "module-bosk.pipeline.converter.nx"]], "visit() (bosk.pipeline.converter.nx.networkxconverter.visitor method)": [[77, "bosk.pipeline.converter.nx.NetworkXConverter.Visitor.visit"]], "basedynamicpipeline (class in bosk.pipeline.dynamic)": [[78, "bosk.pipeline.dynamic.BaseDynamicPipeline"]], "bosk.pipeline.dynamic": [[78, "module-bosk.pipeline.dynamic"]], "extend() (bosk.pipeline.dynamic.basedynamicpipeline method)": [[78, "bosk.pipeline.dynamic.BaseDynamicPipeline.extend"]], "basedynamicpipeline (class in bosk.pipeline)": [[79, "bosk.pipeline.BaseDynamicPipeline"]], "basepipeline (class in bosk.pipeline)": [[79, "bosk.pipeline.BasePipeline"]], "connection (class in bosk.pipeline)": [[79, "bosk.pipeline.Connection"]], "accept() (bosk.pipeline.basepipeline method)": [[79, "bosk.pipeline.BasePipeline.accept"]], "accept() (bosk.pipeline.connection method)": [[79, "bosk.pipeline.Connection.accept"]], "bosk.pipeline": [[79, "module-bosk.pipeline"]], "connections (bosk.pipeline.basepipeline attribute)": [[79, "bosk.pipeline.BasePipeline.connections"], [79, "id1"]], "dst (bosk.pipeline.connection attribute)": [[79, "bosk.pipeline.Connection.dst"]], "extend() (bosk.pipeline.basedynamicpipeline method)": [[79, "bosk.pipeline.BaseDynamicPipeline.extend"]], "inputs (bosk.pipeline.basepipeline attribute)": [[79, "bosk.pipeline.BasePipeline.inputs"], [79, "id2"]], "nodes (bosk.pipeline.basepipeline attribute)": [[79, "bosk.pipeline.BasePipeline.nodes"], [79, "id0"]], "outputs (bosk.pipeline.basepipeline attribute)": [[79, "bosk.pipeline.BasePipeline.outputs"], [79, "id3"]], "set_random_state() (bosk.pipeline.basepipeline method)": [[79, "bosk.pipeline.BasePipeline.set_random_state"]], "src (bosk.pipeline.connection attribute)": [[79, "bosk.pipeline.Connection.src"]], "baseblockserializer (class in bosk.pipeline.serializer.base)": [[80, "bosk.pipeline.serializer.base.BaseBlockSerializer"]], "basepipelineserializer (class in bosk.pipeline.serializer.base)": [[80, "bosk.pipeline.serializer.base.BasePipelineSerializer"]], "bosk.pipeline.serializer.base": [[80, "module-bosk.pipeline.serializer.base"]], "dump() (bosk.pipeline.serializer.base.baseblockserializer method)": [[80, "bosk.pipeline.serializer.base.BaseBlockSerializer.dump"]], "dump() (bosk.pipeline.serializer.base.basepipelineserializer method)": [[80, "bosk.pipeline.serializer.base.BasePipelineSerializer.dump"]], "load() (bosk.pipeline.serializer.base.baseblockserializer method)": [[80, "bosk.pipeline.serializer.base.BaseBlockSerializer.load"]], "load() (bosk.pipeline.serializer.base.basepipelineserializer method)": [[80, "bosk.pipeline.serializer.base.BasePipelineSerializer.load"]], "baseblockserializer (class in bosk.pipeline.serializer)": [[81, "bosk.pipeline.serializer.BaseBlockSerializer"]], "basepipelineserializer (class in bosk.pipeline.serializer)": [[81, "bosk.pipeline.serializer.BasePipelineSerializer"]], "joblibblockserializer (class in bosk.pipeline.serializer)": [[81, "bosk.pipeline.serializer.JoblibBlockSerializer"]], "joblibpipelineserializer (class in bosk.pipeline.serializer)": [[81, "bosk.pipeline.serializer.JoblibPipelineSerializer"]], "skopsblockserializer (class in bosk.pipeline.serializer)": [[81, "bosk.pipeline.serializer.SkopsBlockSerializer"]], "zippipelineserializer (class in bosk.pipeline.serializer)": [[81, "bosk.pipeline.serializer.ZipPipelineSerializer"]], "_dump_all_blocks() (bosk.pipeline.serializer.zippipelineserializer method)": [[81, "bosk.pipeline.serializer.ZipPipelineSerializer._dump_all_blocks"]], "_dump_block() (bosk.pipeline.serializer.zippipelineserializer method)": [[81, "bosk.pipeline.serializer.ZipPipelineSerializer._dump_block"]], "_load_all_blocks() (bosk.pipeline.serializer.zippipelineserializer method)": [[81, "bosk.pipeline.serializer.ZipPipelineSerializer._load_all_blocks"]], "bosk.pipeline.serializer": [[81, "module-bosk.pipeline.serializer"]], "dump() (bosk.pipeline.serializer.baseblockserializer method)": [[81, "bosk.pipeline.serializer.BaseBlockSerializer.dump"]], "dump() (bosk.pipeline.serializer.basepipelineserializer method)": [[81, "bosk.pipeline.serializer.BasePipelineSerializer.dump"]], "dump() (bosk.pipeline.serializer.joblibblockserializer method)": [[81, "bosk.pipeline.serializer.JoblibBlockSerializer.dump"]], "dump() (bosk.pipeline.serializer.joblibpipelineserializer method)": [[81, "bosk.pipeline.serializer.JoblibPipelineSerializer.dump"]], "dump() (bosk.pipeline.serializer.skopsblockserializer method)": [[81, "bosk.pipeline.serializer.SkopsBlockSerializer.dump"]], "dump() (bosk.pipeline.serializer.zippipelineserializer method)": [[81, "bosk.pipeline.serializer.ZipPipelineSerializer.dump"]], "load() (bosk.pipeline.serializer.baseblockserializer method)": [[81, "bosk.pipeline.serializer.BaseBlockSerializer.load"]], "load() (bosk.pipeline.serializer.basepipelineserializer method)": [[81, "bosk.pipeline.serializer.BasePipelineSerializer.load"]], "load() (bosk.pipeline.serializer.joblibblockserializer method)": [[81, "bosk.pipeline.serializer.JoblibBlockSerializer.load"]], "load() (bosk.pipeline.serializer.joblibpipelineserializer method)": [[81, "bosk.pipeline.serializer.JoblibPipelineSerializer.load"]], "load() (bosk.pipeline.serializer.skopsblockserializer method)": [[81, "bosk.pipeline.serializer.SkopsBlockSerializer.load"]], "load() (bosk.pipeline.serializer.zippipelineserializer method)": [[81, "bosk.pipeline.serializer.ZipPipelineSerializer.load"]], "joblibblockserializer (class in bosk.pipeline.serializer.joblib)": [[82, "bosk.pipeline.serializer.joblib.JoblibBlockSerializer"]], "joblibpipelineserializer (class in bosk.pipeline.serializer.joblib)": [[82, "bosk.pipeline.serializer.joblib.JoblibPipelineSerializer"]], "bosk.pipeline.serializer.joblib": [[82, "module-bosk.pipeline.serializer.joblib"]], "dump() (bosk.pipeline.serializer.joblib.joblibblockserializer method)": [[82, "bosk.pipeline.serializer.joblib.JoblibBlockSerializer.dump"]], "dump() (bosk.pipeline.serializer.joblib.joblibpipelineserializer method)": [[82, "bosk.pipeline.serializer.joblib.JoblibPipelineSerializer.dump"]], "load() (bosk.pipeline.serializer.joblib.joblibblockserializer method)": [[82, "bosk.pipeline.serializer.joblib.JoblibBlockSerializer.load"]], "load() (bosk.pipeline.serializer.joblib.joblibpipelineserializer method)": [[82, "bosk.pipeline.serializer.joblib.JoblibPipelineSerializer.load"]], "bosk.pipeline.serializer.onnx": [[83, "module-bosk.pipeline.serializer.onnx"]], "skopsblockserializer (class in bosk.pipeline.serializer.skops)": [[84, "bosk.pipeline.serializer.skops.SkopsBlockSerializer"]], "bosk.pipeline.serializer.skops": [[84, "module-bosk.pipeline.serializer.skops"]], "dump() (bosk.pipeline.serializer.skops.skopsblockserializer method)": [[84, "bosk.pipeline.serializer.skops.SkopsBlockSerializer.dump"]], "load() (bosk.pipeline.serializer.skops.skopsblockserializer method)": [[84, "bosk.pipeline.serializer.skops.SkopsBlockSerializer.load"]], "connectionserializer (class in bosk.pipeline.serializer.zip)": [[85, "bosk.pipeline.serializer.zip.ConnectionSerializer"]], "structure_filename (in module bosk.pipeline.serializer.zip)": [[85, "bosk.pipeline.serializer.zip.STRUCTURE_FILENAME"]], "slotserializer (class in bosk.pipeline.serializer.zip)": [[85, "bosk.pipeline.serializer.zip.SlotSerializer"]], "zippipelineserializer (class in bosk.pipeline.serializer.zip)": [[85, "bosk.pipeline.serializer.zip.ZipPipelineSerializer"]], "_dump_all_blocks() (bosk.pipeline.serializer.zip.zippipelineserializer method)": [[85, "bosk.pipeline.serializer.zip.ZipPipelineSerializer._dump_all_blocks"]], "_dump_block() (bosk.pipeline.serializer.zip.zippipelineserializer method)": [[85, "bosk.pipeline.serializer.zip.ZipPipelineSerializer._dump_block"]], "_load_all_blocks() (bosk.pipeline.serializer.zip.zippipelineserializer method)": [[85, "bosk.pipeline.serializer.zip.ZipPipelineSerializer._load_all_blocks"]], "bosk.pipeline.serializer.zip": [[85, "module-bosk.pipeline.serializer.zip"]], "dump() (bosk.pipeline.serializer.zip.zippipelineserializer method)": [[85, "bosk.pipeline.serializer.zip.ZipPipelineSerializer.dump"]], "from_dict() (bosk.pipeline.serializer.zip.connectionserializer method)": [[85, "bosk.pipeline.serializer.zip.ConnectionSerializer.from_dict"]], "from_dict() (bosk.pipeline.serializer.zip.slotserializer method)": [[85, "bosk.pipeline.serializer.zip.SlotSerializer.from_dict"]], "input_from_dict() (bosk.pipeline.serializer.zip.slotserializer method)": [[85, "bosk.pipeline.serializer.zip.SlotSerializer.input_from_dict"]], "load() (bosk.pipeline.serializer.zip.zippipelineserializer method)": [[85, "bosk.pipeline.serializer.zip.ZipPipelineSerializer.load"]], "output_from_dict() (bosk.pipeline.serializer.zip.slotserializer method)": [[85, "bosk.pipeline.serializer.zip.SlotSerializer.output_from_dict"]], "to_dict() (bosk.pipeline.serializer.zip.connectionserializer method)": [[85, "bosk.pipeline.serializer.zip.ConnectionSerializer.to_dict"]], "to_dict() (bosk.pipeline.serializer.zip.slotserializer method)": [[85, "bosk.pipeline.serializer.zip.SlotSerializer.to_dict"]], "fit (bosk.stages.stage attribute)": [[86, "bosk.stages.Stage.FIT"]], "stage (class in bosk.stages)": [[86, "bosk.stages.Stage"]], "stages (class in bosk.stages)": [[86, "bosk.stages.Stages"]], "transform (bosk.stages.stage attribute)": [[86, "bosk.stages.Stage.TRANSFORM"]], "bosk.stages": [[86, "module-bosk.stages"]], "fit (bosk.stages.stages attribute)": [[86, "bosk.stages.Stages.fit"], [86, "id0"]], "transform (bosk.stages.stages attribute)": [[86, "bosk.stages.Stages.transform"], [86, "id1"]], "transform_on_fit (bosk.stages.stages attribute)": [[86, "bosk.stages.Stages.transform_on_fit"], [86, "id2"]], "rt (in module bosk.utility)": [[87, "bosk.utility.RT"]], "bosk.utility": [[87, "module-bosk.utility"]], "get_rand_int() (in module bosk.utility)": [[87, "bosk.utility.get_rand_int"]], "get_random_generator() (in module bosk.utility)": [[87, "bosk.utility.get_random_generator"]], "timer_wrap() (in module bosk.utility)": [[87, "bosk.utility.timer_wrap"]], "basevisitor (class in bosk.visitor.base)": [[88, "bosk.visitor.base.BaseVisitor"]], "bosk.visitor.base": [[88, "module-bosk.visitor.base"]], "visit() (bosk.visitor.base.basevisitor method)": [[88, "bosk.visitor.base.BaseVisitor.visit"]], "modificationaction (in module bosk.visitor.group)": [[89, "bosk.visitor.group.ModificationAction"]], "modifygroupvisitor (class in bosk.visitor.group)": [[89, "bosk.visitor.group.ModifyGroupVisitor"]], "_() (bosk.visitor.group.modifygroupvisitor method)": [[89, "bosk.visitor.group.ModifyGroupVisitor._"]], "bosk.visitor.group": [[89, "module-bosk.visitor.group"]], "visit() (bosk.visitor.group.modifygroupvisitor method)": [[89, "bosk.visitor.group.ModifyGroupVisitor.visit"]], "basevisitor (class in bosk.visitor)": [[90, "bosk.visitor.BaseVisitor"]], "bosk.visitor": [[90, "module-bosk.visitor"]], "visit() (bosk.visitor.basevisitor method)": [[90, "bosk.visitor.BaseVisitor.visit"]]}})