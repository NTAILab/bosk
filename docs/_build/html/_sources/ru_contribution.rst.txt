Как стать участником проекта
============================

Для того, чтобы принять участие в развитии проекта bosk,
можно сделать несколько вещей:

- Написать код для введения новой функциональности в фреймворк
  или описания существующей в примере.
- Предложить исправление бага или ошибки.
- Предложить улучшение документации проекта.
- Рассмотреть и дать оценку открытым pull request'ам в `GitHub`_.

Репозиторий bosk располагается в `GitHub`_,
и наша команда использует систему контроля версий `Git`_.
Предпочитаемый способ внесения изменений в bosk - это сделать fork основного
репозитория (ветки *main*), провести необходимые работы в своей копии репозитория
и предложить рассмотреть внесенные изменения с помощью выполнения pull request.

Установка окружения для разработки
----------------------------------

Мы рекомендуем Вам создать отдельное Python окружение 
с помощью  `venv`_ или `conda`_, после чего обратиться к нашему
:ref:`руководству по установке <dev_install>` и установить пакет bosk
в режиме разработчика.

Внесение изменений в код
------------------------

Для того, чтобы Ваш pull request одобрили, ваш код должен удовлетворять следующим
требованиям:

1. Все изменения, относящиеся к **одной функциональной единице**, должны принадлежать
  **одной ветке**. Каждая ветка должна быть самодостаточной с единственной новой
  введенной в фремворк функцией или исправлением единственной ошибки.
  Вы можете `создать новую ветку <https://git-scm.com/book/ru/v2/%D0%92%D0%B5%D1%82%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2-Git-%D0%9E%D1%81%D0%BD%D0%BE%D0%B2%D1%8B-%D0%B2%D0%B5%D1%82%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F-%D0%B8-%D1%81%D0%BB%D0%B8%D1%8F%D0%BD%D0%B8%D1%8F>`_,
  выполнив::
    
    git checkout -b new-feature-name

2. Весь код должен соответствовать стандартным требованиям к стилю кодирования на языке Python
  `PEP8 <https://peps.python.org/pep-0008/>`_. Дополнительно наша команда старается, чтобы код
  соответствовал `стилю кодирования google <https://google.github.io/styleguide/pyguide.html>`_.
  Чтобы проверять код на соответствие описанному стилю, мы используем `pylint`_.

3. Каждая функция, класс, метод и их атрибуты должны быть задокументированы
  с помощью инструмента «doc strings» языка Python. Мы использвуем
  стандарт написания `google <https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings>`_.

4. Предлагаемый код всегда должен сопровождаться юнит-тестами.
  Мы используем `pytest <https://docs.pytest.org/>`_ для тестирования bosk.
  Все тесты должны находиться в директории ``tests``. Вы можете выполнить все юнит-тесты
  для bosk, выполнив::

    pytest

5. Помните о том, что мы используем лицензию MIT для проекта bosk, и предлагаемый Вами код должен ей соответствовать.

Добавление Pull Request
-----------------------

Сделайте один или несколько коммитов в вашу ветку. Каждый коммит должен отвечать конкретным внесенным изменениям.
Сообщения коммитов далжны быть короткими и информативными. Когда Вы закончите работу с кодом,
`создайте pull request <https://docs.github.com/ru/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request>`_.

Сборка документации
-------------------

Документация проекта находится в папке ``docs``, и написана в формате reStructuredText.
HTML-файлы документации могут быть сгенерированы с помощью `Sphinx`_.
Перед сборкой документации убедитесь, что у вас установлены пакеты, перечисленные в ``docs/requirements.txt``.

.. note::

    Мы используем Jupyter блокноты для иллюстрации примеров. Для
    их правильного рендеринга необходимо вручную установить утилиту `Pandoc <https://pandoc.org/installing.html>`_.

Самый простой способ собрать документацию - это выполнить::

    cd docs
    make html

Сгенерированные файлы будут находиться в ``docs/_build/html``.

.. _conda: https://conda.io/miniconda.html
.. _venv: https://docs.python.org/3/library/venv.html
.. _Git: https://git-scm.com/
.. _GitHub: https://github.com/NTAILab/bosk
.. _Sphinx: https://www.sphinx-doc.org/
.. _pylint: https://pylint.org/
