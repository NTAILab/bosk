:py:mod:`bosk.executor.topological`
===================================

.. py:module:: bosk.executor.topological

.. autoapi-nested-parse::

   Topological executor.

   This file contains the optimizing executor that can check pipeline before computation start.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   bosk.executor.topological.TopologicalExecutor




.. py:class:: TopologicalExecutor(pipeline, stage, inputs = None, outputs = None, slot_handler = None, block_executor = None)

   Bases: :py:obj:`bosk.executor.base.BaseExecutor`

   Topological executor.

   The optimization algoritm computes only blocks which are connected with the inputs and which outputs are needed
   for the pipeline outputs calculation.

   .. attribute:: _conn_dict

      Pipeline connections, represented as a hash map, the keys are blocks' input slots,
      the values are output ones. Each input slot corresponds no more than one
      output slot, so this representation is correct. Also, the values can be input slots,
      just to connect input blocks to their inputs.

   :param pipeline: Sets :attr:`.BaseExecutor.__pipeline`.
   :param stage: Sets :attr:`.BaseExecutor.__stage`,
   :param inputs: Sets :attr:`.BaseExecutor.__inputs`.
   :param outputs: Sets :attr:`.BaseExecutor.__outputs`.
   :param slot_handler: Sets :attr:`.BaseExecutor.__slot_handler` with `_prepare_slot_handler` method.
   :param block_executor: Sets :attr:`.BaseExecutor.__block_executor` with `_prepare_block_executor` method.

   .. py:attribute:: _conn_dict
      :annotation: :Dict[bosk.block.base.BlockInputSlot, Union[bosk.block.base.BlockInputSlot, bosk.block.base.BlockOutputSlot]]

      

   .. py:method:: _dfs(aj_list, begin_nodes)

      Method that performs the deep first search algorithm in the computational graph.
      The search begins from the nodes `begin_nodes`. The algorithm is written using iterative scheme.

      :param aj_list: The graph adjacency list.
      :param begin_nodes: The graph nodes, which will be used as the search start.

      :returns: Set of the graph nodes, which were included in the traversal. Actually, the order is not saved.
                This method is only for internal use, so this behaviour is chosen for the optimization.


   .. py:method:: _topological_sort(aj_list, begin_nodes)

      Method that performs the topological sort of the computational graph.
      The algorithm begins its work from the nodes `begin_nodes`. The algorithm is written using recursive scheme.

      :param aj_list: The graph adjacency list.
      :param begin_nodes: The graph nodes, which will be used as the algorithm start.

      :returns: List of the graph nodes in topological order.


   .. py:method:: _get_backward_aj_list(feasible_set = None)

      The internal helper method for making backwards adjacency list
      (block to block, from the end to the start) of the pipeline.

      :param feasible_set: The set of the blocks, which will be used in the adjacency list.
                           Other blocks will not be included. If `None`, all blocks of the pipeline will be used.

      :returns: The backwards adjacency list containing blocks from the ``feasible set``.


   .. py:method:: _get_forward_aj_list(feasible_set = None)

      The internal helper method for making adjacency list (block to block) of the pipeline.

      :param feasible_set: The set of the blocks, which will be used in the adjacency list.
                           Other blocks will not be included. If `None`, all blocks of the pipeline will be used.

      :returns: The adjacency list containing blocks from the ``feasible set``.


   .. py:method:: execute(input_values)

      The main method for the processing of the computational graph.

      :param input_values: The dictionary, containing the pipeline's inputs names as keys
                           and coresponding to them :data:`Data` as values.

      :returns: The dictionary, containing the pipeline's outputs names as keys
                and coresponding to them :data:`Data` as values.

      :raises AssertionError: If there are some incompatibility between pipeline's inputs and user's ones.



