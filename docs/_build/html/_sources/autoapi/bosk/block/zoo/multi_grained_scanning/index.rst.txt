:py:mod:`bosk.block.zoo.multi_grained_scanning`
===============================================

.. py:module:: bosk.block.zoo.multi_grained_scanning

.. autoapi-nested-parse::

   Multi-grained scanning blocks.

   Multi-grained scanning applies underlying model to a sliding window:

   - At the fit stage the data with spatial dimensions is splitted into multiple patches (windows) and a new data set is generated by repeating a sample label for each window of each sample.
   - At the transform stage the model is applied to each window and results are concatenated along spatial dimensions.

   For example, convolution can be considered as a special case of
   multi-grained scanning with linear underlying model corresponding
   to the convolution kernel.

   There are two different types of multi-grained scanning blocks:

   1. N-dimensional Multi-Grained Scanning :py:class:`MultiGrainedScanningNDBlock`, as well as pooling :py:class:`PoolingBlock` follows the convention that an input data sample is of shape `(n_samples, n_channels, spatial_dim_1, ... spatial_dim_k)` and output data sample is of shape `(n_samples, n_out_channels, out_spatial_dim_1,... out_spatial_dim_k)`.
   2. In contrast, :py:class:`MultiGrainedScanning1DBlock` and :py:class:`MultiGrainedScanning2DBlock` are applied to standard data of shape `(n_samples, n_features)` and return raveled (flattened) result, i.e. of shape `(n_samples, n_out_features)`.

   The first type supports wider range of parameters, while the second type has simpler interface and do not require data reshaping before applying MGS block.



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   _convolution_helpers/index.rst
   _pooling_impl/index.rst
   base/index.rst
   base 2/index.rst
   mil/index.rst
   multi_grained_scanning_1d/index.rst
   multi_grained_scanning_2d/index.rst
   multi_grained_scanning_nd/index.rst
   pooling/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   bosk.block.zoo.multi_grained_scanning.MultiGrainedScanning1DBlock
   bosk.block.zoo.multi_grained_scanning.MultiGrainedScanning2DBlock
   bosk.block.zoo.multi_grained_scanning.MultiGrainedScanningNDBlock
   bosk.block.zoo.multi_grained_scanning.PoolingBlock




.. py:class:: MultiGrainedScanning1DBlock(models, window_size, stride, shape_sample = None)

   Bases: :py:obj:`bosk.block.zoo.multi_grained_scanning.base.MultiGrainedScanningBlock`

   1-dimensional Multi Grained Scanning Block.

   Main use case is to process data with one spatial dimension, like sequences.

   It takes `X` of shape `(n_samples, n_channels)`
   as an input and returns the tensor of shape `(n_samples, n_out_channels)`.

   :param models: Tuple of underlying models.
   :param window_size: Size of the sliding window.
   :param stride: Stride of the sliding window.
   :param shape_sample: Input data spatial dimensions (shape).

   Input slots
   -----------

   Fit inputs
   ~~~~~~~~~~

       - X: Data tensor of shape `(n_samples, n_channels)`.
       - y: Target variable values of shape `(n_samples, [n_outputs])`.

   Transform inputs
   ~~~~~~~~~~~~~~~~

       - X: Data tensor of shape `(n_samples, n_channels)`.

   Output slots
   ------------

       - output: Prediction tensor of shape `(n_samples, n_out_channels)`.


   .. py:method:: _window_slicing_data(X, y=None)



.. py:class:: MultiGrainedScanning2DBlock(models, window_size, stride, shape_sample = None)

   Bases: :py:obj:`bosk.block.zoo.multi_grained_scanning.base.MultiGrainedScanningBlock`

   2-dimensional Multi Grained Scanning Block.

   Main use case is to process data with two spatial dimensions, like images.

   It takes `X` of shape `(n_samples, n_channels)`
   as an input and returns the tensor of shape `(n_samples, n_out_channels)`.

   :param models: Tuple of underlying models.
   :param window_size: Size of the sliding window.
   :param stride: Stride of the sliding window.
   :param shape_sample: Input data spatial dimensions (shape).

   Input slots
   -----------

   Fit inputs
   ~~~~~~~~~~

       - X: Data tensor of shape `(n_samples, n_channels)`.
       - y: Target variable values of shape `(n_samples, [n_outputs])`.

   Transform inputs
   ~~~~~~~~~~~~~~~~

       - X: Data tensor of shape `(n_samples, n_channels)`.

   Output slots
   ------------

       - output: Prediction tensor of shape `(n_samples, n_out_channels)`.


   .. py:method:: _window_slicing_data(X, y=None)



.. py:class:: MultiGrainedScanningNDBlock(model, kernel_size = 3, stride = None, dilation = 1, padding = None, chunk_size = -1)

   Bases: :py:obj:`bosk.block.base.BaseBlock`

   N-dimensional Multi Grained Scanning Block.

   Main use case is to process data with spatial dimensions, like images and sequences.

   It takes `X` of shape `(n_samples, n_channels, n_features_1, ..., n_features_k)`
   as an input and returns the tensor of shape `(n_samples, n_channels, t_1, ..., t_k)`.

   :param model: A fit-transform base model.
   :param kernel_size: Kernel size (int or tuple).
   :param stride: Stride.
   :param dilation: Dilation (kernel stride).
   :param padding: Padding size (see `numpy.pad`);
                   if None padding is disabled.
   :param chunk_size: Chunk size. Affects performance.

   Input slots
   -----------

   Fit inputs
   ~~~~~~~~~~

       - X: Data tensor of shape `(n_samples, n_channels, n_features_1,..., n_features_k)`.
       - y: Target variable values of shape `(n_samples, [n_outputs])`.

   Transform inputs
   ~~~~~~~~~~~~~~~~

       - X: Data tensor of shape `(n_samples, n_channels, n_features_1,..., n_features_k)`.

   Output slots
   ------------

       - output: Prediction tensor of shape `(n_samples, n_out_channels, out_n_features_1,..., out_n_features_k)`.


   .. py:attribute:: meta
      

      

   .. py:method:: fit(inputs)

      Fit the block on the given input data.

      :param inputs: Block input data for the fitting stage.

      :returns: Self.


   .. py:method:: __prepare_pooling_indices(xs_shape)


   .. py:method:: _model_transform(sliced)


   .. py:method:: transform(inputs)

      Transform the given input data, i.e. compute values for each output slot.

      :param inputs: Block input data for the transforming stage.

      :returns: Outputs calculated for the given inputs.



.. py:class:: PoolingBlock(kernel_size = 3, stride = None, dilation = 1, padding = None, aggregation = 'max', chunk_size = -1, impl_type = 'index')

   Bases: :py:obj:`bosk.block.base.BaseBlock`

   Pooling Block implements n-dimensional downsampling with an aggregation operation.

   It takes `X` of shape `(n_samples, n_channels, n_features_1, ..., n_features_k)`
   as an input and returns the pooled tensor of shape `(n_samples, n_channels, t_1, ..., t_k)`.

   :param kernel_size: Kernel size (int or tuple).
   :param stride: Stride.
   :param dilation: Dilation (kernel stride).
   :param padding: Padding size (see `numpy.pad`);
                   if None padding is disabled.
   :param aggregation: Aggregation operation name ('max', 'min', 'mean', 'sum') or function.
                       If the function is given, it should aggregate by the last axis;
                       also the function can be passed only if `impl_type` is `index`
                       and input data are at CPU.
   :param chunk_size: Chunk size. Affects performance.
   :param impl_type: Implementation type ('index', 'njit', 'jax').
                     Note that 'jax' impl type will move data to GPU.
                     For the GPU input data only 'jax' implementation is available.

   Input slots
   -----------

   Fit inputs
   ~~~~~~~~~~

       - X: Data tensor of shape `(n_samples, n_channels, n_features_1,..., n_features_k)`.

   Transform inputs
   ~~~~~~~~~~~~~~~~

       - X: Data tensor of shape `(n_samples, n_channels, n_features_1,..., n_features_k)`.

   Output slots
   ------------

       - output: Pooled tensor of shape `(n_samples, n_out_channels, out_n_features_1,..., out_n_features_k)`.


   .. py:attribute:: meta
      

      

   .. py:method:: fit(_inputs)

      Fit the block on the given input data.

      :param inputs: Block input data for the fitting stage.

      :returns: Self.


   .. py:method:: __aggregate(grouped_data)

      Apply an aggregation function along the last axis.

      :param grouped_data: Array of shape (n_groups, n_kernel_points)


   .. py:method:: __prepare_pooling_indices(xs_shape)


   .. py:method:: __index_based_chunk_pooling(xs)


   .. py:method:: __njit_based_chunk_pooling(xs)


   .. py:method:: __jax_based_pooling(xs)


   .. py:method:: __chunk_pooling(xs)


   .. py:method:: transform(inputs)

      Apply Pooling to input 'X'.

      :param inputs: Input data that consists of one element with key 'X'.
                     `inputs['X']` should have shape (n_samples, n_channels, n_features_1, ..., n_features_k).



