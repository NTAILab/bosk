:py:mod:`bosk.block.zoo.models.classification.ferns`
====================================================

.. py:module:: bosk.block.zoo.models.classification.ferns


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   bosk.block.zoo.models.classification.ferns.RandomFernsBlock




.. py:class:: RandomFernsBlock(n_groups = 10, n_ferns_in_group = 20, fern_size = 7, kind = 'unary', bootstrap = False, n_jobs = None, random_state = None)

   Bases: :py:obj:`bosk.block.base.BaseBlock`

   Random Ferns Classifier Block.

   :param n_groups: Number of ferns groups (like a number of estimators).
   :param n_ferns_in_group: Number of ferns in a group.
   :param fern_size: Number of tests in fern.
   :param kind: Kind of tests ('unary' or 'binary').
   :param bootstrap: Apply data bootstrap or not.
   :param n_jobs: Number of threads.
   :param random_state: Random state.

   Input slots
   -----------

   Fit inputs
   ~~~~~~~~~~

       - X: Input features.
       - y: Ground truth labels.

   Transform inputs
   ~~~~~~~~~~~~~~~~

       - X: Input features.

   Output slots
   ------------

       - probas: Predicted probabilities.


   .. py:attribute:: meta
      

      

   .. py:method:: __getstate__()


   .. py:method:: __setstate__(state)


   .. py:method:: _classifier_init(y)


   .. py:method:: _parallel_calc_bucket_stats(bucket_indices, y, group_data_indices)


   .. py:method:: _make_ferns(X, prng_key)


   .. py:method:: _apply_ferns(X, ferns)


   .. py:method:: fit(inputs)

      Fit the Random Ferns Block.
      The implementation is device-agnostic.



   .. py:method:: _predict_proba(X)


   .. py:method:: transform(inputs)

      Transform the given input data, i.e. compute values for each output slot.

      :param inputs: Block input data for the transforming stage.

      :returns: Outputs calculated for the given inputs.



