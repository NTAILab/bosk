:py:mod:`bosk.block.zoo.multi_grained_scanning.pooling`
=======================================================

.. py:module:: bosk.block.zoo.multi_grained_scanning.pooling


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   bosk.block.zoo.multi_grained_scanning.pooling.PoolingBlock
   bosk.block.zoo.multi_grained_scanning.pooling.GlobalAveragePoolingBlock




Attributes
~~~~~~~~~~

.. autoapisummary::

   bosk.block.zoo.multi_grained_scanning.pooling.AGGREGATION_FUNCTIONS


.. py:data:: AGGREGATION_FUNCTIONS
   

   

.. py:class:: PoolingBlock(kernel_size = 3, stride = None, dilation = 1, padding = None, aggregation = 'max', chunk_size = -1, impl_type = 'index')

   Bases: :py:obj:`bosk.block.base.BaseBlock`

   Pooling Block implements n-dimensional downsampling with an aggregation operation.

   It takes `X` of shape `(n_samples, n_channels, n_features_1, ..., n_features_k)`
   as an input and returns the pooled tensor of shape `(n_samples, n_channels, t_1, ..., t_k)`.

   :param kernel_size: Kernel size (int or tuple).
   :param stride: Stride.
   :param dilation: Dilation (kernel stride).
   :param padding: Padding size (see `numpy.pad`);
                   if None padding is disabled.
   :param aggregation: Aggregation operation name ('max', 'min', 'mean', 'sum') or function.
                       If the function is given, it should aggregate by the last axis;
                       also the function can be passed only if `impl_type` is `index`
                       and input data are at CPU.
   :param chunk_size: Chunk size. Affects performance.
   :param impl_type: Implementation type ('index', 'njit', 'jax').
                     Note that 'jax' impl type will move data to GPU.
                     For the GPU input data only 'jax' implementation is available.

   Input slots
   -----------

   Fit inputs
   ~~~~~~~~~~

       - X: Data tensor of shape `(n_samples, n_channels, n_features_1,..., n_features_k)`.

   Transform inputs
   ~~~~~~~~~~~~~~~~

       - X: Data tensor of shape `(n_samples, n_channels, n_features_1,..., n_features_k)`.

   Output slots
   ------------

       - output: Pooled tensor of shape `(n_samples, n_out_channels, out_n_features_1,..., out_n_features_k)`.


   .. py:attribute:: meta
      

      

   .. py:method:: fit(_inputs)

      Fit the block on the given input data.

      :param inputs: Block input data for the fitting stage.

      :returns: Self.


   .. py:method:: __aggregate(grouped_data)

      Apply an aggregation function along the last axis.

      :param grouped_data: Array of shape (n_groups, n_kernel_points)


   .. py:method:: __prepare_pooling_indices(xs_shape)


   .. py:method:: __index_based_chunk_pooling(xs)


   .. py:method:: __njit_based_chunk_pooling(xs)


   .. py:method:: __jax_based_pooling(xs)


   .. py:method:: __chunk_pooling(xs)


   .. py:method:: transform(inputs)

      Apply Pooling to input 'X'.

      :param inputs: Input data that consists of one element with key 'X'.
                     `inputs['X']` should have shape (n_samples, n_channels, n_features_1, ..., n_features_k).



.. py:class:: GlobalAveragePoolingBlock

   Bases: :py:obj:`bosk.block.base.BaseBlock`

   Base block, the parent of every computation block.

   Block has meta information, that defines the inputs and outputs as well as block execution properties,
   and slots which are unique for each block instance and can be used to connect different
   block between each other.

   Main block methods are: `fit(...)` and `transform(...)`.
   Both accept dictionaries as input, `transform(...)` returns a dictionary with output data.

   .. attribute:: meta

      Meta information of the block.
      May be shaped between different blocks.
      If the meta information cannot be specified at the class definition step,
      :py:class:`DynamicBlockMetaStub` should be used as a stub, and
      then redefined at the initialization step.

   .. attribute:: slots

      Block slots of type :py:class:`BlockSlots`, made dynamically at the initialization.
      Slots are unique for the block instance.

   .. py:attribute:: meta
      

      

   .. py:method:: _check_dims(inputs)


   .. py:method:: fit(inputs)

      Fit the block on the given input data.

      :param inputs: Block input data for the fitting stage.

      :returns: Self.


   .. py:method:: transform(inputs)

      Transform the given input data, i.e. compute values for each output slot.

      :param inputs: Block input data for the transforming stage.

      :returns: Outputs calculated for the given inputs.



