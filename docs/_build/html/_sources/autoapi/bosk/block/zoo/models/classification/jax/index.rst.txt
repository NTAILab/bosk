:py:mod:`bosk.block.zoo.models.classification.jax`
==================================================

.. py:module:: bosk.block.zoo.models.classification.jax


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   bosk.block.zoo.models.classification.jax.RFCGBlock
   bosk.block.zoo.models.classification.jax.ETCGBlock




.. py:class:: RFCGBlock(n_classes, n_estimators = 100, min_samples = 2, max_depth = 4, max_splits = 25, **kwargs)

   Bases: :py:obj:`bosk.block.base.BaseBlock`

   JAX implementation of Random Forest Classifier for GPU.

   :param n_classes: Number of classes.
   :param n_estimators: Number of estimators (trees).
   :param min_samples: Minimum number of samples.
   :param max_depth: Maximum depth.
   :param max_splits: Maximum number of splits.

   Input slots
   -----------

   Fit inputs
   ~~~~~~~~~~

       - X: Input features.
       - y: Ground truth labels.

   Transform inputs
   ~~~~~~~~~~~~~~~~

       - X: Input features.

   Output slots
   ------------

       - probas: Predicted probabilities.


   .. py:attribute:: meta
      

      

   .. py:method:: tree_flatten()


   .. py:method:: tree_unflatten(aux_data, children)
      :classmethod:


   .. py:method:: fit(inputs)

      Fit the block on the given input data.

      :param inputs: Block input data for the fitting stage.

      :returns: Self.


   .. py:method:: transform(inputs)

      Transform the given input data, i.e. compute values for each output slot.

      :param inputs: Block input data for the transforming stage.

      :returns: Outputs calculated for the given inputs.


   .. py:method:: predict(X)



.. py:class:: ETCGBlock(n_classes, n_estimators = 100, min_samples = 2, max_depth = 4, max_splits = 25, **kwargs)

   Bases: :py:obj:`bosk.block.base.BaseBlock`

   JAX implementation of Extremely Randomized Trees Classifier for GPU.

   :param n_classes: Number of classes.
   :param n_estimators: Number of estimators (trees).
   :param min_samples: Minimum number of samples.
   :param max_depth: Maximum depth.
   :param max_splits: Maximum number of splits.

   Input slots
   -----------

   Fit inputs
   ~~~~~~~~~~

       - X: Input features.
       - y: Ground truth labels.

   Transform inputs
   ~~~~~~~~~~~~~~~~

       - X: Input features.

   Output slots
   ------------

       - probas: Predicted probabilities.


   .. py:attribute:: meta
      

      

   .. py:method:: tree_flatten()


   .. py:method:: tree_unflatten(aux_data, children)
      :classmethod:


   .. py:method:: fit(inputs)

      Fit the block on the given input data.

      :param inputs: Block input data for the fitting stage.

      :returns: Self.


   .. py:method:: transform(inputs)

      Transform the given input data, i.e. compute values for each output slot.

      :param inputs: Block input data for the transforming stage.

      :returns: Outputs calculated for the given inputs.


   .. py:method:: predict(X)



