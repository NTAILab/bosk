:py:mod:`bosk.block.zoo.routing`
================================

.. py:module:: bosk.block.zoo.routing

.. autoapi-nested-parse::

   Data routing blocks.

   Can be used to determine and pass subsets of data to blocks.

   For example, to implement stacing where each block is trained independently
   on some subset of the data.



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   cs/index.rst
   cs 2/index.rst
   cv/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   bosk.block.zoo.routing.CSBlock
   bosk.block.zoo.routing.CSJoinBlock
   bosk.block.zoo.routing.CSFilterBlock
   bosk.block.zoo.routing.CVTrainIndicesBlock
   bosk.block.zoo.routing.SubsetTrainWrapperBlock




.. py:class:: CSBlock(eps = 1.0)

   Bases: :py:obj:`bosk.block.base.BaseBlock`

   Confidence screening block.

   :param eps: Confidence threshold.

   .. attribute:: eps

      Confidence threshold.

   Input slots
   -----------

   Fit inputs
   ~~~~~~~~~~

       The fit step is bypassed.

   Transform inputs
   ~~~~~~~~~~~~~~~~

       - X: Feature data array.

   Output slots
   ------------

       - best: Best data subsample.
       - mask: Mask for the rest of the data array.



   .. py:attribute:: meta
      

      

   .. py:method:: fit(inputs)

      The block bypasses the fit step.


   .. py:method:: transform(inputs)

      Transform the given input data, i.e. compute values for each output slot.

      :param inputs: Block input data for the transforming stage.

      :returns: Outputs calculated for the given inputs.



.. py:class:: CSJoinBlock

   Bases: :py:obj:`bosk.block.base.BaseBlock`

   Confidence screening joining (merging) block.

   Input slots
   -----------

   Fit inputs
   ~~~~~~~~~~

       The fit step is bypassed.

   Transform inputs
   ~~~~~~~~~~~~~~~~

       - best: Best data subsample.
       - refined: Refined data subsample (corresponding to `mask == True`).
       - mask: Mask of the refined part.

   Output slots
   ------------

       - output: Output merged data array.


   .. py:attribute:: meta
      

      

   .. py:method:: fit(inputs)

      The block bypasses the fit step.


   .. py:method:: transform(inputs)

      Transform the given input data, i.e. compute values for each output slot.

      :param inputs: Block input data for the transforming stage.

      :returns: Outputs calculated for the given inputs.



.. py:class:: CSFilterBlock(input_names)

   Bases: :py:obj:`bosk.block.base.BaseBlock`

   Confidence screening filtering block.

   Input slots
   -----------

   Fit inputs
   ~~~~~~~~~~

       The fit step is bypassed.

   Transform inputs
   ~~~~~~~~~~~~~~~~

       - mask: Mask array.
       - `input_names[0]`: Features data array 0.
       - ...
       - `input_names[n]`: Features data array n.

   Output slots
   ------------

       - `input_names[0]`: Features data array 0 subset.
       - ...
       - `input_names[n]`: Features data array n subset.

   .. attribute:: input_names

      List of input names.

   .. py:attribute:: meta
      :annotation: :bosk.block.meta.BlockMeta

      

   .. py:method:: fit(inputs)

      The block bypasses the fit step.


   .. py:method:: transform(inputs)

      Transform the given input data, i.e. compute values for each output slot.

      :param inputs: Block input data for the transforming stage.

      :returns: Outputs calculated for the given inputs.



.. py:class:: CVTrainIndicesBlock(size, random_state)

   Bases: :py:obj:`bosk.block.base.BaseBlock`

   Cross-validation Training Indices Block.

   Generates training indices for `size` models.
   The block has `size` outputs, each named as a number of model: `"0", "1", ...`.

   Dynamically specifies the meta information.

   :param size: Cross-validation size (number of splits).
   :param random_state: Random state.

   Input slots
   -----------

   Fit inputs
   ~~~~~~~~~~

       The fit step is bypassed.

   Transform inputs
   ~~~~~~~~~~~~~~~~

       - X: Features data array.
       - y: Target variable array.

   Output slots
   ------------

       - "0": Fold 0 training subset indices.
       - ...
       - "<n>": Fold n training subset indices.

   .. attribute:: size

      Cross-validation size (number of splits).

   .. attribute:: random_state

      Random state.

   .. py:attribute:: meta
      :annotation: :bosk.block.meta.BlockMeta

      

   .. py:method:: fit(inputs)

      The block bypasses the fit step.


   .. py:method:: transform(inputs)

      Transform the given input data, i.e. compute values for each output slot.

      :param inputs: Block input data for the transforming stage.

      :returns: Outputs calculated for the given inputs.



.. py:class:: SubsetTrainWrapperBlock(block)

   Bases: :py:obj:`bosk.block.base.BaseBlock`

   Block wrapper that fits the base block on the indices subset.

   The base block may have an arbitrary number of inputs of any type,
   but should not accept input named `"trainin_indices"`.

   At FIT stage the wrapper extracts subsets of each input along the first dimension.

   At TRANSFORM stage the wrapper bypasses inputs to the base block.

   Input slots
   -----------

   Fit inputs
   ~~~~~~~~~~

       - All inputs from the underlying block `block`.
       - training_indices: Training indices.

   Transform inputs
   ~~~~~~~~~~~~~~~~

       - All inputs from the underlying block `block`.

   Output slots
   ------------

       - All outputs from the underlying block `block`.

   .. attribute:: block

      Underlying block.

   .. py:attribute:: TRAINING_INDICES_NAME
      :annotation: = training_indices

      

   .. py:attribute:: meta
      :annotation: :bosk.block.meta.BlockMeta

      

   .. py:method:: _exclude_training_indices(inputs)


   .. py:method:: fit(inputs)

      Fit the block on the given input data.

      :param inputs: Block input data for the fitting stage.

      :returns: Self.


   .. py:method:: transform(inputs)

      Transform the given input data, i.e. compute values for each output slot.

      :param inputs: Block input data for the transforming stage.

      :returns: Outputs calculated for the given inputs.


   .. py:method:: set_random_state(seed)

      Set random seed for the block using numpy
      random generator or integer value.



