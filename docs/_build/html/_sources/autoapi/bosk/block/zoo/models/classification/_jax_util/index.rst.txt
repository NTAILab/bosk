:py:mod:`bosk.block.zoo.models.classification._jax_util`
========================================================

.. py:module:: bosk.block.zoo.models.classification._jax_util


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   bosk.block.zoo.models.classification._jax_util.TreeNode
   bosk.block.zoo.models.classification._jax_util.DecisionTree
   bosk.block.zoo.models.classification._jax_util.ExtraTree
   bosk.block.zoo.models.classification._jax_util.DecisionTreeClassifier
   bosk.block.zoo.models.classification._jax_util.ExtraTreeClassifier



Functions
~~~~~~~~~

.. autoapisummary::

   bosk.block.zoo.models.classification._jax_util.row_to_nan
   bosk.block.zoo.models.classification._jax_util.split_points
   bosk.block.zoo.models.classification._jax_util.split_mask
   bosk.block.zoo.models.classification._jax_util.compute_score_generic
   bosk.block.zoo.models.classification._jax_util.make_scoring_function
   bosk.block.zoo.models.classification._jax_util.split_node_generic_random
   bosk.block.zoo.models.classification._jax_util.split_node_generic
   bosk.block.zoo.models.classification._jax_util.make_split_node_function
   bosk.block.zoo.models.classification._jax_util.predict_proba
   bosk.block.zoo.models.classification._jax_util.entropy
   bosk.block.zoo.models.classification._jax_util.most_frequent
   bosk.block.zoo.models.classification._jax_util.accuracy



.. py:function:: row_to_nan(X, mask)

   Convert a whole row of X to nan with a row mask.


.. py:function:: split_points(X, mask, max_splits)

   Generate split points for the data.


.. py:function:: split_mask(value, col, mask)


.. py:function:: compute_score_generic(X_col, y, mask, split_value, score_fn)


.. py:function:: make_scoring_function(score_fn)


.. py:function:: split_node_generic_random(X, y, mask, max_splits, compute_all_scores)


.. py:function:: split_node_generic(X, y, mask, max_splits, compute_all_scores)


.. py:function:: make_split_node_function(score_fn, random = False)


.. py:class:: TreeNode(mask, split_value = jnp.nan, split_col = -1, is_leaf = True, leaf_value = jnp.nan, score = jnp.nan)

   .. py:method:: tree_flatten()


   .. py:method:: tree_unflatten(aux_data, children)
      :classmethod:



.. py:class:: DecisionTree(n_classes, min_samples, max_depth, max_splits, loss_fn, value_fn, score_fn, nodes = None)

   .. py:method:: tree_flatten()


   .. py:method:: tree_unflatten(aux_data, children)
      :classmethod:


   .. py:method:: fit(X, y, mask = None)


   .. py:method:: predict(X, mask = None)



.. py:class:: ExtraTree(n_classes, min_samples, max_depth, max_splits, loss_fn, value_fn, score_fn, nodes = None)

   Bases: :py:obj:`DecisionTree`


.. py:class:: DecisionTreeClassifier(n_classes, min_samples = 2, max_depth = 4, max_splits = 25, nodes = None)

   Bases: :py:obj:`DecisionTree`

   .. py:method:: tree_flatten()



.. py:class:: ExtraTreeClassifier(n_classes, min_samples = 2, max_depth = 4, max_splits = 25, nodes = None)

   Bases: :py:obj:`ExtraTree`

   .. py:method:: tree_flatten()



.. py:function:: predict_proba(y, mask, n_classes)


.. py:function:: entropy(y, mask, n_classes)


.. py:function:: most_frequent(y, mask, n_classes)


.. py:function:: accuracy(y_hat, y)


