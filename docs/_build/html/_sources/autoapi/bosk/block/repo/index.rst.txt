:py:mod:`bosk.block.repo`
=========================

.. py:module:: bosk.block.repo

.. autoapi-nested-parse::

   Block repository module.

   Contains repository classes that can be used to obtain block classes.

   The block classes are located in :py:mod:`bosk.block.zoo`.



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   base/index.rst
   scope/index.rst
   zoo/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   bosk.block.repo.BaseBlockClassRepository
   bosk.block.repo.ScopeBlockClassRepository
   bosk.block.repo.ZooBlockClassRepository




Attributes
~~~~~~~~~~

.. autoapisummary::

   bosk.block.repo.DEFAULT_BLOCK_CLASS_REPOSITORY


.. py:class:: BaseBlockClassRepository

   Bases: :py:obj:`abc.ABC`

   Base block class repository, the parent of every block class repo.

   It can be used to get block classes by name,
   for example in pipeline builders.


   .. py:method:: get(name)
      :abstractmethod:

      Get block class by name.

      :param name: Block name.

      :returns: Demanded block class.



.. py:class:: ScopeBlockClassRepository(scope)

   Bases: :py:obj:`bosk.block.repo.base.BaseBlockClassRepository`

   Scope block class repository.

   Helps to get access to all blocks in a scope.

   :param scope: Scope dictionary.
                 Pass `locals()` or `globals()` to use the caller's scope.
   :type scope: dict

   .. py:method:: get(name)

      Get block class by name.

      :param name: Block name.

      :returns: Demanded block class.



.. py:class:: ZooBlockClassRepository

   Bases: :py:obj:`bosk.block.repo.scope.ScopeBlockClassRepository`

   Block class repository that extracts block classes from
   `block.zoo` submodule.



.. py:data:: DEFAULT_BLOCK_CLASS_REPOSITORY
   

   

