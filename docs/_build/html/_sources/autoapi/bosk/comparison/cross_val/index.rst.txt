:py:mod:`bosk.comparison.cross_val`
===================================

.. py:module:: bosk.comparison.cross_val


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   bosk.comparison.cross_val.CVComparator




.. py:class:: CVComparator(pipelines, foreign_models, cv_strat, exec_cls = TopologicalExecutor, exec_kw=None, get_blocks_times = False, suppress_exec_warn = True, f_optimize_pipelines = True, random_state = None)

   Bases: :py:obj:`bosk.comparison.base.BaseComparator`

   Comparator that uses a cross-validation
   strategy of checking model's performance. You can create
   your own iterator (based on sklearn's `BaseCrossValidator` class)
   that will define indexes, taken in each fold,
   or you can use predefined iterators from the `sklearn`.

   :param pipelines: A pipeline or a list of pipelines to evaluate.
   :param foreign_models: A foreign model or a list of foreign models to evaluate.
   :param cv_strat: A cross-validation strategy to use.
   :param exec_cls: The executor class to use.
   :param exec_kw: The keyword arguments for the executor.
   :param get_blocks_times: Whether to get block execution times.
                            If True, the block executor will be changed to :py:class:`TimerBlockExecutor`.
   :param suppress_exec_warn: Whether to suppress warnings when using the executor.
   :param f_optimize_pipelines: Whether to optimize pipelines.
   :param random_state: The random state.
                        It will be used as a seed for generator tu further propagate seeds
                        to every block.

   .. py:method:: _write_metrics_info_to_dict(df_dict, metrics, train_data_dict, train_pred_dict, test_data_dict, test_pred_dict, metrics_names)


   .. py:method:: _get_copy_pipeline(pip_num)


   .. py:method:: _get_times_dict(common_times, pip_times, common_part_iso, copy_iso)


   .. py:method:: _get_pers_inp_dict(pipeline, common_output, input_dict)


   .. py:method:: _get_metrics_names(metrics)


   .. py:method:: _write_preamble(df_dict, model_name, fold_num)


   .. py:method:: get_score(data, metrics)

      Function to obtain results of different metrics for the models.




