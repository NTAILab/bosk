:py:mod:`bosk.pipeline.base`
============================

.. py:module:: bosk.pipeline.base


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   bosk.pipeline.base.BasePipeline




.. py:class:: BasePipeline

   The computational graph itself.

   .. attribute:: nodes

      Nodes of the computational graph,
      which are blocks of the deep forest.

   .. attribute:: connections

      Edges of the computational graph,
      head is the BlockOutputSlot and tail is BlockInputSlot.

   .. attribute:: inputs

      Inputs of the computational graph.
      Executors, proceeding the pipeline, can use some of them.

   .. attribute:: outputs

      Outputs of the computational graph.
      Executors, proceeding the pipeline, can use some of them.

   .. py:attribute:: nodes
      :annotation: :List[bosk.block.base.BaseBlock]

      

   .. py:attribute:: connections
      :annotation: :List[bosk.pipeline.connection.Connection]

      

   .. py:attribute:: inputs
      :annotation: :Dict[str, bosk.block.base.BlockInputSlot]

      

   .. py:attribute:: outputs
      :annotation: :Dict[str, bosk.block.base.BlockOutputSlot]

      

   .. py:method:: accept(visitor)

      Accept the visitor.

      :param visitor: The visitor which can visit pipelines, nodes and connections.


   .. py:method:: set_random_state(seed)

      Set random seed for each block in the pipeline.



