:py:mod:`bosk.pipeline.converter`
=================================

.. py:module:: bosk.pipeline.converter

.. autoapi-nested-parse::

   Pipeline converters.

   Can be used to convert pipeline to different graphs in formats of third-party libraries.

   The pipeline conversion is based on visitors: pipelines and blocks can accept them.



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   dask/index.rst
   nx/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   bosk.pipeline.converter.DaskConverter
   bosk.pipeline.converter.NetworkXConverter




.. py:class:: DaskConverter(stage, operator_set = TransformDaskOperatorSet())

   Converts a pipeline to a Dask computational graph.

   Since Dask does not support multi-output blocks by default,
   we split each block into multiple nodes:

       - Node that computes the block;
       - A number of nodes that extract data corresponding to outputs.


   .. py:class:: Visitor(parent)

      Bases: :py:obj:`bosk.visitor.base.BaseVisitor`

      Base Visitor interface.

      Visitor can be used to process any entity of a computational pipeline,
      such as: block, connection, or even the whole pipeline.

      It is important to implement dispatching for all entity types or
      to make some default method which will not raise ``NotImplementedError``
      for unknown entity types.


      .. py:method:: visit(obj)


      .. py:method:: _(block)

         Enumerate blocks.



      .. py:method:: _(connection)


      .. py:method:: _(pipeline)



   .. py:method:: _mangle_block(block)


   .. py:method:: _mangle_output_slot(output_slot)


   .. py:method:: _mangle_input_slot(input_slot)


   .. py:method:: __call__(pipeline)



.. py:class:: NetworkXConverter

   .. py:class:: Visitor(graph)

      Bases: :py:obj:`bosk.visitor.base.BaseVisitor`

      Base Visitor interface.

      Visitor can be used to process any entity of a computational pipeline,
      such as: block, connection, or even the whole pipeline.

      It is important to implement dispatching for all entity types or
      to make some default method which will not raise ``NotImplementedError``
      for unknown entity types.


      .. py:method:: visit(obj)


      .. py:method:: _(block)


      .. py:method:: _(connection)



   .. py:method:: __call__(pipeline)



